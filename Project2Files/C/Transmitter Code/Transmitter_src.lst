0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Mon Mar 19 21:15:58 2018
0000              5   ;--------------------------------------------------------
                  5   $name Transmitter_src
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public _getsn
0000             28            public __c51_external_startup
0000             29            public _LCDprint
0000             30            public _LCD_4BIT
0000             31            public _WriteCommand
0000             32            public _WriteData
0000             33            public _LCD_byte
0000             34            public _LCD_pulse
0000             35            public _waitms
0000             36            public _Timer3us
0000             37            public _getCommand
0000             38            public _PWMon
0000             39            public _PWMoff
0000             40            public _setRotation
0000             41            public _setReload
0000             42            public _setFrequency
0000             43            public _reloadToFrequency
0000             44            public _frequencyToReload
0000             45            public _setDutyCycle
0000             46            public _Timer2_ISR
0000             47            public _Timer2_init
0000             48            public _LCDprint_PARM_3
0000             49            public _reload_flag
0000             50            public _getsn_PARM_2
0000             51            public _LCDprint_PARM_2
0000             52            public _setDutyCycle_PARM_2
0000             53            public _duty_cycle1
0000             54            public _duty_cycle0
0000             55            public _pwm_count
0000             56   ;--------------------------------------------------------
0000             57   ; Special Function Registers
0000             58   ;--------------------------------------------------------
0000             59   _ACC            DATA 0xe0
0000             60   _ADC0ASAH       DATA 0xb6
0000             61   _ADC0ASAL       DATA 0xb5
0000             62   _ADC0ASCF       DATA 0xa1
0000             63   _ADC0ASCT       DATA 0xc7
0000             64   _ADC0CF0        DATA 0xbc
0000             65   _ADC0CF1        DATA 0xb9
0000             66   _ADC0CF2        DATA 0xdf
0000             67   _ADC0CN0        DATA 0xe8
0000             68   _ADC0CN1        DATA 0xb2
0000             69   _ADC0CN2        DATA 0xb3
0000             70   _ADC0GTH        DATA 0xc4
0000             71   _ADC0GTL        DATA 0xc3
0000             72   _ADC0H          DATA 0xbe
0000             73   _ADC0L          DATA 0xbd
0000             74   _ADC0LTH        DATA 0xc6
0000             75   _ADC0LTL        DATA 0xc5
0000             76   _ADC0MX         DATA 0xbb
0000             77   _B              DATA 0xf0
0000             78   _CKCON0         DATA 0x8e
0000             79   _CKCON1         DATA 0xa6
0000             80   _CLEN0          DATA 0xc6
0000             81   _CLIE0          DATA 0xc7
0000             82   _CLIF0          DATA 0xe8
0000             83   _CLKSEL         DATA 0xa9
0000             84   _CLOUT0         DATA 0xd1
0000             85   _CLU0CF         DATA 0xb1
0000             86   _CLU0FN         DATA 0xaf
0000             87   _CLU0MX         DATA 0x84
0000             88   _CLU1CF         DATA 0xb3
0000             89   _CLU1FN         DATA 0xb2
0000             90   _CLU1MX         DATA 0x85
0000             91   _CLU2CF         DATA 0xb6
0000             92   _CLU2FN         DATA 0xb5
0000             93   _CLU2MX         DATA 0x91
0000             94   _CLU3CF         DATA 0xbf
0000             95   _CLU3FN         DATA 0xbe
0000             96   _CLU3MX         DATA 0xae
0000             97   _CMP0CN0        DATA 0x9b
0000             98   _CMP0CN1        DATA 0x99
0000             99   _CMP0MD         DATA 0x9d
0000            100   _CMP0MX         DATA 0x9f
0000            101   _CMP1CN0        DATA 0xbf
0000            102   _CMP1CN1        DATA 0xac
0000            103   _CMP1MD         DATA 0xab
0000            104   _CMP1MX         DATA 0xaa
0000            105   _CRC0CN0        DATA 0xce
0000            106   _CRC0CN1        DATA 0x86
0000            107   _CRC0CNT        DATA 0xd3
0000            108   _CRC0DAT        DATA 0xcb
0000            109   _CRC0FLIP       DATA 0xcf
0000            110   _CRC0IN         DATA 0xca
0000            111   _CRC0ST         DATA 0xd2
0000            112   _DAC0CF0        DATA 0x91
0000            113   _DAC0CF1        DATA 0x92
0000            114   _DAC0H          DATA 0x85
0000            115   _DAC0L          DATA 0x84
0000            116   _DAC1CF0        DATA 0x93
0000            117   _DAC1CF1        DATA 0x94
0000            118   _DAC1H          DATA 0x8a
0000            119   _DAC1L          DATA 0x89
0000            120   _DAC2CF0        DATA 0x95
0000            121   _DAC2CF1        DATA 0x96
0000            122   _DAC2H          DATA 0x8c
0000            123   _DAC2L          DATA 0x8b
0000            124   _DAC3CF0        DATA 0x9a
0000            125   _DAC3CF1        DATA 0x9c
0000            126   _DAC3H          DATA 0x8e
0000            127   _DAC3L          DATA 0x8d
0000            128   _DACGCF0        DATA 0x88
0000            129   _DACGCF1        DATA 0x98
0000            130   _DACGCF2        DATA 0xa2
0000            131   _DERIVID        DATA 0xad
0000            132   _DEVICEID       DATA 0xb5
0000            133   _DPH            DATA 0x83
0000            134   _DPL            DATA 0x82
0000            135   _EIE1           DATA 0xe6
0000            136   _EIE2           DATA 0xf3
0000            137   _EIP1           DATA 0xbb
0000            138   _EIP1H          DATA 0xee
0000            139   _EIP2           DATA 0xed
0000            140   _EIP2H          DATA 0xf6
0000            141   _EMI0CN         DATA 0xe7
0000            142   _FLKEY          DATA 0xb7
0000            143   _HFO0CAL        DATA 0xc7
0000            144   _HFO1CAL        DATA 0xd6
0000            145   _HFOCN          DATA 0xef
0000            146   _I2C0ADM        DATA 0xff
0000            147   _I2C0CN0        DATA 0xba
0000            148   _I2C0DIN        DATA 0xbc
0000            149   _I2C0DOUT       DATA 0xbb
0000            150   _I2C0FCN0       DATA 0xad
0000            151   _I2C0FCN1       DATA 0xab
0000            152   _I2C0FCT        DATA 0xf5
0000            153   _I2C0SLAD       DATA 0xbd
0000            154   _I2C0STAT       DATA 0xb9
0000            155   _IE             DATA 0xa8
0000            156   _IP             DATA 0xb8
0000            157   _IPH            DATA 0xf2
0000            158   _IT01CF         DATA 0xe4
0000            159   _LFO0CN         DATA 0xb1
0000            160   _P0             DATA 0x80
0000            161   _P0MASK         DATA 0xfe
0000            162   _P0MAT          DATA 0xfd
0000            163   _P0MDIN         DATA 0xf1
0000            164   _P0MDOUT        DATA 0xa4
0000            165   _P0SKIP         DATA 0xd4
0000            166   _P1             DATA 0x90
0000            167   _P1MASK         DATA 0xee
0000            168   _P1MAT          DATA 0xed
0000            169   _P1MDIN         DATA 0xf2
0000            170   _P1MDOUT        DATA 0xa5
0000            171   _P1SKIP         DATA 0xd5
0000            172   _P2             DATA 0xa0
0000            173   _P2MASK         DATA 0xfc
0000            174   _P2MAT          DATA 0xfb
0000            175   _P2MDIN         DATA 0xf3
0000            176   _P2MDOUT        DATA 0xa6
0000            177   _P2SKIP         DATA 0xcc
0000            178   _P3             DATA 0xb0
0000            179   _P3MDIN         DATA 0xf4
0000            180   _P3MDOUT        DATA 0x9c
0000            181   _PCA0CENT       DATA 0x9e
0000            182   _PCA0CLR        DATA 0x9c
0000            183   _PCA0CN0        DATA 0xd8
0000            184   _PCA0CPH0       DATA 0xfc
0000            185   _PCA0CPH1       DATA 0xea
0000            186   _PCA0CPH2       DATA 0xec
0000            187   _PCA0CPH3       DATA 0xf5
0000            188   _PCA0CPH4       DATA 0x85
0000            189   _PCA0CPH5       DATA 0xde
0000            190   _PCA0CPL0       DATA 0xfb
0000            191   _PCA0CPL1       DATA 0xe9
0000            192   _PCA0CPL2       DATA 0xeb
0000            193   _PCA0CPL3       DATA 0xf4
0000            194   _PCA0CPL4       DATA 0x84
0000            195   _PCA0CPL5       DATA 0xdd
0000            196   _PCA0CPM0       DATA 0xda
0000            197   _PCA0CPM1       DATA 0xdb
0000            198   _PCA0CPM2       DATA 0xdc
0000            199   _PCA0CPM3       DATA 0xae
0000            200   _PCA0CPM4       DATA 0xaf
0000            201   _PCA0CPM5       DATA 0xcc
0000            202   _PCA0H          DATA 0xfa
0000            203   _PCA0L          DATA 0xf9
0000            204   _PCA0MD         DATA 0xd9
0000            205   _PCA0POL        DATA 0x96
0000            206   _PCA0PWM        DATA 0xf7
0000            207   _PCON0          DATA 0x87
0000            208   _PCON1          DATA 0xcd
0000            209   _PFE0CN         DATA 0xc1
0000            210   _PRTDRV         DATA 0xf6
0000            211   _PSCTL          DATA 0x8f
0000            212   _PSTAT0         DATA 0xaa
0000            213   _PSW            DATA 0xd0
0000            214   _REF0CN         DATA 0xd1
0000            215   _REG0CN         DATA 0xc9
0000            216   _REVID          DATA 0xb6
0000            217   _RSTSRC         DATA 0xef
0000            218   _SBCON1         DATA 0x94
0000            219   _SBRLH1         DATA 0x96
0000            220   _SBRLL1         DATA 0x95
0000            221   _SBUF           DATA 0x99
0000            222   _SBUF0          DATA 0x99
0000            223   _SBUF1          DATA 0x92
0000            224   _SCON           DATA 0x98
0000            225   _SCON0          DATA 0x98
0000            226   _SCON1          DATA 0xc8
0000            227   _SFRPAGE        DATA 0xa7
0000            228   _SFRPGCN        DATA 0xbc
0000            229   _SFRSTACK       DATA 0xd7
0000            230   _SMB0ADM        DATA 0xd6
0000            231   _SMB0ADR        DATA 0xd7
0000            232   _SMB0CF         DATA 0xc1
0000            233   _SMB0CN0        DATA 0xc0
0000            234   _SMB0DAT        DATA 0xc2
0000            235   _SMB0FCN0       DATA 0xc3
0000            236   _SMB0FCN1       DATA 0xc4
0000            237   _SMB0FCT        DATA 0xef
0000            238   _SMB0RXLN       DATA 0xc5
0000            239   _SMB0TC         DATA 0xac
0000            240   _SMOD1          DATA 0x93
0000            241   _SP             DATA 0x81
0000            242   _SPI0CFG        DATA 0xa1
0000            243   _SPI0CKR        DATA 0xa2
0000            244   _SPI0CN0        DATA 0xf8
0000            245   _SPI0DAT        DATA 0xa3
0000            246   _SPI0FCN0       DATA 0x9a
0000            247   _SPI0FCN1       DATA 0x9b
0000            248   _SPI0FCT        DATA 0xf7
0000            249   _SPI0PCF        DATA 0xdf
0000            250   _TCON           DATA 0x88
0000            251   _TH0            DATA 0x8c
0000            252   _TH1            DATA 0x8d
0000            253   _TL0            DATA 0x8a
0000            254   _TL1            DATA 0x8b
0000            255   _TMOD           DATA 0x89
0000            256   _TMR2CN0        DATA 0xc8
0000            257   _TMR2CN1        DATA 0xfd
0000            258   _TMR2H          DATA 0xcf
0000            259   _TMR2L          DATA 0xce
0000            260   _TMR2RLH        DATA 0xcb
0000            261   _TMR2RLL        DATA 0xca
0000            262   _TMR3CN0        DATA 0x91
0000            263   _TMR3CN1        DATA 0xfe
0000            264   _TMR3H          DATA 0x95
0000            265   _TMR3L          DATA 0x94
0000            266   _TMR3RLH        DATA 0x93
0000            267   _TMR3RLL        DATA 0x92
0000            268   _TMR4CN0        DATA 0x98
0000            269   _TMR4CN1        DATA 0xff
0000            270   _TMR4H          DATA 0xa5
0000            271   _TMR4L          DATA 0xa4
0000            272   _TMR4RLH        DATA 0xa3
0000            273   _TMR4RLL        DATA 0xa2
0000            274   _TMR5CN0        DATA 0xc0
0000            275   _TMR5CN1        DATA 0xf1
0000            276   _TMR5H          DATA 0xd5
0000            277   _TMR5L          DATA 0xd4
0000            278   _TMR5RLH        DATA 0xd3
0000            279   _TMR5RLL        DATA 0xd2
0000            280   _UART0PCF       DATA 0xd9
0000            281   _UART1FCN0      DATA 0x9d
0000            282   _UART1FCN1      DATA 0xd8
0000            283   _UART1FCT       DATA 0xfa
0000            284   _UART1LIN       DATA 0x9e
0000            285   _UART1PCF       DATA 0xda
0000            286   _VDM0CN         DATA 0xff
0000            287   _WDTCN          DATA 0x97
0000            288   _XBR0           DATA 0xe1
0000            289   _XBR1           DATA 0xe2
0000            290   _XBR2           DATA 0xe3
0000            291   _XOSC0CN        DATA 0x86
0000            292   _DPTR           DATA 0x8382
0000            293   _TMR2RL         DATA 0xcbca
0000            294   _TMR3RL         DATA 0x9392
0000            295   _TMR4RL         DATA 0xa3a2
0000            296   _TMR5RL         DATA 0xd3d2
0000            297   _TMR0           DATA 0x8c8a
0000            298   _TMR1           DATA 0x8d8b
0000            299   _TMR2           DATA 0xcfce
0000            300   _TMR3           DATA 0x9594
0000            301   _TMR4           DATA 0xa5a4
0000            302   _TMR5           DATA 0xd5d4
0000            303   _SBRL1          DATA 0x9695
0000            304   _PCA0           DATA 0xfaf9
0000            305   _PCA0CP0        DATA 0xfcfb
0000            306   _PCA0CP1        DATA 0xeae9
0000            307   _PCA0CP2        DATA 0xeceb
0000            308   _PCA0CP3        DATA 0xf5f4
0000            309   _PCA0CP4        DATA 0x8584
0000            310   _PCA0CP5        DATA 0xdedd
0000            311   _ADC0ASA        DATA 0xb6b5
0000            312   _ADC0GT         DATA 0xc4c3
0000            313   _ADC0           DATA 0xbebd
0000            314   _ADC0LT         DATA 0xc6c5
0000            315   _DAC0           DATA 0x8584
0000            316   _DAC1           DATA 0x8a89
0000            317   _DAC2           DATA 0x8c8b
0000            318   _DAC3           DATA 0x8e8d
0000            319   ;--------------------------------------------------------
0000            320   ; special function bits
0000            321   ;--------------------------------------------------------
0000            322   _ACC_0          BIT 0xe0
0000            323   _ACC_1          BIT 0xe1
0000            324   _ACC_2          BIT 0xe2
0000            325   _ACC_3          BIT 0xe3
0000            326   _ACC_4          BIT 0xe4
0000            327   _ACC_5          BIT 0xe5
0000            328   _ACC_6          BIT 0xe6
0000            329   _ACC_7          BIT 0xe7
0000            330   _TEMPE          BIT 0xe8
0000            331   _ADGN0          BIT 0xe9
0000            332   _ADGN1          BIT 0xea
0000            333   _ADWINT         BIT 0xeb
0000            334   _ADBUSY         BIT 0xec
0000            335   _ADINT          BIT 0xed
0000            336   _IPOEN          BIT 0xee
0000            337   _ADEN           BIT 0xef
0000            338   _B_0            BIT 0xf0
0000            339   _B_1            BIT 0xf1
0000            340   _B_2            BIT 0xf2
0000            341   _B_3            BIT 0xf3
0000            342   _B_4            BIT 0xf4
0000            343   _B_5            BIT 0xf5
0000            344   _B_6            BIT 0xf6
0000            345   _B_7            BIT 0xf7
0000            346   _C0FIF          BIT 0xe8
0000            347   _C0RIF          BIT 0xe9
0000            348   _C1FIF          BIT 0xea
0000            349   _C1RIF          BIT 0xeb
0000            350   _C2FIF          BIT 0xec
0000            351   _C2RIF          BIT 0xed
0000            352   _C3FIF          BIT 0xee
0000            353   _C3RIF          BIT 0xef
0000            354   _D1SRC0         BIT 0x88
0000            355   _D1SRC1         BIT 0x89
0000            356   _D1AMEN         BIT 0x8a
0000            357   _D01REFSL       BIT 0x8b
0000            358   _D3SRC0         BIT 0x8c
0000            359   _D3SRC1         BIT 0x8d
0000            360   _D3AMEN         BIT 0x8e
0000            361   _D23REFSL       BIT 0x8f
0000            362   _D0UDIS         BIT 0x98
0000            363   _D1UDIS         BIT 0x99
0000            364   _D2UDIS         BIT 0x9a
0000            365   _D3UDIS         BIT 0x9b
0000            366   _EX0            BIT 0xa8
0000            367   _ET0            BIT 0xa9
0000            368   _EX1            BIT 0xaa
0000            369   _ET1            BIT 0xab
0000            370   _ES0            BIT 0xac
0000            371   _ET2            BIT 0xad
0000            372   _ESPI0          BIT 0xae
0000            373   _EA             BIT 0xaf
0000            374   _PX0            BIT 0xb8
0000            375   _PT0            BIT 0xb9
0000            376   _PX1            BIT 0xba
0000            377   _PT1            BIT 0xbb
0000            378   _PS0            BIT 0xbc
0000            379   _PT2            BIT 0xbd
0000            380   _PSPI0          BIT 0xbe
0000            381   _P0_0           BIT 0x80
0000            382   _P0_1           BIT 0x81
0000            383   _P0_2           BIT 0x82
0000            384   _P0_3           BIT 0x83
0000            385   _P0_4           BIT 0x84
0000            386   _P0_5           BIT 0x85
0000            387   _P0_6           BIT 0x86
0000            388   _P0_7           BIT 0x87
0000            389   _P1_0           BIT 0x90
0000            390   _P1_1           BIT 0x91
0000            391   _P1_2           BIT 0x92
0000            392   _P1_3           BIT 0x93
0000            393   _P1_4           BIT 0x94
0000            394   _P1_5           BIT 0x95
0000            395   _P1_6           BIT 0x96
0000            396   _P1_7           BIT 0x97
0000            397   _P2_0           BIT 0xa0
0000            398   _P2_1           BIT 0xa1
0000            399   _P2_2           BIT 0xa2
0000            400   _P2_3           BIT 0xa3
0000            401   _P2_4           BIT 0xa4
0000            402   _P2_5           BIT 0xa5
0000            403   _P2_6           BIT 0xa6
0000            404   _P3_0           BIT 0xb0
0000            405   _P3_1           BIT 0xb1
0000            406   _P3_2           BIT 0xb2
0000            407   _P3_3           BIT 0xb3
0000            408   _P3_4           BIT 0xb4
0000            409   _P3_7           BIT 0xb7
0000            410   _CCF0           BIT 0xd8
0000            411   _CCF1           BIT 0xd9
0000            412   _CCF2           BIT 0xda
0000            413   _CCF3           BIT 0xdb
0000            414   _CCF4           BIT 0xdc
0000            415   _CCF5           BIT 0xdd
0000            416   _CR             BIT 0xde
0000            417   _CF             BIT 0xdf
0000            418   _PARITY         BIT 0xd0
0000            419   _F1             BIT 0xd1
0000            420   _OV             BIT 0xd2
0000            421   _RS0            BIT 0xd3
0000            422   _RS1            BIT 0xd4
0000            423   _F0             BIT 0xd5
0000            424   _AC             BIT 0xd6
0000            425   _CY             BIT 0xd7
0000            426   _RI             BIT 0x98
0000            427   _TI             BIT 0x99
0000            428   _RB8            BIT 0x9a
0000            429   _TB8            BIT 0x9b
0000            430   _REN            BIT 0x9c
0000            431   _CE             BIT 0x9d
0000            432   _SMODE          BIT 0x9e
0000            433   _RI1            BIT 0xc8
0000            434   _TI1            BIT 0xc9
0000            435   _RBX1           BIT 0xca
0000            436   _TBX1           BIT 0xcb
0000            437   _REN1           BIT 0xcc
0000            438   _PERR1          BIT 0xcd
0000            439   _OVR1           BIT 0xce
0000            440   _SI             BIT 0xc0
0000            441   _ACK            BIT 0xc1
0000            442   _ARBLOST        BIT 0xc2
0000            443   _ACKRQ          BIT 0xc3
0000            444   _STO            BIT 0xc4
0000            445   _STA            BIT 0xc5
0000            446   _TXMODE         BIT 0xc6
0000            447   _MASTER         BIT 0xc7
0000            448   _SPIEN          BIT 0xf8
0000            449   _TXNF           BIT 0xf9
0000            450   _NSSMD0         BIT 0xfa
0000            451   _NSSMD1         BIT 0xfb
0000            452   _RXOVRN         BIT 0xfc
0000            453   _MODF           BIT 0xfd
0000            454   _WCOL           BIT 0xfe
0000            455   _SPIF           BIT 0xff
0000            456   _IT0            BIT 0x88
0000            457   _IE0            BIT 0x89
0000            458   _IT1            BIT 0x8a
0000            459   _IE1            BIT 0x8b
0000            460   _TR0            BIT 0x8c
0000            461   _TF0            BIT 0x8d
0000            462   _TR1            BIT 0x8e
0000            463   _TF1            BIT 0x8f
0000            464   _T2XCLK0        BIT 0xc8
0000            465   _T2XCLK1        BIT 0xc9
0000            466   _TR2            BIT 0xca
0000            467   _T2SPLIT        BIT 0xcb
0000            468   _TF2CEN         BIT 0xcc
0000            469   _TF2LEN         BIT 0xcd
0000            470   _TF2L           BIT 0xce
0000            471   _TF2H           BIT 0xcf
0000            472   _T4XCLK0        BIT 0x98
0000            473   _T4XCLK1        BIT 0x99
0000            474   _TR4            BIT 0x9a
0000            475   _T4SPLIT        BIT 0x9b
0000            476   _TF4CEN         BIT 0x9c
0000            477   _TF4LEN         BIT 0x9d
0000            478   _TF4L           BIT 0x9e
0000            479   _TF4H           BIT 0x9f
0000            480   _T5XCLK0        BIT 0xc0
0000            481   _T5XCLK1        BIT 0xc1
0000            482   _TR5            BIT 0xc2
0000            483   _T5SPLIT        BIT 0xc3
0000            484   _TF5CEN         BIT 0xc4
0000            485   _TF5LEN         BIT 0xc5
0000            486   _TF5L           BIT 0xc6
0000            487   _TF5H           BIT 0xc7
0000            488   _RIE            BIT 0xd8
0000            489   _RXTO0          BIT 0xd9
0000            490   _RXTO1          BIT 0xda
0000            491   _RFRQ           BIT 0xdb
0000            492   _TIE            BIT 0xdc
0000            493   _TXHOLD         BIT 0xdd
0000            494   _TXNF1          BIT 0xde
0000            495   _TFRQ           BIT 0xdf
0000            496   ;--------------------------------------------------------
0000            497   ; overlayable register banks
0000            498   ;--------------------------------------------------------
0000            499            rbank0 segment data overlay
0000            500   ;--------------------------------------------------------
0000            501   ; internal ram data
0000            502   ;--------------------------------------------------------
0000            503            rseg R_DSEG
0000            504   _pwm_count:
0000            505            ds 1
0001            506   _duty_cycle0:
0001            507            ds 1
0002            508   _duty_cycle1:
0002            509            ds 1
0003            510   _setDutyCycle_PARM_2:
0003            511            ds 1
0004            512   _setDutyCycle_duty_1_69:
0004            513            ds 2
0006            514   _setFrequency_frequency_1_77:
0006            515            ds 2
0008            516   _setReload_reload_1_79:
0008            517            ds 2
000A            518   _setRotation_duty_1_81:
000A            519            ds 2
000C            520   _getCommand_sloc0_1_0:
000C            521            ds 2
000E            522   _LCDprint_PARM_2:
000E            523            ds 1
000F            524   _getsn_PARM_2:
000F            525            ds 2
0011            526   _getsn_buff_1_113:
0011            527            ds 3
0014            528   _getsn_sloc0_1_0:
0014            529            ds 2
0016            530   _main_buffer_1_119:
0016            531            ds 16
0026            532   ;--------------------------------------------------------
0026            533   ; overlayable items in internal ram 
0026            534   ;--------------------------------------------------------
0000            535            rseg    R_OSEG
0000            536   ;--------------------------------------------------------
0000            537   ; indirectly addressable internal ram data
0000            538   ;--------------------------------------------------------
0000            539            rseg R_ISEG
0000            540   ;--------------------------------------------------------
0000            541   ; absolute internal ram data
0000            542   ;--------------------------------------------------------
0000            543            DSEG
0000            544   ;--------------------------------------------------------
0000            545   ; bit data
0000            546   ;--------------------------------------------------------
0000            547            rseg R_BSEG
0000            548   _reload_flag:
0000            549            DBIT    1
0001            550   _Timer2_ISR_sloc0_1_0:
0001            551            DBIT    1
0002            552   _LCDprint_PARM_3:
0002            553            DBIT    1
0003            554   ;--------------------------------------------------------
0003            555   ; paged external ram data
0003            556   ;--------------------------------------------------------
0000            557            rseg R_PSEG
0000            558   ;--------------------------------------------------------
0000            559   ; external ram data
0000            560   ;--------------------------------------------------------
0000            561            rseg R_XSEG
0000            562   ;--------------------------------------------------------
0000            563   ; absolute external ram data
0000            564   ;--------------------------------------------------------
0000            565            XSEG
0000            566   ;--------------------------------------------------------
0000            567   ; external initialized ram data
0000            568   ;--------------------------------------------------------
0000            569            rseg R_IXSEG
0000            570            rseg R_HOME
0000            571            rseg R_GSINIT
0000            572            rseg R_CSEG
0000            573   ;--------------------------------------------------------
0000            574   ; Reset entry point and interrupt vectors
0000            575   ;--------------------------------------------------------
0000            576            CSEG at 0x0000
0000 020100     577            ljmp    _crt0
002B            578            CSEG at 0x002b
002B 020100     579            ljmp    _Timer2_ISR
002E            580   ;--------------------------------------------------------
002E            581   ; global & static initialisations
002E            582   ;--------------------------------------------------------
0000            583            rseg R_HOME
0000            584            rseg R_GSINIT
0000            585            rseg R_GSINIT
0000            586   ;--------------------------------------------------------
0000            587   ; data variables initialization
0000            588   ;--------------------------------------------------------
0000            589            rseg R_DINIT
0000            590   ;        Tcom.h:10: volatile unsigned char pwm_count = 0;
0000 750800     591            mov     _pwm_count,#0x00
0003            592   ;        Tcom.h:11: volatile unsigned char duty_cycle0 = 0;
0003 75C800     593            mov     _duty_cycle0,#0x00
0006            594   ;        Tcom.h:12: volatile unsigned char duty_cycle1 = 0;
0006 758800     595            mov     _duty_cycle1,#0x00
0009            596   ;        Tcom.h:14: bit reload_flag = 0;
0009 C268       597            clr     _reload_flag
000B            598            ; The linker places a 'ret' at the end of segment R_DINIT.
000B            599   ;--------------------------------------------------------
000B            600   ; code
000B            601   ;--------------------------------------------------------
0000            602            rseg R_CSEG
0000            603   ;------------------------------------------------------------
0000            604   ;Allocation info for local variables in function 'Timer2_init'
0000            605   ;------------------------------------------------------------
0000            606   ;------------------------------------------------------------
0000            607   ;        Tcom.h:16: void Timer2_init(void) {
0000            608   ;        -----------------------------------------
0000            609   ;         function Timer2_init
0000            610   ;        -----------------------------------------
0000            611   _Timer2_init:
0000            612            using   0
0000            613   ;        Tcom.h:17: TMR2CN0=0b_0000_0000;   // Stop Timer2; Clear TF2; T2XCLK uses Sysclk/12
0000 75C800     614            mov     _TMR2CN0,#0x00
0003            615   ;        Tcom.h:18: CKCON0|=0b_0000_0000; // Timer 2 uses the system clock; Timer2 uses T2XCLK
0003 858E8E     616            mov     _CKCON0,_CKCON0
0006            617   ;        Tcom.h:19: TMR2RL=64936; //Initilizes reload value for 100hz;
0006 75CAA8     618            mov     _TMR2RL,#0xA8
0009 75CBFD     619            mov     (_TMR2RL >> 8),#0xFD
000C            620   ;        Tcom.h:20: TMR2=0xffff;   // Set to reload immediately
000C 75CEFF     621            mov     _TMR2,#0xFF
000F 75CFFF     622            mov     (_TMR2 >> 8),#0xFF
0012            623   ;        Tcom.h:21: ET2=1;         // Enable Timer2 interrupts
0012 D2AD       624            setb    _ET2
0014            625   ;        Tcom.h:22: TR2=1;         // Start Timer2 (TMR2CN is bit addressable)
0014 D2CA       626            setb    _TR2
0016 22         627            ret
0017            628   ;------------------------------------------------------------
0017            629   ;Allocation info for local variables in function 'Timer2_ISR'
0017            630   ;------------------------------------------------------------
0017            631   ;------------------------------------------------------------
0017            632   ;        Tcom.h:25: void Timer2_ISR (void) interrupt 5 {
0017            633   ;        -----------------------------------------
0017            634   ;         function Timer2_ISR
0017            635   ;        -----------------------------------------
0017            636   _Timer2_ISR:
0017 C0E0       637            push    acc
0019 C0D0       638            push    psw
001B 75D000     639            mov     psw,#0x00
001E            640   ;        Tcom.h:26: reload_flag = 1;
001E D268       641            setb    _reload_flag
0020            642   ;        Tcom.h:27: TF2H = 0; // Clear Timer2 interrupt flag
0020 C2CF       643            clr     _TF2H
0022            644   ;        Tcom.h:29: pwm_count++;
0022 0508       645            inc     _pwm_count
0024            646   ;        Tcom.h:30: if(pwm_count>100) pwm_count=0;
0024 E508       647            mov     a,_pwm_count
0026 249B       648            add     a,#0xff - 0x64
0028 5001       649            jnc     L003002?
002A 750800     650            mov     _pwm_count,#0x00
002D            651   L003002?:
002D            652   ;        Tcom.h:32: OUT0=pwm_count>duty_cycle0?0:1;
002D C3         653            clr     c
002E E5C8       654            mov     a,_duty_cycle0
0030 9508       655            subb    a,_pwm_count
0032 9298       656            mov  _Timer2_ISR_sloc0_1_0,c
0034 B3         657            cpl     c
0035 92A0       658            mov     _P2_0,c
0037            659   ;        Tcom.h:33: OUT1=pwm_count>duty_cycle1?0:1;
0037 C3         660            clr     c
0038 E588       661            mov     a,_duty_cycle1
003A 9508       662            subb    a,_pwm_count
003C 9298       663            mov  _Timer2_ISR_sloc0_1_0,c
003E B3         664            cpl     c
003F 9297       665            mov     _P1_7,c
0041            666   ;        Tcom.h:34: reload_flag = 0;
0041 C268       667            clr     _reload_flag
0043 D0D0       668            pop     psw
0045 D0E0       669            pop     acc
0047 32         670            reti
0048            671   ;        eliminated unneeded push/pop dpl
0048            672   ;        eliminated unneeded push/pop dph
0048            673   ;        eliminated unneeded push/pop b
0048            674   ;------------------------------------------------------------
0048            675   ;Allocation info for local variables in function 'setDutyCycle'
0048            676   ;------------------------------------------------------------
0048            677   ;op                        Allocated with name '_setDutyCycle_PARM_2'
0048            678   ;input                     Allocated to registers r2 r3 r4 
0048            679   ;duty                      Allocated with name '_setDutyCycle_duty_1_69'
0048            680   ;------------------------------------------------------------
0048            681   ;        Tcom.h:37: void setDutyCycle(char* input, unsigned char op) {
0048            682   ;        -----------------------------------------
0048            683   ;         function setDutyCycle
0048            684   ;        -----------------------------------------
0048            685   _setDutyCycle:
0048 AA82       686            mov     r2,dpl
004A AB83       687            mov     r3,dph
004C ACF0       688            mov     r4,b
004E            689   ;        Tcom.h:39: sscanf(input, "%*s %d", &duty);
004E 7418       690            mov     a,#_setDutyCycle_duty_1_69
0050 C0E0       691            push    acc
0052 74BB       692            mov     a,#(_setDutyCycle_duty_1_69 >> 8)
0054 C0E0       693            push    acc
0056 7440       694            mov     a,#0x40
0058 C0E0       695            push    acc
005A 7498       696            mov     a,#__str_0
005C C0E0       697            push    acc
005E 74BF       698            mov     a,#(__str_0 >> 8)
0060 C0E0       699            push    acc
0062 7480       700            mov     a,#0x80
0064 C0E0       701            push    acc
0066 C002       702            push    ar2
0068 C003       703            push    ar3
006A C004       704            push    ar4
006C 120100     705            lcall   _sscanf
006F E581       706            mov     a,sp
0071 24F7       707            add     a,#0xf7
0073 F581       708            mov     sp,a
0075            709   ;        Tcom.h:40: if (duty > 100)
0075 C3         710            clr     c
0076 7464       711            mov     a,#0x64
0078 9518       712            subb    a,_setDutyCycle_duty_1_69
007A E4         713            clr     a
007B 9519       714            subb    a,(_setDutyCycle_duty_1_69 + 1)
007D 5001       715            jnc     L004002?
007F            716   ;        Tcom.h:41: duty = 100;
007F 751864     717            mov     _setDutyCycle_duty_1_69,#0x64
0082 E4         718            clr     a
0083 F519       719            mov     (_setDutyCycle_duty_1_69 + 1),a
0085            720   L004002?:
0085            721   ;        Tcom.h:43: if (op == 0) {
0085 E548       722            mov     a,_setDutyCycle_PARM_2
0087            723   ;        Tcom.h:44: duty_cycle0 = (char)duty;
0087            724   ;        Tcom.h:45: printf("Duty Cycle 0 set to: %u\r\n", duty_cycle0);
0087 7001       725            jnz     L004006?
0089 8518C8     726            mov     _duty_cycle0,_setDutyCycle_duty_1_69
008C AAC8       727            mov     r2,_duty_cycle0
008E FB         728            mov     r3,a
008F C002       729            push    ar2
0091 C003       730            push    ar3
0093 74D8       731            mov     a,#__str_1
0095 C0E0       732            push    acc
0097 74C0       733            mov     a,#(__str_1 >> 8)
0099 C0E0       734            push    acc
009B 7480       735            mov     a,#0x80
009D C0E0       736            push    acc
009F 120100     737            lcall   _printf
00A2 E581       738            mov     a,sp
00A4 24FB       739            add     a,#0xfb
00A6 F581       740            mov     sp,a
00A8 22         741            ret
00A9            742   L004006?:
00A9            743   ;        Tcom.h:46: } else if (op == 1) {
00A9 7401       744            mov     a,#0x01
00AB B54858     745            cjne    a,_setDutyCycle_PARM_2,L004008?
00AE            746   ;        Tcom.h:47: duty_cycle1 = (char)duty;
00AE 851888     747            mov     _duty_cycle1,_setDutyCycle_duty_1_69
00B1            748   ;        Tcom.h:48: printf("Duty Cycle 1 set to: %u\r\n", duty_cycle1);
00B1 AA88       749            mov     r2,_duty_cycle1
00B3 7B00       750            mov     r3,#0x00
00B5 C002       751            push    ar2
00B7 C003       752            push    ar3
00B9 7498       753            mov     a,#__str_2
00BB C0E0       754            push    acc
00BD 74C1       755            mov     a,#(__str_2 >> 8)
00BF C0E0       756            push    acc
00C1 7480       757            mov     a,#0x80
00C3 C0E0       758            push    acc
00C5 120100     759            lcall   _printf
00C8 E581       760            mov     a,sp
00CA 24FB       761            add     a,#0xfb
00CC F581       762            mov     sp,a
00CE            763   L004008?:
00CE 22         764            ret
00CF            765   ;------------------------------------------------------------
00CF            766   ;Allocation info for local variables in function 'frequencyToReload'
00CF            767   ;------------------------------------------------------------
00CF            768   ;freq                      Allocated to registers r2 r3 
00CF            769   ;------------------------------------------------------------
00CF            770   ;        Tcom.h:52: unsigned int frequencyToReload(unsigned int freq) {
00CF            771   ;        -----------------------------------------
00CF            772   ;         function frequencyToReload
00CF            773   ;        -----------------------------------------
00CF            774   _frequencyToReload:
00CF AA82       775            mov     r2,dpl
00D1 AB83       776            mov     r3,dph
00D3            777   ;        Tcom.h:53: return 65536 - (60000/(freq));
00D3 8A00       778            mov     __divslong_PARM_2,r2
00D5 8B01       779            mov     (__divslong_PARM_2 + 1),r3
00D7 750200     780            mov     (__divslong_PARM_2 + 2),#0x00
00DA 750300     781            mov     (__divslong_PARM_2 + 3),#0x00
00DD 90EA60     782            mov     dptr,#0xEA60
00E0 E4         783            clr     a
00E1 F5F0       784            mov     b,a
00E3 120100     785            lcall   __divslong
00E6 AA82       786            mov     r2,dpl
00E8 AB83       787            mov     r3,dph
00EA ACF0       788            mov     r4,b
00EC FD         789            mov     r5,a
00ED E4         790            clr     a
00EE C3         791            clr     c
00EF 9A         792            subb    a,r2
00F0 FA         793            mov     r2,a
00F1 E4         794            clr     a
00F2 9B         795            subb    a,r3
00F3 FB         796            mov     r3,a
00F4 7401       797            mov     a,#0x01
00F6 9C         798            subb    a,r4
00F7 E4         799            clr     a
00F8 9D         800            subb    a,r5
00F9 8A82       801            mov     dpl,r2
00FB 8B83       802            mov     dph,r3
00FD 22         803            ret
00FE            804   ;------------------------------------------------------------
00FE            805   ;Allocation info for local variables in function 'reloadToFrequency'
00FE            806   ;------------------------------------------------------------
00FE            807   ;reload                    Allocated to registers r2 r3 
00FE            808   ;------------------------------------------------------------
00FE            809   ;        Tcom.h:56: unsigned int reloadToFrequency(unsigned int reload) {
00FE            810   ;        -----------------------------------------
00FE            811   ;         function reloadToFrequency
00FE            812   ;        -----------------------------------------
00FE            813   _reloadToFrequency:
00FE AA82       814            mov     r2,dpl
0100 AB83       815            mov     r3,dph
0102            816   ;        Tcom.h:57: return ((SYSCLK/12)/(65536 - reload))/100;
0102 7C00       817            mov     r4,#0x00
0104 E4         818            clr     a
0105 FD         819            mov     r5,a
0106 C3         820            clr     c
0107 9A         821            subb    a,r2
0108 F500       822            mov     __divslong_PARM_2,a
010A E4         823            clr     a
010B 9B         824            subb    a,r3
010C F501       825            mov     (__divslong_PARM_2 + 1),a
010E 7401       826            mov     a,#0x01
0110 9C         827            subb    a,r4
0111 F502       828            mov     (__divslong_PARM_2 + 2),a
0113 E4         829            clr     a
0114 9D         830            subb    a,r5
0115 F503       831            mov     (__divslong_PARM_2 + 3),a
0117 908D80     832            mov     dptr,#0x8D80
011A 75F05B     833            mov     b,#0x5B
011D E4         834            clr     a
011E 120100     835            lcall   __divslong
0121 AA82       836            mov     r2,dpl
0123 AB83       837            mov     r3,dph
0125 ACF0       838            mov     r4,b
0127 FD         839            mov     r5,a
0128 750064     840            mov     __divslong_PARM_2,#0x64
012B E4         841            clr     a
012C F501       842            mov     (__divslong_PARM_2 + 1),a
012E F502       843            mov     (__divslong_PARM_2 + 2),a
0130 F503       844            mov     (__divslong_PARM_2 + 3),a
0132 8A82       845            mov     dpl,r2
0134 8B83       846            mov     dph,r3
0136 8CF0       847            mov     b,r4
0138 ED         848            mov     a,r5
0139 020100     849            ljmp    __divslong
013C            850   ;------------------------------------------------------------
013C            851   ;Allocation info for local variables in function 'setFrequency'
013C            852   ;------------------------------------------------------------
013C            853   ;input                     Allocated to registers r2 r3 r4 
013C            854   ;frequency                 Allocated with name '_setFrequency_frequency_1_77'
013C            855   ;------------------------------------------------------------
013C            856   ;        Tcom.h:60: void setFrequency(char* input) {
013C            857   ;        -----------------------------------------
013C            858   ;         function setFrequency
013C            859   ;        -----------------------------------------
013C            860   _setFrequency:
013C AA82       861            mov     r2,dpl
013E AB83       862            mov     r3,dph
0140 ACF0       863            mov     r4,b
0142            864   ;        Tcom.h:62: sscanf(input, "%*s %u", &frequency);
0142 7468       865            mov     a,#_setFrequency_frequency_1_77
0144 C0E0       866            push    acc
0146 74BB       867            mov     a,#(_setFrequency_frequency_1_77 >> 8)
0148 C0E0       868            push    acc
014A 7440       869            mov     a,#0x40
014C C0E0       870            push    acc
014E 7468       871            mov     a,#__str_3
0150 C0E0       872            push    acc
0152 74C2       873            mov     a,#(__str_3 >> 8)
0154 C0E0       874            push    acc
0156 7480       875            mov     a,#0x80
0158 C0E0       876            push    acc
015A C002       877            push    ar2
015C C003       878            push    ar3
015E C004       879            push    ar4
0160 120100     880            lcall   _sscanf
0163 E581       881            mov     a,sp
0165 24F7       882            add     a,#0xf7
0167 F581       883            mov     sp,a
0169            884   ;        Tcom.h:63: while(reload_flag != 0);
0169            885   L007001?:
0169 2068A8     886            jb      _reload_flag,L007001?
016C            887   ;        Tcom.h:64: TMR2RL = frequencyToReload(frequency);
016C 856882     888            mov     dpl,_setFrequency_frequency_1_77
016F 856983     889            mov     dph,(_setFrequency_frequency_1_77 + 1)
0172 120100     890            lcall   _frequencyToReload
0175 8582CA     891            mov     _TMR2RL,dpl
0178 8583CB     892            mov     (_TMR2RL >> 8),dph
017B 22         893            ret
017C            894   ;------------------------------------------------------------
017C            895   ;Allocation info for local variables in function 'setReload'
017C            896   ;------------------------------------------------------------
017C            897   ;input                     Allocated to registers r2 r3 r4 
017C            898   ;reload                    Allocated with name '_setReload_reload_1_79'
017C            899   ;------------------------------------------------------------
017C            900   ;        Tcom.h:67: void setReload(char* input) {
017C            901   ;        -----------------------------------------
017C            902   ;         function setReload
017C            903   ;        -----------------------------------------
017C            904   _setReload:
017C AA82       905            mov     r2,dpl
017E AB83       906            mov     r3,dph
0180 ACF0       907            mov     r4,b
0182            908   ;        Tcom.h:69: sscanf(input, "%*s %u", &reload);
0182 74B8       909            mov     a,#_setReload_reload_1_79
0184 C0E0       910            push    acc
0186 74BB       911            mov     a,#(_setReload_reload_1_79 >> 8)
0188 C0E0       912            push    acc
018A 7440       913            mov     a,#0x40
018C C0E0       914            push    acc
018E 7468       915            mov     a,#__str_3
0190 C0E0       916            push    acc
0192 74C2       917            mov     a,#(__str_3 >> 8)
0194 C0E0       918            push    acc
0196 7480       919            mov     a,#0x80
0198 C0E0       920            push    acc
019A C002       921            push    ar2
019C C003       922            push    ar3
019E C004       923            push    ar4
01A0 120100     924            lcall   _sscanf
01A3 E581       925            mov     a,sp
01A5 24F7       926            add     a,#0xf7
01A7 F581       927            mov     sp,a
01A9            928   ;        Tcom.h:70: while(reload_flag != 0);
01A9            929   L008001?:
01A9 2068E8     930            jb      _reload_flag,L008001?
01AC            931   ;        Tcom.h:71: TMR2RL = reload;
01AC 85B8CA     932            mov     _TMR2RL,_setReload_reload_1_79
01AF 85B9CB     933            mov     (_TMR2RL >> 8),(_setReload_reload_1_79 + 1)
01B2 22         934            ret
01B3            935   ;------------------------------------------------------------
01B3            936   ;Allocation info for local variables in function 'setRotation'
01B3            937   ;------------------------------------------------------------
01B3            938   ;input                     Allocated to registers r2 r3 r4 
01B3            939   ;duty                      Allocated with name '_setRotation_duty_1_81'
01B3            940   ;------------------------------------------------------------
01B3            941   ;        Tcom.h:74: void setRotation(char* input) {
01B3            942   ;        -----------------------------------------
01B3            943   ;         function setRotation
01B3            944   ;        -----------------------------------------
01B3            945   _setRotation:
01B3 AA82       946            mov     r2,dpl
01B5 AB83       947            mov     r3,dph
01B7 ACF0       948            mov     r4,b
01B9            949   ;        Tcom.h:76: sscanf(input, "%*s %u", &duty); 
01B9 C002       950            push    ar2
01BB C003       951            push    ar3
01BD C004       952            push    ar4
01BF 7408       953            mov     a,#_setRotation_duty_1_81
01C1 C0E0       954            push    acc
01C3 74BC       955            mov     a,#(_setRotation_duty_1_81 >> 8)
01C5 C0E0       956            push    acc
01C7 7440       957            mov     a,#0x40
01C9 C0E0       958            push    acc
01CB 7468       959            mov     a,#__str_3
01CD C0E0       960            push    acc
01CF 74C2       961            mov     a,#(__str_3 >> 8)
01D1 C0E0       962            push    acc
01D3 7480       963            mov     a,#0x80
01D5 C0E0       964            push    acc
01D7 C002       965            push    ar2
01D9 C003       966            push    ar3
01DB C004       967            push    ar4
01DD 120100     968            lcall   _sscanf
01E0 E581       969            mov     a,sp
01E2 24F7       970            add     a,#0xf7
01E4 F581       971            mov     sp,a
01E6 D004       972            pop     ar4
01E8 D003       973            pop     ar3
01EA D002       974            pop     ar2
01EC            975   ;        Tcom.h:78: if (input[2] == 'w') {
01EC 7402       976            mov     a,#0x02
01EE 2A         977            add     a,r2
01EF FA         978            mov     r2,a
01F0 E4         979            clr     a
01F1 3B         980            addc    a,r3
01F2 FB         981            mov     r3,a
01F3 8A82       982            mov     dpl,r2
01F5 8B83       983            mov     dph,r3
01F7 8CF0       984            mov     b,r4
01F9 120100     985            lcall   __gptrget
01FC FA         986            mov     r2,a
01FD BA7768     987            cjne    r2,#0x77,L009005?
0200            988   ;        Tcom.h:79: duty_cycle0 = (char)duty;
0200 8508C8     989            mov     _duty_cycle0,_setRotation_duty_1_81
0203            990   ;        Tcom.h:80: duty_cycle1 = 0;
0203 758800     991            mov     _duty_cycle1,#0x00
0206 22         992            ret
0207            993   L009005?:
0207            994   ;        Tcom.h:81: }else if(input[2] == 'c') {
0207 BA63A8     995            cjne    r2,#0x63,L009002?
020A            996   ;        Tcom.h:82: duty_cycle1 = (char)duty;
020A 850888     997            mov     _duty_cycle1,_setRotation_duty_1_81
020D            998   ;        Tcom.h:83: duty_cycle0 = 0;
020D 75C800     999            mov     _duty_cycle0,#0x00
0210 22        1000            ret
0211           1001   L009002?:
0211           1002   ;        Tcom.h:85: printf("Invalid direction. Use -cw or -ccw\r\n");
0211 74E8      1003            mov     a,#__str_4
0213 C0E0      1004            push    acc
0215 74C3      1005            mov     a,#(__str_4 >> 8)
0217 C0E0      1006            push    acc
0219 7480      1007            mov     a,#0x80
021B C0E0      1008            push    acc
021D 120100    1009            lcall   _printf
0220 1581      1010            dec     sp
0222 1581      1011            dec     sp
0224 1581      1012            dec     sp
0226 22        1013            ret
0227           1014   ;------------------------------------------------------------
0227           1015   ;Allocation info for local variables in function 'PWMoff'
0227           1016   ;------------------------------------------------------------
0227           1017   ;------------------------------------------------------------
0227           1018   ;        Tcom.h:89: void PWMoff() {
0227           1019   ;        -----------------------------------------
0227           1020   ;         function PWMoff
0227           1021   ;        -----------------------------------------
0227           1022   _PWMoff:
0227           1023   ;        Tcom.h:90: OUT0 = 0;
0227 C2A0      1024            clr     _P2_0
0229           1025   ;        Tcom.h:91: OUT1 = 0;
0229 C297      1026            clr     _P1_7
022B           1027   ;        Tcom.h:92: TR2 = 0;
022B C2CA      1028            clr     _TR2
022D 22        1029            ret
022E           1030   ;------------------------------------------------------------
022E           1031   ;Allocation info for local variables in function 'PWMon'
022E           1032   ;------------------------------------------------------------
022E           1033   ;------------------------------------------------------------
022E           1034   ;        Tcom.h:95: void PWMon() {
022E           1035   ;        -----------------------------------------
022E           1036   ;         function PWMon
022E           1037   ;        -----------------------------------------
022E           1038   _PWMon:
022E           1039   ;        Tcom.h:96: TR2 = 1;
022E D2CA      1040            setb    _TR2
0230 22        1041            ret
0231           1042   ;------------------------------------------------------------
0231           1043   ;Allocation info for local variables in function 'getCommand'
0231           1044   ;------------------------------------------------------------
0231           1045   ;input                     Allocated to registers r2 r3 r4 
0231           1046   ;sloc0                     Allocated with name '_getCommand_sloc0_1_0'
0231           1047   ;------------------------------------------------------------
0231           1048   ;        Tcom.h:99: void getCommand(char* input) {
0231           1049   ;        -----------------------------------------
0231           1050   ;         function getCommand
0231           1051   ;        -----------------------------------------
0231           1052   _getCommand:
0231           1053   ;        Tcom.h:101: if (input[0] == '-') {
0231 AA82      1054            mov     r2,dpl
0233 AB83      1055            mov     r3,dph
0235 ACF0      1056            mov     r4,b
0237 120100    1057            lcall   __gptrget
023A FD        1058            mov     r5,a
023B BD2D28    1059            cjne    r5,#0x2D,L012038?
023E 8001      1060            sjmp    L012039?
0240           1061   L012038?:
0240 020100    1062            ljmp    L012021?
0243           1063   L012039?:
0243           1064   ;        Tcom.h:102: switch(input[1]) {
0243 7401      1065            mov     a,#0x01
0245 2A        1066            add     a,r2
0246 FD        1067            mov     r5,a
0247 E4        1068            clr     a
0248 3B        1069            addc    a,r3
0249 FE        1070            mov     r6,a
024A 8C07      1071            mov     ar7,r4
024C 8D82      1072            mov     dpl,r5
024E 8E83      1073            mov     dph,r6
0250 8FF0      1074            mov     b,r7
0252 120100    1075            lcall   __gptrget
0255 FD        1076            mov     r5,a
0256 BD63E8    1077            cjne    r5,#0x63,L012040?
0259 8001      1078            sjmp    L012001?
025B           1079   L012040?:
025B BD6468    1080            cjne    r5,#0x64,L012041?
025E 8001      1081            sjmp    L012002?
0260           1082   L012041?:
0260 BD66E8    1083            cjne    r5,#0x66,L012042?
0263 8001      1084            sjmp    L012008?
0265           1085   L012042?:
0265 BD6868    1086            cjne    r5,#0x68,L012043?
0268 8001      1087            sjmp    L012009?
026A           1088   L012043?:
026A BD69E8    1089            cjne    r5,#0x69,L012044?
026D 8001      1090            sjmp    L012010?
026F           1091   L012044?:
026F BD6F68    1092            cjne    r5,#0x6F,L012045?
0272 020100    1093            ljmp    L012015?
0275           1094   L012045?:
0275 BD72E8    1095            cjne    r5,#0x72,L012046?
0278 020100    1096            ljmp    L012011?
027B           1097   L012046?:
027B BD7368    1098            cjne    r5,#0x73,L012047?
027E 020100    1099            ljmp    L012012?
0281           1100   L012047?:
0281 020100    1101            ljmp    L012018?
0284           1102   ;        Tcom.h:103: case 'c':
0284           1103   L012001?:
0284           1104   ;        Tcom.h:104: setRotation(input);
0284 8A82      1105            mov     dpl,r2
0286 8B83      1106            mov     dph,r3
0288 8CF0      1107            mov     b,r4
028A           1108   ;        Tcom.h:105: break;
028A 020100    1109            ljmp    _setRotation
028D           1110   ;        Tcom.h:106: case 'd':
028D           1111   L012002?:
028D           1112   ;        Tcom.h:107: if (input[2] == '0') {
028D 7402      1113            mov     a,#0x02
028F 2A        1114            add     a,r2
0290 FD        1115            mov     r5,a
0291 E4        1116            clr     a
0292 3B        1117            addc    a,r3
0293 FE        1118            mov     r6,a
0294 8C07      1119            mov     ar7,r4
0296 8D82      1120            mov     dpl,r5
0298 8E83      1121            mov     dph,r6
029A 8FF0      1122            mov     b,r7
029C 120100    1123            lcall   __gptrget
029F FD        1124            mov     r5,a
02A0 BD3028    1125            cjne    r5,#0x30,L012006?
02A3           1126   ;        Tcom.h:108: setDutyCycle(input, 0);
02A3 754800    1127            mov     _setDutyCycle_PARM_2,#0x00
02A6 8A82      1128            mov     dpl,r2
02A8 8B83      1129            mov     dph,r3
02AA 8CF0      1130            mov     b,r4
02AC           1131   ;        Tcom.h:109: break;
02AC 020100    1132            ljmp    _setDutyCycle
02AF           1133   L012006?:
02AF           1134   ;        Tcom.h:110: } else if (input[2] == '1') {
02AF BD3128    1135            cjne    r5,#0x31,L012008?
02B2           1136   ;        Tcom.h:111: setDutyCycle(input, 1);
02B2 754801    1137            mov     _setDutyCycle_PARM_2,#0x01
02B5 8A82      1138            mov     dpl,r2
02B7 8B83      1139            mov     dph,r3
02B9 8CF0      1140            mov     b,r4
02BB           1141   ;        Tcom.h:112: break;
02BB 020100    1142            ljmp    _setDutyCycle
02BE           1143   ;        Tcom.h:114: case 'f':
02BE           1144   L012008?:
02BE           1145   ;        Tcom.h:115: setFrequency(input);
02BE 8A82      1146            mov     dpl,r2
02C0 8B83      1147            mov     dph,r3
02C2 8CF0      1148            mov     b,r4
02C4           1149   ;        Tcom.h:116: break;
02C4 020100    1150            ljmp    _setFrequency
02C7           1151   ;        Tcom.h:117: case 'h':
02C7           1152   L012009?:
02C7           1153   ;        Tcom.h:118: printf("Help Menu\r\nList of Commands: \r\n-cw [duty value]\r\n-ccw [duty value]\r\n-d0 [duty value]\r\n-d1 [duty value]\r\n-f [freq value]\r\n-r [reload value]\r\n-o\r\n-s\r\n-i\r\n\n");
02C7 7468      1154            mov     a,#__str_5
02C9 C0E0      1155            push    acc
02CB 74C9      1156            mov     a,#(__str_5 >> 8)
02CD C0E0      1157            push    acc
02CF 7480      1158            mov     a,#0x80
02D1 C0E0      1159            push    acc
02D3 120100    1160            lcall   _printf
02D6 1581      1161            dec     sp
02D8 1581      1162            dec     sp
02DA 1581      1163            dec     sp
02DC           1164   ;        Tcom.h:119: break;
02DC 22        1165            ret
02DD           1166   ;        Tcom.h:120: case 'i':
02DD           1167   L012010?:
02DD           1168   ;        Tcom.h:121: printf("Reload: %u, Freq: %d, duty0: %d, duty1: %d\r\n", TMR2RL, reloadToFrequency(TMR2RL), duty_cycle0, duty_cycle1);
02DD AD88      1169            mov     r5,_duty_cycle1
02DF 7E00      1170            mov     r6,#0x00
02E1 85C858    1171            mov     _getCommand_sloc0_1_0,_duty_cycle0
02E4 755900    1172            mov     (_getCommand_sloc0_1_0 + 1),#0x00
02E7 85CA82    1173            mov     dpl,_TMR2RL
02EA 85CB83    1174            mov     dph,(_TMR2RL >> 8)
02ED C005      1175            push    ar5
02EF C006      1176            push    ar6
02F1 120100    1177            lcall   _reloadToFrequency
02F4 A982      1178            mov     r1,dpl
02F6 AF83      1179            mov     r7,dph
02F8 C058      1180            push    _getCommand_sloc0_1_0
02FA C059      1181            push    (_getCommand_sloc0_1_0 + 1)
02FC C001      1182            push    ar1
02FE C007      1183            push    ar7
0300 C0CA      1184            push    _TMR2RL
0302 C0CB      1185            push    (_TMR2RL >> 8)
0304 74A8      1186            mov     a,#__str_6
0306 C0E0      1187            push    acc
0308 74C9      1188            mov     a,#(__str_6 >> 8)
030A C0E0      1189            push    acc
030C 7480      1190            mov     a,#0x80
030E C0E0      1191            push    acc
0310 120100    1192            lcall   _printf
0313 E581      1193            mov     a,sp
0315 24F5      1194            add     a,#0xf5
0317 F581      1195            mov     sp,a
0319           1196   ;        Tcom.h:122: break;
0319           1197   ;        Tcom.h:123: case 'r':
0319 22        1198            ret
031A           1199   L012011?:
031A           1200   ;        Tcom.h:124: setReload(input);
031A 8A82      1201            mov     dpl,r2
031C 8B83      1202            mov     dph,r3
031E 8CF0      1203            mov     b,r4
0320           1204   ;        Tcom.h:125: break;
0320           1205   ;        Tcom.h:126: case 's':
0320 020100    1206            ljmp    _setReload
0323           1207   L012012?:
0323           1208   ;        Tcom.h:127: if (input[2] == 0)
0323 7402      1209            mov     a,#0x02
0325 2A        1210            add     a,r2
0326 FD        1211            mov     r5,a
0327 E4        1212            clr     a
0328 3B        1213            addc    a,r3
0329 FE        1214            mov     r6,a
032A 8C07      1215            mov     ar7,r4
032C 8D82      1216            mov     dpl,r5
032E 8E83      1217            mov     dph,r6
0330 8FF0      1218            mov     b,r7
0332 120100    1219            lcall   __gptrget
0335 7001      1220            jnz     L012022?
0337           1221   ;        Tcom.h:128: PWMon();
0337           1222   ;        Tcom.h:129: break;
0337           1223   ;        Tcom.h:130: case 'o':
0337 020100    1224            ljmp    _PWMon
033A           1225   L012015?:
033A           1226   ;        Tcom.h:131: if (input[2] == 0)
033A 7402      1227            mov     a,#0x02
033C 2A        1228            add     a,r2
033D FD        1229            mov     r5,a
033E E4        1230            clr     a
033F 3B        1231            addc    a,r3
0340 FE        1232            mov     r6,a
0341 8C07      1233            mov     ar7,r4
0343 8D82      1234            mov     dpl,r5
0345 8E83      1235            mov     dph,r6
0347 8FF0      1236            mov     b,r7
0349 120100    1237            lcall   __gptrget
034C 7001      1238            jnz     L012022?
034E           1239   ;        Tcom.h:132: PWMoff();
034E           1240   ;        Tcom.h:133: break;
034E           1241   ;        Tcom.h:134: default:-
034E 020100    1242            ljmp    _PWMoff
0351           1243   L012018?:
0351           1244   ;        Tcom.h:135: printf("\"%s\" invalid command\r\n", input);
0351 C002      1245            push    ar2
0353 C003      1246            push    ar3
0355 C004      1247            push    ar4
0357 7428      1248            mov     a,#__str_7
0359 C0E0      1249            push    acc
035B 74CA      1250            mov     a,#(__str_7 >> 8)
035D C0E0      1251            push    acc
035F 7480      1252            mov     a,#0x80
0361 C0E0      1253            push    acc
0363 120100    1254            lcall   _printf
0366 E581      1255            mov     a,sp
0368 24FA      1256            add     a,#0xfa
036A F581      1257            mov     sp,a
036C           1258   ;        Tcom.h:137: }
036C 22        1259            ret
036D           1260   L012021?:
036D           1261   ;        Tcom.h:139: printf("Not Valid input\r\n");
036D 7468      1262            mov     a,#__str_8
036F C0E0      1263            push    acc
0371 74CA      1264            mov     a,#(__str_8 >> 8)
0373 C0E0      1265            push    acc
0375 7480      1266            mov     a,#0x80
0377 C0E0      1267            push    acc
0379 120100    1268            lcall   _printf
037C 1581      1269            dec     sp
037E 1581      1270            dec     sp
0380 1581      1271            dec     sp
0382           1272   L012022?:
0382           1273   ;        Tcom.h:141: return;
0382 22        1274            ret
0383           1275   ;------------------------------------------------------------
0383           1276   ;Allocation info for local variables in function 'Timer3us'
0383           1277   ;------------------------------------------------------------
0383           1278   ;us                        Allocated to registers r2 
0383           1279   ;i                         Allocated to registers r3 
0383           1280   ;------------------------------------------------------------
0383           1281   ;        EFM8LCDlib.h:14: void Timer3us(unsigned char us)
0383           1282   ;        -----------------------------------------
0383           1283   ;         function Timer3us
0383           1284   ;        -----------------------------------------
0383           1285   _Timer3us:
0383 AA82      1286            mov     r2,dpl
0385           1287   ;        EFM8LCDlib.h:19: CKCON0|=0b_0100_0000;
0385 438E40    1288            orl     _CKCON0,#0x40
0388           1289   ;        EFM8LCDlib.h:21: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0388 7592B8    1290            mov     _TMR3RL,#0xB8
038B 7593FF    1291            mov     (_TMR3RL >> 8),#0xFF
038E           1292   ;        EFM8LCDlib.h:22: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
038E 859294    1293            mov     _TMR3,_TMR3RL
0391 859395    1294            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0394           1295   ;        EFM8LCDlib.h:24: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0394 759104    1296            mov     _TMR3CN0,#0x04
0397           1297   ;        EFM8LCDlib.h:25: for (i = 0; i < us; i++)       // Count <us> overflows
0397 7B00      1298            mov     r3,#0x00
0399           1299   L013004?:
0399 C3        1300            clr     c
039A EB        1301            mov     a,r3
039B 9A        1302            subb    a,r2
039C 5001      1303            jnc     L013007?
039E           1304   ;        EFM8LCDlib.h:27: while (!(TMR3CN0 & 0x80));  // Wait for overflow
039E           1305   L013001?:
039E E591      1306            mov     a,_TMR3CN0
03A0 30E728    1307            jnb     acc.7,L013001?
03A3           1308   ;        EFM8LCDlib.h:28: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
03A3 53917F    1309            anl     _TMR3CN0,#0x7F
03A6           1310   ;        EFM8LCDlib.h:25: for (i = 0; i < us; i++)       // Count <us> overflows
03A6 0B        1311            inc     r3
03A7 8001      1312            sjmp    L013004?
03A9           1313   L013007?:
03A9           1314   ;        EFM8LCDlib.h:30: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
03A9 759100    1315            mov     _TMR3CN0,#0x00
03AC 22        1316            ret
03AD           1317   ;------------------------------------------------------------
03AD           1318   ;Allocation info for local variables in function 'waitms'
03AD           1319   ;------------------------------------------------------------
03AD           1320   ;ms                        Allocated to registers r2 r3 
03AD           1321   ;j                         Allocated to registers r4 r5 
03AD           1322   ;k                         Allocated to registers r6 
03AD           1323   ;------------------------------------------------------------
03AD           1324   ;        EFM8LCDlib.h:33: void waitms (unsigned int ms)
03AD           1325   ;        -----------------------------------------
03AD           1326   ;         function waitms
03AD           1327   ;        -----------------------------------------
03AD           1328   _waitms:
03AD AA82      1329            mov     r2,dpl
03AF AB83      1330            mov     r3,dph
03B1           1331   ;        EFM8LCDlib.h:37: for(j=0; j<ms; j++)
03B1 7C00      1332            mov     r4,#0x00
03B3 7D00      1333            mov     r5,#0x00
03B5           1334   L014005?:
03B5 C3        1335            clr     c
03B6 EC        1336            mov     a,r4
03B7 9A        1337            subb    a,r2
03B8 ED        1338            mov     a,r5
03B9 9B        1339            subb    a,r3
03BA 5001      1340            jnc     L014009?
03BC           1341   ;        EFM8LCDlib.h:38: for (k=0; k<4; k++) Timer3us(250);
03BC 7E00      1342            mov     r6,#0x00
03BE           1343   L014001?:
03BE BE0428    1344            cjne    r6,#0x04,L014018?
03C1           1345   L014018?:
03C1 5001      1346            jnc     L014007?
03C3 7582FA    1347            mov     dpl,#0xFA
03C6 C002      1348            push    ar2
03C8 C003      1349            push    ar3
03CA C004      1350            push    ar4
03CC C005      1351            push    ar5
03CE C006      1352            push    ar6
03D0 120100    1353            lcall   _Timer3us
03D3 D006      1354            pop     ar6
03D5 D005      1355            pop     ar5
03D7 D004      1356            pop     ar4
03D9 D003      1357            pop     ar3
03DB D002      1358            pop     ar2
03DD 0E        1359            inc     r6
03DE 8001      1360            sjmp    L014001?
03E0           1361   L014007?:
03E0           1362   ;        EFM8LCDlib.h:37: for(j=0; j<ms; j++)
03E0 0C        1363            inc     r4
03E1 BC0068    1364            cjne    r4,#0x00,L014005?
03E4 0D        1365            inc     r5
03E5 8001      1366            sjmp    L014005?
03E7           1367   L014009?:
03E7 22        1368            ret
03E8           1369   ;------------------------------------------------------------
03E8           1370   ;Allocation info for local variables in function 'LCD_pulse'
03E8           1371   ;------------------------------------------------------------
03E8           1372   ;------------------------------------------------------------
03E8           1373   ;        EFM8LCDlib.h:41: void LCD_pulse (void)
03E8           1374   ;        -----------------------------------------
03E8           1375   ;         function LCD_pulse
03E8           1376   ;        -----------------------------------------
03E8           1377   _LCD_pulse:
03E8           1378   ;        EFM8LCDlib.h:43: LCD_E=1;
03E8 D2A5      1379            setb    _P2_5
03EA           1380   ;        EFM8LCDlib.h:44: Timer3us(40);
03EA 758228    1381            mov     dpl,#0x28
03ED 120100    1382            lcall   _Timer3us
03F0           1383   ;        EFM8LCDlib.h:45: LCD_E=0;
03F0 C2A5      1384            clr     _P2_5
03F2 22        1385            ret
03F3           1386   ;------------------------------------------------------------
03F3           1387   ;Allocation info for local variables in function 'LCD_byte'
03F3           1388   ;------------------------------------------------------------
03F3           1389   ;x                         Allocated to registers r2 
03F3           1390   ;------------------------------------------------------------
03F3           1391   ;        EFM8LCDlib.h:48: void LCD_byte (unsigned char x)
03F3           1392   ;        -----------------------------------------
03F3           1393   ;         function LCD_byte
03F3           1394   ;        -----------------------------------------
03F3           1395   _LCD_byte:
03F3 AA82      1396            mov     r2,dpl
03F5           1397   ;        EFM8LCDlib.h:51: ACC=x; //Send high nible
03F5 8AE0      1398            mov     _ACC,r2
03F7           1399   ;        EFM8LCDlib.h:52: LCD_D7=ACC_7;
03F7 A2E7      1400            mov     c,_ACC_7
03F9 92A1      1401            mov     _P2_1,c
03FB           1402   ;        EFM8LCDlib.h:53: LCD_D6=ACC_6;
03FB A2E6      1403            mov     c,_ACC_6
03FD 92A2      1404            mov     _P2_2,c
03FF           1405   ;        EFM8LCDlib.h:54: LCD_D5=ACC_5;
03FF A2E5      1406            mov     c,_ACC_5
0401 92A3      1407            mov     _P2_3,c
0403           1408   ;        EFM8LCDlib.h:55: LCD_D4=ACC_4;
0403 A2E4      1409            mov     c,_ACC_4
0405 92A4      1410            mov     _P2_4,c
0407           1411   ;        EFM8LCDlib.h:56: LCD_pulse();
0407 C002      1412            push    ar2
0409 120100    1413            lcall   _LCD_pulse
040C           1414   ;        EFM8LCDlib.h:57: Timer3us(40);
040C 758228    1415            mov     dpl,#0x28
040F 120100    1416            lcall   _Timer3us
0412 D002      1417            pop     ar2
0414           1418   ;        EFM8LCDlib.h:58: ACC=x; //Send low nible
0414 8AE0      1419            mov     _ACC,r2
0416           1420   ;        EFM8LCDlib.h:59: LCD_D7=ACC_3;
0416 A2E3      1421            mov     c,_ACC_3
0418 92A1      1422            mov     _P2_1,c
041A           1423   ;        EFM8LCDlib.h:60: LCD_D6=ACC_2;
041A A2E2      1424            mov     c,_ACC_2
041C 92A2      1425            mov     _P2_2,c
041E           1426   ;        EFM8LCDlib.h:61: LCD_D5=ACC_1;
041E A2E1      1427            mov     c,_ACC_1
0420 92A3      1428            mov     _P2_3,c
0422           1429   ;        EFM8LCDlib.h:62: LCD_D4=ACC_0;
0422 A2E0      1430            mov     c,_ACC_0
0424 92A4      1431            mov     _P2_4,c
0426           1432   ;        EFM8LCDlib.h:63: LCD_pulse();
0426 020100    1433            ljmp    _LCD_pulse
0429           1434   ;------------------------------------------------------------
0429           1435   ;Allocation info for local variables in function 'WriteData'
0429           1436   ;------------------------------------------------------------
0429           1437   ;x                         Allocated to registers r2 
0429           1438   ;------------------------------------------------------------
0429           1439   ;        EFM8LCDlib.h:66: void WriteData (unsigned char x)
0429           1440   ;        -----------------------------------------
0429           1441   ;         function WriteData
0429           1442   ;        -----------------------------------------
0429           1443   _WriteData:
0429 AA82      1444            mov     r2,dpl
042B           1445   ;        EFM8LCDlib.h:68: LCD_RS=1;
042B D2A6      1446            setb    _P2_6
042D           1447   ;        EFM8LCDlib.h:69: LCD_byte(x);
042D 8A82      1448            mov     dpl,r2
042F 120100    1449            lcall   _LCD_byte
0432           1450   ;        EFM8LCDlib.h:70: waitms(2);
0432 900002    1451            mov     dptr,#0x0002
0435 020100    1452            ljmp    _waitms
0438           1453   ;------------------------------------------------------------
0438           1454   ;Allocation info for local variables in function 'WriteCommand'
0438           1455   ;------------------------------------------------------------
0438           1456   ;x                         Allocated to registers r2 
0438           1457   ;------------------------------------------------------------
0438           1458   ;        EFM8LCDlib.h:73: void WriteCommand (unsigned char x)
0438           1459   ;        -----------------------------------------
0438           1460   ;         function WriteCommand
0438           1461   ;        -----------------------------------------
0438           1462   _WriteCommand:
0438 AA82      1463            mov     r2,dpl
043A           1464   ;        EFM8LCDlib.h:75: LCD_RS=0;
043A C2A6      1465            clr     _P2_6
043C           1466   ;        EFM8LCDlib.h:76: LCD_byte(x);
043C 8A82      1467            mov     dpl,r2
043E 120100    1468            lcall   _LCD_byte
0441           1469   ;        EFM8LCDlib.h:77: waitms(5);
0441 900005    1470            mov     dptr,#0x0005
0444 020100    1471            ljmp    _waitms
0447           1472   ;------------------------------------------------------------
0447           1473   ;Allocation info for local variables in function 'LCD_4BIT'
0447           1474   ;------------------------------------------------------------
0447           1475   ;------------------------------------------------------------
0447           1476   ;        EFM8LCDlib.h:80: void LCD_4BIT (void)
0447           1477   ;        -----------------------------------------
0447           1478   ;         function LCD_4BIT
0447           1479   ;        -----------------------------------------
0447           1480   _LCD_4BIT:
0447           1481   ;        EFM8LCDlib.h:82: LCD_E=0; // Resting state of LCD's enable is zero
0447 C2A5      1482            clr     _P2_5
0449           1483   ;        EFM8LCDlib.h:84: waitms(20);
0449 900014    1484            mov     dptr,#0x0014
044C 120100    1485            lcall   _waitms
044F           1486   ;        EFM8LCDlib.h:86: WriteCommand(0x33);
044F 758233    1487            mov     dpl,#0x33
0452 120100    1488            lcall   _WriteCommand
0455           1489   ;        EFM8LCDlib.h:87: WriteCommand(0x33);
0455 758233    1490            mov     dpl,#0x33
0458 120100    1491            lcall   _WriteCommand
045B           1492   ;        EFM8LCDlib.h:88: WriteCommand(0x32); // Change to 4-bit mode
045B 758232    1493            mov     dpl,#0x32
045E 120100    1494            lcall   _WriteCommand
0461           1495   ;        EFM8LCDlib.h:91: WriteCommand(0x28);
0461 758228    1496            mov     dpl,#0x28
0464 120100    1497            lcall   _WriteCommand
0467           1498   ;        EFM8LCDlib.h:92: WriteCommand(0x0c);
0467 75820C    1499            mov     dpl,#0x0C
046A 120100    1500            lcall   _WriteCommand
046D           1501   ;        EFM8LCDlib.h:93: WriteCommand(0x01); // Clear screen command (takes some time)
046D 758201    1502            mov     dpl,#0x01
0470 120100    1503            lcall   _WriteCommand
0473           1504   ;        EFM8LCDlib.h:94: waitms(20); // Wait for clear screen command to finsih.
0473 900014    1505            mov     dptr,#0x0014
0476 020100    1506            ljmp    _waitms
0479           1507   ;------------------------------------------------------------
0479           1508   ;Allocation info for local variables in function 'LCDprint'
0479           1509   ;------------------------------------------------------------
0479           1510   ;line                      Allocated with name '_LCDprint_PARM_2'
0479           1511   ;string                    Allocated to registers r2 r3 r4 
0479           1512   ;j                         Allocated to registers r5 r6 
0479           1513   ;------------------------------------------------------------
0479           1514   ;        EFM8LCDlib.h:97: void LCDprint(char * string, unsigned char line, bit clear)
0479           1515   ;        -----------------------------------------
0479           1516   ;         function LCDprint
0479           1517   ;        -----------------------------------------
0479           1518   _LCDprint:
0479 AA82      1519            mov     r2,dpl
047B AB83      1520            mov     r3,dph
047D ACF0      1521            mov     r4,b
047F           1522   ;        EFM8LCDlib.h:101: WriteCommand(line==2?0xc0:0x80);
047F 7402      1523            mov     a,#0x02
0481 B5F8A8    1524            cjne    a,_LCDprint_PARM_2,L020013?
0484 7DC0      1525            mov     r5,#0xC0
0486 8001      1526            sjmp    L020014?
0488           1527   L020013?:
0488 7D80      1528            mov     r5,#0x80
048A           1529   L020014?:
048A 8D82      1530            mov     dpl,r5
048C C002      1531            push    ar2
048E C003      1532            push    ar3
0490 C004      1533            push    ar4
0492 120100    1534            lcall   _WriteCommand
0495           1535   ;        EFM8LCDlib.h:102: waitms(5);
0495 900005    1536            mov     dptr,#0x0005
0498 120100    1537            lcall   _waitms
049B D004      1538            pop     ar4
049D D003      1539            pop     ar3
049F D002      1540            pop     ar2
04A1           1541   ;        EFM8LCDlib.h:103: for(j=0; string[j]!=0; j++)   WriteData(string[j]);// Write the message
04A1 7D00      1542            mov     r5,#0x00
04A3 7E00      1543            mov     r6,#0x00
04A5           1544   L020003?:
04A5 ED        1545            mov     a,r5
04A6 2A        1546            add     a,r2
04A7 FF        1547            mov     r7,a
04A8 EE        1548            mov     a,r6
04A9 3B        1549            addc    a,r3
04AA F8        1550            mov     r0,a
04AB 8C01      1551            mov     ar1,r4
04AD 8F82      1552            mov     dpl,r7
04AF 8883      1553            mov     dph,r0
04B1 89F0      1554            mov     b,r1
04B3 120100    1555            lcall   __gptrget
04B6 FF        1556            mov     r7,a
04B7 6001      1557            jz      L020006?
04B9 8F82      1558            mov     dpl,r7
04BB C002      1559            push    ar2
04BD C003      1560            push    ar3
04BF C004      1561            push    ar4
04C1 C005      1562            push    ar5
04C3 C006      1563            push    ar6
04C5 120100    1564            lcall   _WriteData
04C8 D006      1565            pop     ar6
04CA D005      1566            pop     ar5
04CC D004      1567            pop     ar4
04CE D003      1568            pop     ar3
04D0 D002      1569            pop     ar2
04D2 0D        1570            inc     r5
04D3 BD0028    1571            cjne    r5,#0x00,L020003?
04D6 0E        1572            inc     r6
04D7 8001      1573            sjmp    L020003?
04D9           1574   L020006?:
04D9           1575   ;        EFM8LCDlib.h:104: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
04D9 3028A8    1576            jnb     _LCDprint_PARM_3,L020011?
04DC 8D02      1577            mov     ar2,r5
04DE 8E03      1578            mov     ar3,r6
04E0           1579   L020007?:
04E0 C3        1580            clr     c
04E1 EA        1581            mov     a,r2
04E2 9410      1582            subb    a,#0x10
04E4 EB        1583            mov     a,r3
04E5 6480      1584            xrl     a,#0x80
04E7 9480      1585            subb    a,#0x80
04E9 5001      1586            jnc     L020011?
04EB 758220    1587            mov     dpl,#0x20
04EE C002      1588            push    ar2
04F0 C003      1589            push    ar3
04F2 120100    1590            lcall   _WriteData
04F5 D003      1591            pop     ar3
04F7 D002      1592            pop     ar2
04F9 0A        1593            inc     r2
04FA BA00E8    1594            cjne    r2,#0x00,L020007?
04FD 0B        1595            inc     r3
04FE 8001      1596            sjmp    L020007?
0500           1597   L020011?:
0500 22        1598            ret
0501           1599   ;------------------------------------------------------------
0501           1600   ;Allocation info for local variables in function '_c51_external_startup'
0501           1601   ;------------------------------------------------------------
0501           1602   ;------------------------------------------------------------
0501           1603   ;        Transmitter_src.c:13: char _c51_external_startup (void)
0501           1604   ;        -----------------------------------------
0501           1605   ;         function _c51_external_startup
0501           1606   ;        -----------------------------------------
0501           1607   __c51_external_startup:
0501           1608   ;        Transmitter_src.c:16: SFRPAGE = 0x00;
0501 75A700    1609            mov     _SFRPAGE,#0x00
0504           1610   ;        Transmitter_src.c:17: WDTCN = 0xDE; //First key
0504 7597DE    1611            mov     _WDTCN,#0xDE
0507           1612   ;        Transmitter_src.c:18: WDTCN = 0xAD; //Second key
0507 7597AD    1613            mov     _WDTCN,#0xAD
050A           1614   ;        Transmitter_src.c:20: VDM0CN |= 0x80;
050A 43FF80    1615            orl     _VDM0CN,#0x80
050D           1616   ;        Transmitter_src.c:21: RSTSRC = 0x02;
050D 75EF02    1617            mov     _RSTSRC,#0x02
0510           1618   ;        Transmitter_src.c:28: SFRPAGE = 0x10;
0510 75A710    1619            mov     _SFRPAGE,#0x10
0513           1620   ;        Transmitter_src.c:29: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0513 75C120    1621            mov     _PFE0CN,#0x20
0516           1622   ;        Transmitter_src.c:30: SFRPAGE = 0x00;
0516 75A700    1623            mov     _SFRPAGE,#0x00
0519           1624   ;        Transmitter_src.c:51: CLKSEL = 0x00;
0519 75A900    1625            mov     _CLKSEL,#0x00
051C           1626   ;        Transmitter_src.c:52: CLKSEL = 0x00;
051C 75A900    1627            mov     _CLKSEL,#0x00
051F           1628   ;        Transmitter_src.c:53: while ((CLKSEL & 0x80) == 0);
051F           1629   L021001?:
051F E5A9      1630            mov     a,_CLKSEL
0521 30E728    1631            jnb     acc.7,L021001?
0524           1632   ;        Transmitter_src.c:54: CLKSEL = 0x03;
0524 75A903    1633            mov     _CLKSEL,#0x03
0527           1634   ;        Transmitter_src.c:55: CLKSEL = 0x03;
0527 75A903    1635            mov     _CLKSEL,#0x03
052A           1636   ;        Transmitter_src.c:56: while ((CLKSEL & 0x80) == 0);
052A           1637   L021004?:
052A E5A9      1638            mov     a,_CLKSEL
052C 30E768    1639            jnb     acc.7,L021004?
052F           1640   ;        Transmitter_src.c:61: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
052F 43A410    1641            orl     _P0MDOUT,#0x10
0532           1642   ;        Transmitter_src.c:62: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0532 75E101    1643            mov     _XBR0,#0x01
0535           1644   ;        Transmitter_src.c:63: XBR1     = 0X10; // Enable T0 on P0.0
0535 75E210    1645            mov     _XBR1,#0x10
0538           1646   ;        Transmitter_src.c:64: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0538 75E340    1647            mov     _XBR2,#0x40
053B           1648   ;        Transmitter_src.c:70: SCON0 = 0x10;
053B 759810    1649            mov     _SCON0,#0x10
053E           1650   ;        Transmitter_src.c:71: CKCON0 |= 0b_0000_0000 ; // Timer 1 uses the system clock divided by 12.
053E 858E8E    1651            mov     _CKCON0,_CKCON0
0541           1652   ;        Transmitter_src.c:72: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0541 758DE6    1653            mov     _TH1,#0xE6
0544           1654   ;        Transmitter_src.c:73: TL1 = TH1;      // Init Timer1
0544 858D8B    1655            mov     _TL1,_TH1
0547           1656   ;        Transmitter_src.c:74: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0547 53890F    1657            anl     _TMOD,#0x0F
054A           1658   ;        Transmitter_src.c:75: TMOD |=  0x20;                       
054A 438920    1659            orl     _TMOD,#0x20
054D           1660   ;        Transmitter_src.c:76: TR1 = 1; // START Timer1
054D D28E      1661            setb    _TR1
054F           1662   ;        Transmitter_src.c:77: TI = 1;  // Indicate TX0 ready
054F D299      1663            setb    _TI
0551           1664   ;        Transmitter_src.c:79: EA = 1;
0551 D2AF      1665            setb    _EA
0553           1666   ;        Transmitter_src.c:81: return 0;
0553 758200    1667            mov     dpl,#0x00
0556 22        1668            ret
0557           1669   ;------------------------------------------------------------
0557           1670   ;Allocation info for local variables in function 'getsn'
0557           1671   ;------------------------------------------------------------
0557           1672   ;len                       Allocated with name '_getsn_PARM_2'
0557           1673   ;buff                      Allocated with name '_getsn_buff_1_113'
0557           1674   ;j                         Allocated with name '_getsn_sloc0_1_0'
0557           1675   ;c                         Allocated to registers r3 
0557           1676   ;sloc0                     Allocated with name '_getsn_sloc0_1_0'
0557           1677   ;------------------------------------------------------------
0557           1678   ;        Transmitter_src.c:84: int getsn (char * buff, int len)
0557           1679   ;        -----------------------------------------
0557           1680   ;         function getsn
0557           1681   ;        -----------------------------------------
0557           1682   _getsn:
0557 8582A8    1683            mov     _getsn_buff_1_113,dpl
055A 8583A9    1684            mov     (_getsn_buff_1_113 + 1),dph
055D 85F0AA    1685            mov     (_getsn_buff_1_113 + 2),b
0560           1686   ;        Transmitter_src.c:89: for(j=0; j<(len-1); j++)
0560 E4        1687            clr     a
0561 F5F8      1688            mov     _getsn_sloc0_1_0,a
0563 F5F9      1689            mov     (_getsn_sloc0_1_0 + 1),a
0565 E5A8      1690            mov     a,_getsn_PARM_2
0567 24FF      1691            add     a,#0xff
0569 FF        1692            mov     r7,a
056A E5A9      1693            mov     a,(_getsn_PARM_2 + 1)
056C 34FF      1694            addc    a,#0xff
056E F8        1695            mov     r0,a
056F 7900      1696            mov     r1,#0x00
0571 7A00      1697            mov     r2,#0x00
0573           1698   L022005?:
0573 C3        1699            clr     c
0574 E9        1700            mov     a,r1
0575 9F        1701            subb    a,r7
0576 EA        1702            mov     a,r2
0577 6480      1703            xrl     a,#0x80
0579 88F0      1704            mov     b,r0
057B 63F080    1705            xrl     b,#0x80
057E 95F0      1706            subb    a,b
0580 5001      1707            jnc     L022008?
0582           1708   ;        Transmitter_src.c:91: c=getchar();
0582 C002      1709            push    ar2
0584 C007      1710            push    ar7
0586 C000      1711            push    ar0
0588 C001      1712            push    ar1
058A 120100    1713            lcall   _getchar
058D AB82      1714            mov     r3,dpl
058F D001      1715            pop     ar1
0591 D000      1716            pop     ar0
0593 D007      1717            pop     ar7
0595 D002      1718            pop     ar2
0597           1719   ;        Transmitter_src.c:92: if ( (c=='\n') || (c=='\r') )
0597 BB0A68    1720            cjne    r3,#0x0A,L022015?
059A 8001      1721            sjmp    L022001?
059C           1722   L022015?:
059C BB0DE8    1723            cjne    r3,#0x0D,L022002?
059F           1724   L022001?:
059F           1725   ;        Transmitter_src.c:94: buff[j]=0;
059F E5F8      1726            mov     a,_getsn_sloc0_1_0
05A1 25A8      1727            add     a,_getsn_buff_1_113
05A3 FC        1728            mov     r4,a
05A4 E5F9      1729            mov     a,(_getsn_sloc0_1_0 + 1)
05A6 35A9      1730            addc    a,(_getsn_buff_1_113 + 1)
05A8 FD        1731            mov     r5,a
05A9 AEAA      1732            mov     r6,(_getsn_buff_1_113 + 2)
05AB 8C82      1733            mov     dpl,r4
05AD 8D83      1734            mov     dph,r5
05AF 8EF0      1735            mov     b,r6
05B1 E4        1736            clr     a
05B2 120100    1737            lcall   __gptrput
05B5           1738   ;        Transmitter_src.c:95: return j;
05B5 85F882    1739            mov     dpl,_getsn_sloc0_1_0
05B8 85F983    1740            mov     dph,(_getsn_sloc0_1_0 + 1)
05BB 22        1741            ret
05BC           1742   L022002?:
05BC           1743   ;        Transmitter_src.c:99: buff[j]=c;
05BC E9        1744            mov     a,r1
05BD 25A8      1745            add     a,_getsn_buff_1_113
05BF FC        1746            mov     r4,a
05C0 EA        1747            mov     a,r2
05C1 35A9      1748            addc    a,(_getsn_buff_1_113 + 1)
05C3 FD        1749            mov     r5,a
05C4 AEAA      1750            mov     r6,(_getsn_buff_1_113 + 2)
05C6 8C82      1751            mov     dpl,r4
05C8 8D83      1752            mov     dph,r5
05CA 8EF0      1753            mov     b,r6
05CC EB        1754            mov     a,r3
05CD 120100    1755            lcall   __gptrput
05D0           1756   ;        Transmitter_src.c:89: for(j=0; j<(len-1); j++)
05D0 09        1757            inc     r1
05D1 B90068    1758            cjne    r1,#0x00,L022018?
05D4 0A        1759            inc     r2
05D5           1760   L022018?:
05D5 89F8      1761            mov     _getsn_sloc0_1_0,r1
05D7 8AF9      1762            mov     (_getsn_sloc0_1_0 + 1),r2
05D9 8001      1763            sjmp    L022005?
05DB           1764   L022008?:
05DB           1765   ;        Transmitter_src.c:102: buff[j]=0;
05DB E5F8      1766            mov     a,_getsn_sloc0_1_0
05DD 25A8      1767            add     a,_getsn_buff_1_113
05DF FA        1768            mov     r2,a
05E0 E5F9      1769            mov     a,(_getsn_sloc0_1_0 + 1)
05E2 35A9      1770            addc    a,(_getsn_buff_1_113 + 1)
05E4 FB        1771            mov     r3,a
05E5 ACAA      1772            mov     r4,(_getsn_buff_1_113 + 2)
05E7 8A82      1773            mov     dpl,r2
05E9 8B83      1774            mov     dph,r3
05EB 8CF0      1775            mov     b,r4
05ED E4        1776            clr     a
05EE 120100    1777            lcall   __gptrput
05F1           1778   ;        Transmitter_src.c:103: return len;
05F1 85A882    1779            mov     dpl,_getsn_PARM_2
05F4 85A983    1780            mov     dph,(_getsn_PARM_2 + 1)
05F7 22        1781            ret
05F8           1782   ;------------------------------------------------------------
05F8           1783   ;Allocation info for local variables in function 'main'
05F8           1784   ;------------------------------------------------------------
05F8           1785   ;buffer                    Allocated with name '_main_buffer_1_119'
05F8           1786   ;------------------------------------------------------------
05F8           1787   ;        Transmitter_src.c:106: void main(void) {
05F8           1788   ;        -----------------------------------------
05F8           1789   ;         function main
05F8           1790   ;        -----------------------------------------
05F8           1791   _main:
05F8           1792   ;        Transmitter_src.c:109: Timer2_init();
05F8 120100    1793            lcall   _Timer2_init
05FB           1794   ;        Transmitter_src.c:110: LCD_4BIT();
05FB 120100    1795            lcall   _LCD_4BIT
05FE           1796   ;        Transmitter_src.c:112: waitms(500);
05FE 9001F4    1797            mov     dptr,#0x01F4
0601 120100    1798            lcall   _waitms
0604           1799   ;        Transmitter_src.c:114: printf("LAB 6 Microcontroller\r\nWith extra features\r\n\n");
0604 74A8      1800            mov     a,#__str_9
0606 C0E0      1801            push    acc
0608 74D0      1802            mov     a,#(__str_9 >> 8)
060A C0E0      1803            push    acc
060C 7480      1804            mov     a,#0x80
060E C0E0      1805            push    acc
0610 120100    1806            lcall   _printf
0613 1581      1807            dec     sp
0615 1581      1808            dec     sp
0617 1581      1809            dec     sp
0619           1810   ;        Transmitter_src.c:116: LCDprint("Duty cycle:", 1, 1);
0619 75F801    1811            mov     _LCDprint_PARM_2,#0x01
061C D228      1812            setb    _LCDprint_PARM_3
061E 90D0E8    1813            mov     dptr,#__str_10
0621 75F080    1814            mov     b,#0x80
0624 120100    1815            lcall   _LCDprint
0627           1816   ;        Transmitter_src.c:118: while(1)
0627           1817   L023002?:
0627           1818   ;        Transmitter_src.c:120: sprintf(buffer, "%d%c %d%c", duty_cycle0, '%', duty_cycle1, '%');
0627 AA88      1819            mov     r2,_duty_cycle1
0629 7B00      1820            mov     r3,#0x00
062B ACC8      1821            mov     r4,_duty_cycle0
062D 7D00      1822            mov     r5,#0x00
062F 7425      1823            mov     a,#0x25
0631 C0E0      1824            push    acc
0633 E4        1825            clr     a
0634 C0E0      1826            push    acc
0636 C002      1827            push    ar2
0638 C003      1828            push    ar3
063A 7425      1829            mov     a,#0x25
063C C0E0      1830            push    acc
063E E4        1831            clr     a
063F C0E0      1832            push    acc
0641 C004      1833            push    ar4
0643 C005      1834            push    ar5
0645 7468      1835            mov     a,#__str_11
0647 C0E0      1836            push    acc
0649 74D1      1837            mov     a,#(__str_11 >> 8)
064B C0E0      1838            push    acc
064D 7480      1839            mov     a,#0x80
064F C0E0      1840            push    acc
0651 7448      1841            mov     a,#_main_buffer_1_119
0653 C0E0      1842            push    acc
0655 74BD      1843            mov     a,#(_main_buffer_1_119 >> 8)
0657 C0E0      1844            push    acc
0659 7440      1845            mov     a,#0x40
065B C0E0      1846            push    acc
065D 120100    1847            lcall   _sprintf
0660 E581      1848            mov     a,sp
0662 24F2      1849            add     a,#0xf2
0664 F581      1850            mov     sp,a
0666           1851   ;        Transmitter_src.c:121: LCDprint(buffer, 2, 1);
0666 75F802    1852            mov     _LCDprint_PARM_2,#0x02
0669 D228      1853            setb    _LCDprint_PARM_3
066B 90BD48    1854            mov     dptr,#_main_buffer_1_119
066E 75F040    1855            mov     b,#0x40
0671 120100    1856            lcall   _LCDprint
0674           1857   ;        Transmitter_src.c:123: printf("Enter command: \r\n");
0674 74E8      1858            mov     a,#__str_12
0676 C0E0      1859            push    acc
0678 74D1      1860            mov     a,#(__str_12 >> 8)
067A C0E0      1861            push    acc
067C 7480      1862            mov     a,#0x80
067E C0E0      1863            push    acc
0680 120100    1864            lcall   _printf
0683 1581      1865            dec     sp
0685 1581      1866            dec     sp
0687 1581      1867            dec     sp
0689           1868   ;        Transmitter_src.c:124: getsn(buffer, CHARS_PER_LINE);
0689 75A810    1869            mov     _getsn_PARM_2,#0x10
068C E4        1870            clr     a
068D F5A9      1871            mov     (_getsn_PARM_2 + 1),a
068F 90BD48    1872            mov     dptr,#_main_buffer_1_119
0692 75F040    1873            mov     b,#0x40
0695 120100    1874            lcall   _getsn
0698           1875   ;        Transmitter_src.c:125: getCommand(buffer);
0698 90BD48    1876            mov     dptr,#_main_buffer_1_119
069B 75F040    1877            mov     b,#0x40
069E 120100    1878            lcall   _getCommand
06A1 020100    1879            ljmp    L023002?
06A4           1880            rseg R_CSEG
06A4           1881   
0000           1882            rseg R_XINIT
0000           1883   
0000           1884            rseg R_CONST
0000           1885   __str_0:
0000 252A7320  1886            db '%*s %d'
     2564
0006 00        1887            db 0x00
0007           1888   __str_1:
0007 44757479  1889            db 'Duty Cycle 0 set to: %u'
     20437963
     6C652030
     20736574
     20746F3A
     202575
001E 0D        1890            db 0x0D
001F 0A        1891            db 0x0A
0020 00        1892            db 0x00
0021           1893   __str_2:
0021 44757479  1894            db 'Duty Cycle 1 set to: %u'
     20437963
     6C652031
     20736574
     20746F3A
     202575
0038 0D        1895            db 0x0D
0039 0A        1896            db 0x0A
003A 00        1897            db 0x00
003B           1898   __str_3:
003B 252A7320  1899            db '%*s %u'
     2575
0041 00        1900            db 0x00
0042           1901   __str_4:
0042 496E7661  1902            db 'Invalid direction. Use -cw or -ccw'
     6C696420
     64697265
     6374696F
     6E2E2055
     7365202D
     6377206F
     72202D63
     6377
0064 0D        1903            db 0x0D
0065 0A        1904            db 0x0A
0066 00        1905            db 0x00
0067           1906   __str_5:
0067 48656C70  1907            db 'Help Menu'
     204D656E
     75
0070 0D        1908            db 0x0D
0071 0A        1909            db 0x0A
0072 4C697374  1910            db 'List of Commands: '
     206F6620
     436F6D6D
     616E6473
     3A20
0084 0D        1911            db 0x0D
0085 0A        1912            db 0x0A
0086 2D637720  1913            db '-cw [duty value]'
     5B647574
     79207661
     6C75655D
0096 0D        1914            db 0x0D
0097 0A        1915            db 0x0A
0098 2D636377  1916            db '-ccw [duty '
     205B6475
     747920
00A3 76616C75  1917            db 'value]'
     655D
00A9 0D        1918            db 0x0D
00AA 0A        1919            db 0x0A
00AB 2D643020  1920            db '-d0 [duty value]'
     5B647574
     79207661
     6C75655D
00BB 0D        1921            db 0x0D
00BC 0A        1922            db 0x0A
00BD 2D643120  1923            db '-d1 [duty value]'
     5B647574
     79207661
     6C75655D
00CD 0D        1924            db 0x0D
00CE 0A        1925            db 0x0A
00CF 2D66205B  1926            db '-f [freq value]'
     66726571
     2076616C
     75655D
00DE 0D        1927            db 0x0D
00DF 0A        1928            db 0x0A
00E0 2D72205B  1929            db '-r [reload value]'
     72656C6F
     61642076
     616C7565
     5D
00F1 0D        1930            db 0x0D
00F2 0A        1931            db 0x0A
00F3 2D6F      1932            db '-o'
00F5 0D        1933            db 0x0D
00F6 0A        1934            db 0x0A
00F7 2D73      1935            db '-s'
00F9 0D        1936            db 0x0D
00FA 0A        1937            db 0x0A
00FB 2D69      1938            db '-i'
00FD 0D        1939            db 0x0D
00FE 0A        1940            db 0x0A
00FF 0A        1941            db 0x0A
0100 00        1942            db 0x00
0101           1943   __str_6:
0101 52656C6F  1944            db 'Reload: %u, Freq: %d, duty0: %d, duty1: %d'
     61643A20
     25752C20
     46726571
     3A202564
     2C206475
     7479303A
     2025642C
     20647574
     79313A20
     2564
012B 0D        1945            db 0x0D
012C 0A        1946            db 0x0A
012D 00        1947            db 0x00
012E           1948   __str_7:
012E 22        1949            db 0x22
012F 2573      1950            db '%s'
0131 22        1951            db 0x22
0132 20696E76  1952            db ' invalid command'
     616C6964
     20636F6D
     6D616E64
0142 0D        1953            db 0x0D
0143 0A        1954            db 0x0A
0144 00        1955            db 0x00
0145           1956   __str_8:
0145 4E6F7420  1957            db 'Not Valid input'
     56616C69
     6420696E
     707574
0154 0D        1958            db 0x0D
0155 0A        1959            db 0x0A
0156 00        1960            db 0x00
0157           1961   __str_9:
0157 4C414220  1962            db 'LAB 6 Microcontroller'
     36204D69
     63726F63
     6F6E7472
     6F6C6C65
     72
016C 0D        1963            db 0x0D
016D 0A        1964            db 0x0A
016E 57697468  1965            db 'With extra features'
     20657874
     72612066
     65617475
     726573
0181 0D        1966            db 0x0D
0182 0A        1967            db 0x0A
0183 0A        1968            db 0x0A
0184 00        1969            db 0x00
0185           1970   __str_10:
0185 44757479  1971            db 'Duty cycle:'
     20637963
     6C653A
0190 00        1972            db 0x00
0191           1973   __str_11:
0191 25642563  1974            db '%d%c %d%c'
     20256425
     63
019A 00        1975            db 0x00
019B           1976   __str_12:
019B 456E7465  1977            db 'Enter command: '
     7220636F
     6D6D616E
     643A20
01AA 0D        1978            db 0x0D
01AB 0A        1979            db 0x0A
01AC 00        1980            db 0x00
01AD           1981   
002E           1982            CSEG
002E           1983   
002E           1984   end
