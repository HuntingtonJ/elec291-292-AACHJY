0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Thu Mar 29 14:01:35 2018
0000              5   ;--------------------------------------------------------
                  5   $name Transmitter_src
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _get_direction_PARM_2
0000             27            public _main
0000             28            public _getsn
0000             29            public __c51_external_startup
0000             30            public _read_nunchuck
0000             31            public _get_direction
0000             32            public _get_speed
0000             33            public _nunchuck_getdata
0000             34            public _nunchuck_init
0000             35            public _I2C_stop
0000             36            public _I2C_start
0000             37            public _I2C_read
0000             38            public _I2C_write
0000             39            public _LCDprint
0000             40            public _LCD_4BIT
0000             41            public _WriteCommand
0000             42            public _WriteData
0000             43            public _LCD_byte
0000             44            public _LCD_pulse
0000             45            public _waitms
0000             46            public _Timer2us
0000             47            public _Tcom_init
0000             48            public _getCommand
0000             49            public _PWMon
0000             50            public _PWMoff
0000             51            public _setReload
0000             52            public _setFrequency
0000             53            public _reloadToFrequency
0000             54            public _frequencyToReload
0000             55            public _sendCommandS
0000             56            public _sendCommand
0000             57            public _Timer4_ISR
0000             58            public _Timer4_init
0000             59            public _Timer2_ISR
0000             60            public _Timer2_init
0000             61            public _Timer0_ISR
0000             62            public _Timer0_init
0000             63            public _getchar1
0000             64            public _putchar1
0000             65            public _UART1_Init
0000             66            public _speedbit
0000             67            public _offset_flag
0000             68            public _nunchuck_init_PARM_1
0000             69            public _LCDprint_PARM_3
0000             70            public _reload_flag
0000             71            public _getsn_PARM_2
0000             72            public _mode
0000             73            public _read_nunchuck_PARM_5
0000             74            public _read_nunchuck_PARM_4
0000             75            public _read_nunchuck_PARM_3
0000             76            public _read_nunchuck_PARM_2
0000             77            public _get_speed_PARM_2
0000             78            public _LCDprint_PARM_2
0000             79            public _sendCommand_PARM_2
0000             80            public _reload4
0000             81            public _freq4
0000             82   ;--------------------------------------------------------
0000             83   ; Special Function Registers
0000             84   ;--------------------------------------------------------
0000             85   _ACC            DATA 0xe0
0000             86   _ADC0ASAH       DATA 0xb6
0000             87   _ADC0ASAL       DATA 0xb5
0000             88   _ADC0ASCF       DATA 0xa1
0000             89   _ADC0ASCT       DATA 0xc7
0000             90   _ADC0CF0        DATA 0xbc
0000             91   _ADC0CF1        DATA 0xb9
0000             92   _ADC0CF2        DATA 0xdf
0000             93   _ADC0CN0        DATA 0xe8
0000             94   _ADC0CN1        DATA 0xb2
0000             95   _ADC0CN2        DATA 0xb3
0000             96   _ADC0GTH        DATA 0xc4
0000             97   _ADC0GTL        DATA 0xc3
0000             98   _ADC0H          DATA 0xbe
0000             99   _ADC0L          DATA 0xbd
0000            100   _ADC0LTH        DATA 0xc6
0000            101   _ADC0LTL        DATA 0xc5
0000            102   _ADC0MX         DATA 0xbb
0000            103   _B              DATA 0xf0
0000            104   _CKCON0         DATA 0x8e
0000            105   _CKCON1         DATA 0xa6
0000            106   _CLEN0          DATA 0xc6
0000            107   _CLIE0          DATA 0xc7
0000            108   _CLIF0          DATA 0xe8
0000            109   _CLKSEL         DATA 0xa9
0000            110   _CLOUT0         DATA 0xd1
0000            111   _CLU0CF         DATA 0xb1
0000            112   _CLU0FN         DATA 0xaf
0000            113   _CLU0MX         DATA 0x84
0000            114   _CLU1CF         DATA 0xb3
0000            115   _CLU1FN         DATA 0xb2
0000            116   _CLU1MX         DATA 0x85
0000            117   _CLU2CF         DATA 0xb6
0000            118   _CLU2FN         DATA 0xb5
0000            119   _CLU2MX         DATA 0x91
0000            120   _CLU3CF         DATA 0xbf
0000            121   _CLU3FN         DATA 0xbe
0000            122   _CLU3MX         DATA 0xae
0000            123   _CMP0CN0        DATA 0x9b
0000            124   _CMP0CN1        DATA 0x99
0000            125   _CMP0MD         DATA 0x9d
0000            126   _CMP0MX         DATA 0x9f
0000            127   _CMP1CN0        DATA 0xbf
0000            128   _CMP1CN1        DATA 0xac
0000            129   _CMP1MD         DATA 0xab
0000            130   _CMP1MX         DATA 0xaa
0000            131   _CRC0CN0        DATA 0xce
0000            132   _CRC0CN1        DATA 0x86
0000            133   _CRC0CNT        DATA 0xd3
0000            134   _CRC0DAT        DATA 0xcb
0000            135   _CRC0FLIP       DATA 0xcf
0000            136   _CRC0IN         DATA 0xca
0000            137   _CRC0ST         DATA 0xd2
0000            138   _DAC0CF0        DATA 0x91
0000            139   _DAC0CF1        DATA 0x92
0000            140   _DAC0H          DATA 0x85
0000            141   _DAC0L          DATA 0x84
0000            142   _DAC1CF0        DATA 0x93
0000            143   _DAC1CF1        DATA 0x94
0000            144   _DAC1H          DATA 0x8a
0000            145   _DAC1L          DATA 0x89
0000            146   _DAC2CF0        DATA 0x95
0000            147   _DAC2CF1        DATA 0x96
0000            148   _DAC2H          DATA 0x8c
0000            149   _DAC2L          DATA 0x8b
0000            150   _DAC3CF0        DATA 0x9a
0000            151   _DAC3CF1        DATA 0x9c
0000            152   _DAC3H          DATA 0x8e
0000            153   _DAC3L          DATA 0x8d
0000            154   _DACGCF0        DATA 0x88
0000            155   _DACGCF1        DATA 0x98
0000            156   _DACGCF2        DATA 0xa2
0000            157   _DERIVID        DATA 0xad
0000            158   _DEVICEID       DATA 0xb5
0000            159   _DPH            DATA 0x83
0000            160   _DPL            DATA 0x82
0000            161   _EIE1           DATA 0xe6
0000            162   _EIE2           DATA 0xf3
0000            163   _EIP1           DATA 0xbb
0000            164   _EIP1H          DATA 0xee
0000            165   _EIP2           DATA 0xed
0000            166   _EIP2H          DATA 0xf6
0000            167   _EMI0CN         DATA 0xe7
0000            168   _FLKEY          DATA 0xb7
0000            169   _HFO0CAL        DATA 0xc7
0000            170   _HFO1CAL        DATA 0xd6
0000            171   _HFOCN          DATA 0xef
0000            172   _I2C0ADM        DATA 0xff
0000            173   _I2C0CN0        DATA 0xba
0000            174   _I2C0DIN        DATA 0xbc
0000            175   _I2C0DOUT       DATA 0xbb
0000            176   _I2C0FCN0       DATA 0xad
0000            177   _I2C0FCN1       DATA 0xab
0000            178   _I2C0FCT        DATA 0xf5
0000            179   _I2C0SLAD       DATA 0xbd
0000            180   _I2C0STAT       DATA 0xb9
0000            181   _IE             DATA 0xa8
0000            182   _IP             DATA 0xb8
0000            183   _IPH            DATA 0xf2
0000            184   _IT01CF         DATA 0xe4
0000            185   _LFO0CN         DATA 0xb1
0000            186   _P0             DATA 0x80
0000            187   _P0MASK         DATA 0xfe
0000            188   _P0MAT          DATA 0xfd
0000            189   _P0MDIN         DATA 0xf1
0000            190   _P0MDOUT        DATA 0xa4
0000            191   _P0SKIP         DATA 0xd4
0000            192   _P1             DATA 0x90
0000            193   _P1MASK         DATA 0xee
0000            194   _P1MAT          DATA 0xed
0000            195   _P1MDIN         DATA 0xf2
0000            196   _P1MDOUT        DATA 0xa5
0000            197   _P1SKIP         DATA 0xd5
0000            198   _P2             DATA 0xa0
0000            199   _P2MASK         DATA 0xfc
0000            200   _P2MAT          DATA 0xfb
0000            201   _P2MDIN         DATA 0xf3
0000            202   _P2MDOUT        DATA 0xa6
0000            203   _P2SKIP         DATA 0xcc
0000            204   _P3             DATA 0xb0
0000            205   _P3MDIN         DATA 0xf4
0000            206   _P3MDOUT        DATA 0x9c
0000            207   _PCA0CENT       DATA 0x9e
0000            208   _PCA0CLR        DATA 0x9c
0000            209   _PCA0CN0        DATA 0xd8
0000            210   _PCA0CPH0       DATA 0xfc
0000            211   _PCA0CPH1       DATA 0xea
0000            212   _PCA0CPH2       DATA 0xec
0000            213   _PCA0CPH3       DATA 0xf5
0000            214   _PCA0CPH4       DATA 0x85
0000            215   _PCA0CPH5       DATA 0xde
0000            216   _PCA0CPL0       DATA 0xfb
0000            217   _PCA0CPL1       DATA 0xe9
0000            218   _PCA0CPL2       DATA 0xeb
0000            219   _PCA0CPL3       DATA 0xf4
0000            220   _PCA0CPL4       DATA 0x84
0000            221   _PCA0CPL5       DATA 0xdd
0000            222   _PCA0CPM0       DATA 0xda
0000            223   _PCA0CPM1       DATA 0xdb
0000            224   _PCA0CPM2       DATA 0xdc
0000            225   _PCA0CPM3       DATA 0xae
0000            226   _PCA0CPM4       DATA 0xaf
0000            227   _PCA0CPM5       DATA 0xcc
0000            228   _PCA0H          DATA 0xfa
0000            229   _PCA0L          DATA 0xf9
0000            230   _PCA0MD         DATA 0xd9
0000            231   _PCA0POL        DATA 0x96
0000            232   _PCA0PWM        DATA 0xf7
0000            233   _PCON0          DATA 0x87
0000            234   _PCON1          DATA 0xcd
0000            235   _PFE0CN         DATA 0xc1
0000            236   _PRTDRV         DATA 0xf6
0000            237   _PSCTL          DATA 0x8f
0000            238   _PSTAT0         DATA 0xaa
0000            239   _PSW            DATA 0xd0
0000            240   _REF0CN         DATA 0xd1
0000            241   _REG0CN         DATA 0xc9
0000            242   _REVID          DATA 0xb6
0000            243   _RSTSRC         DATA 0xef
0000            244   _SBCON1         DATA 0x94
0000            245   _SBRLH1         DATA 0x96
0000            246   _SBRLL1         DATA 0x95
0000            247   _SBUF           DATA 0x99
0000            248   _SBUF0          DATA 0x99
0000            249   _SBUF1          DATA 0x92
0000            250   _SCON           DATA 0x98
0000            251   _SCON0          DATA 0x98
0000            252   _SCON1          DATA 0xc8
0000            253   _SFRPAGE        DATA 0xa7
0000            254   _SFRPGCN        DATA 0xbc
0000            255   _SFRSTACK       DATA 0xd7
0000            256   _SMB0ADM        DATA 0xd6
0000            257   _SMB0ADR        DATA 0xd7
0000            258   _SMB0CF         DATA 0xc1
0000            259   _SMB0CN0        DATA 0xc0
0000            260   _SMB0DAT        DATA 0xc2
0000            261   _SMB0FCN0       DATA 0xc3
0000            262   _SMB0FCN1       DATA 0xc4
0000            263   _SMB0FCT        DATA 0xef
0000            264   _SMB0RXLN       DATA 0xc5
0000            265   _SMB0TC         DATA 0xac
0000            266   _SMOD1          DATA 0x93
0000            267   _SP             DATA 0x81
0000            268   _SPI0CFG        DATA 0xa1
0000            269   _SPI0CKR        DATA 0xa2
0000            270   _SPI0CN0        DATA 0xf8
0000            271   _SPI0DAT        DATA 0xa3
0000            272   _SPI0FCN0       DATA 0x9a
0000            273   _SPI0FCN1       DATA 0x9b
0000            274   _SPI0FCT        DATA 0xf7
0000            275   _SPI0PCF        DATA 0xdf
0000            276   _TCON           DATA 0x88
0000            277   _TH0            DATA 0x8c
0000            278   _TH1            DATA 0x8d
0000            279   _TL0            DATA 0x8a
0000            280   _TL1            DATA 0x8b
0000            281   _TMOD           DATA 0x89
0000            282   _TMR2CN0        DATA 0xc8
0000            283   _TMR2CN1        DATA 0xfd
0000            284   _TMR2H          DATA 0xcf
0000            285   _TMR2L          DATA 0xce
0000            286   _TMR2RLH        DATA 0xcb
0000            287   _TMR2RLL        DATA 0xca
0000            288   _TMR3CN0        DATA 0x91
0000            289   _TMR3CN1        DATA 0xfe
0000            290   _TMR3H          DATA 0x95
0000            291   _TMR3L          DATA 0x94
0000            292   _TMR3RLH        DATA 0x93
0000            293   _TMR3RLL        DATA 0x92
0000            294   _TMR4CN0        DATA 0x98
0000            295   _TMR4CN1        DATA 0xff
0000            296   _TMR4H          DATA 0xa5
0000            297   _TMR4L          DATA 0xa4
0000            298   _TMR4RLH        DATA 0xa3
0000            299   _TMR4RLL        DATA 0xa2
0000            300   _TMR5CN0        DATA 0xc0
0000            301   _TMR5CN1        DATA 0xf1
0000            302   _TMR5H          DATA 0xd5
0000            303   _TMR5L          DATA 0xd4
0000            304   _TMR5RLH        DATA 0xd3
0000            305   _TMR5RLL        DATA 0xd2
0000            306   _UART0PCF       DATA 0xd9
0000            307   _UART1FCN0      DATA 0x9d
0000            308   _UART1FCN1      DATA 0xd8
0000            309   _UART1FCT       DATA 0xfa
0000            310   _UART1LIN       DATA 0x9e
0000            311   _UART1PCF       DATA 0xda
0000            312   _VDM0CN         DATA 0xff
0000            313   _WDTCN          DATA 0x97
0000            314   _XBR0           DATA 0xe1
0000            315   _XBR1           DATA 0xe2
0000            316   _XBR2           DATA 0xe3
0000            317   _XOSC0CN        DATA 0x86
0000            318   _DPTR           DATA 0x8382
0000            319   _TMR2RL         DATA 0xcbca
0000            320   _TMR3RL         DATA 0x9392
0000            321   _TMR4RL         DATA 0xa3a2
0000            322   _TMR5RL         DATA 0xd3d2
0000            323   _TMR0           DATA 0x8c8a
0000            324   _TMR1           DATA 0x8d8b
0000            325   _TMR2           DATA 0xcfce
0000            326   _TMR3           DATA 0x9594
0000            327   _TMR4           DATA 0xa5a4
0000            328   _TMR5           DATA 0xd5d4
0000            329   _SBRL1          DATA 0x9695
0000            330   _PCA0           DATA 0xfaf9
0000            331   _PCA0CP0        DATA 0xfcfb
0000            332   _PCA0CP1        DATA 0xeae9
0000            333   _PCA0CP2        DATA 0xeceb
0000            334   _PCA0CP3        DATA 0xf5f4
0000            335   _PCA0CP4        DATA 0x8584
0000            336   _PCA0CP5        DATA 0xdedd
0000            337   _ADC0ASA        DATA 0xb6b5
0000            338   _ADC0GT         DATA 0xc4c3
0000            339   _ADC0           DATA 0xbebd
0000            340   _ADC0LT         DATA 0xc6c5
0000            341   _DAC0           DATA 0x8584
0000            342   _DAC1           DATA 0x8a89
0000            343   _DAC2           DATA 0x8c8b
0000            344   _DAC3           DATA 0x8e8d
0000            345   ;--------------------------------------------------------
0000            346   ; special function bits
0000            347   ;--------------------------------------------------------
0000            348   _ACC_0          BIT 0xe0
0000            349   _ACC_1          BIT 0xe1
0000            350   _ACC_2          BIT 0xe2
0000            351   _ACC_3          BIT 0xe3
0000            352   _ACC_4          BIT 0xe4
0000            353   _ACC_5          BIT 0xe5
0000            354   _ACC_6          BIT 0xe6
0000            355   _ACC_7          BIT 0xe7
0000            356   _TEMPE          BIT 0xe8
0000            357   _ADGN0          BIT 0xe9
0000            358   _ADGN1          BIT 0xea
0000            359   _ADWINT         BIT 0xeb
0000            360   _ADBUSY         BIT 0xec
0000            361   _ADINT          BIT 0xed
0000            362   _IPOEN          BIT 0xee
0000            363   _ADEN           BIT 0xef
0000            364   _B_0            BIT 0xf0
0000            365   _B_1            BIT 0xf1
0000            366   _B_2            BIT 0xf2
0000            367   _B_3            BIT 0xf3
0000            368   _B_4            BIT 0xf4
0000            369   _B_5            BIT 0xf5
0000            370   _B_6            BIT 0xf6
0000            371   _B_7            BIT 0xf7
0000            372   _C0FIF          BIT 0xe8
0000            373   _C0RIF          BIT 0xe9
0000            374   _C1FIF          BIT 0xea
0000            375   _C1RIF          BIT 0xeb
0000            376   _C2FIF          BIT 0xec
0000            377   _C2RIF          BIT 0xed
0000            378   _C3FIF          BIT 0xee
0000            379   _C3RIF          BIT 0xef
0000            380   _D1SRC0         BIT 0x88
0000            381   _D1SRC1         BIT 0x89
0000            382   _D1AMEN         BIT 0x8a
0000            383   _D01REFSL       BIT 0x8b
0000            384   _D3SRC0         BIT 0x8c
0000            385   _D3SRC1         BIT 0x8d
0000            386   _D3AMEN         BIT 0x8e
0000            387   _D23REFSL       BIT 0x8f
0000            388   _D0UDIS         BIT 0x98
0000            389   _D1UDIS         BIT 0x99
0000            390   _D2UDIS         BIT 0x9a
0000            391   _D3UDIS         BIT 0x9b
0000            392   _EX0            BIT 0xa8
0000            393   _ET0            BIT 0xa9
0000            394   _EX1            BIT 0xaa
0000            395   _ET1            BIT 0xab
0000            396   _ES0            BIT 0xac
0000            397   _ET2            BIT 0xad
0000            398   _ESPI0          BIT 0xae
0000            399   _EA             BIT 0xaf
0000            400   _PX0            BIT 0xb8
0000            401   _PT0            BIT 0xb9
0000            402   _PX1            BIT 0xba
0000            403   _PT1            BIT 0xbb
0000            404   _PS0            BIT 0xbc
0000            405   _PT2            BIT 0xbd
0000            406   _PSPI0          BIT 0xbe
0000            407   _P0_0           BIT 0x80
0000            408   _P0_1           BIT 0x81
0000            409   _P0_2           BIT 0x82
0000            410   _P0_3           BIT 0x83
0000            411   _P0_4           BIT 0x84
0000            412   _P0_5           BIT 0x85
0000            413   _P0_6           BIT 0x86
0000            414   _P0_7           BIT 0x87
0000            415   _P1_0           BIT 0x90
0000            416   _P1_1           BIT 0x91
0000            417   _P1_2           BIT 0x92
0000            418   _P1_3           BIT 0x93
0000            419   _P1_4           BIT 0x94
0000            420   _P1_5           BIT 0x95
0000            421   _P1_6           BIT 0x96
0000            422   _P1_7           BIT 0x97
0000            423   _P2_0           BIT 0xa0
0000            424   _P2_1           BIT 0xa1
0000            425   _P2_2           BIT 0xa2
0000            426   _P2_3           BIT 0xa3
0000            427   _P2_4           BIT 0xa4
0000            428   _P2_5           BIT 0xa5
0000            429   _P2_6           BIT 0xa6
0000            430   _P3_0           BIT 0xb0
0000            431   _P3_1           BIT 0xb1
0000            432   _P3_2           BIT 0xb2
0000            433   _P3_3           BIT 0xb3
0000            434   _P3_4           BIT 0xb4
0000            435   _P3_7           BIT 0xb7
0000            436   _CCF0           BIT 0xd8
0000            437   _CCF1           BIT 0xd9
0000            438   _CCF2           BIT 0xda
0000            439   _CCF3           BIT 0xdb
0000            440   _CCF4           BIT 0xdc
0000            441   _CCF5           BIT 0xdd
0000            442   _CR             BIT 0xde
0000            443   _CF             BIT 0xdf
0000            444   _PARITY         BIT 0xd0
0000            445   _F1             BIT 0xd1
0000            446   _OV             BIT 0xd2
0000            447   _RS0            BIT 0xd3
0000            448   _RS1            BIT 0xd4
0000            449   _F0             BIT 0xd5
0000            450   _AC             BIT 0xd6
0000            451   _CY             BIT 0xd7
0000            452   _RI             BIT 0x98
0000            453   _TI             BIT 0x99
0000            454   _RB8            BIT 0x9a
0000            455   _TB8            BIT 0x9b
0000            456   _REN            BIT 0x9c
0000            457   _CE             BIT 0x9d
0000            458   _SMODE          BIT 0x9e
0000            459   _RI1            BIT 0xc8
0000            460   _TI1            BIT 0xc9
0000            461   _RBX1           BIT 0xca
0000            462   _TBX1           BIT 0xcb
0000            463   _REN1           BIT 0xcc
0000            464   _PERR1          BIT 0xcd
0000            465   _OVR1           BIT 0xce
0000            466   _SI             BIT 0xc0
0000            467   _ACK            BIT 0xc1
0000            468   _ARBLOST        BIT 0xc2
0000            469   _ACKRQ          BIT 0xc3
0000            470   _STO            BIT 0xc4
0000            471   _STA            BIT 0xc5
0000            472   _TXMODE         BIT 0xc6
0000            473   _MASTER         BIT 0xc7
0000            474   _SPIEN          BIT 0xf8
0000            475   _TXNF           BIT 0xf9
0000            476   _NSSMD0         BIT 0xfa
0000            477   _NSSMD1         BIT 0xfb
0000            478   _RXOVRN         BIT 0xfc
0000            479   _MODF           BIT 0xfd
0000            480   _WCOL           BIT 0xfe
0000            481   _SPIF           BIT 0xff
0000            482   _IT0            BIT 0x88
0000            483   _IE0            BIT 0x89
0000            484   _IT1            BIT 0x8a
0000            485   _IE1            BIT 0x8b
0000            486   _TR0            BIT 0x8c
0000            487   _TF0            BIT 0x8d
0000            488   _TR1            BIT 0x8e
0000            489   _TF1            BIT 0x8f
0000            490   _T2XCLK0        BIT 0xc8
0000            491   _T2XCLK1        BIT 0xc9
0000            492   _TR2            BIT 0xca
0000            493   _T2SPLIT        BIT 0xcb
0000            494   _TF2CEN         BIT 0xcc
0000            495   _TF2LEN         BIT 0xcd
0000            496   _TF2L           BIT 0xce
0000            497   _TF2H           BIT 0xcf
0000            498   _T4XCLK0        BIT 0x98
0000            499   _T4XCLK1        BIT 0x99
0000            500   _TR4            BIT 0x9a
0000            501   _T4SPLIT        BIT 0x9b
0000            502   _TF4CEN         BIT 0x9c
0000            503   _TF4LEN         BIT 0x9d
0000            504   _TF4L           BIT 0x9e
0000            505   _TF4H           BIT 0x9f
0000            506   _T5XCLK0        BIT 0xc0
0000            507   _T5XCLK1        BIT 0xc1
0000            508   _TR5            BIT 0xc2
0000            509   _T5SPLIT        BIT 0xc3
0000            510   _TF5CEN         BIT 0xc4
0000            511   _TF5LEN         BIT 0xc5
0000            512   _TF5L           BIT 0xc6
0000            513   _TF5H           BIT 0xc7
0000            514   _RIE            BIT 0xd8
0000            515   _RXTO0          BIT 0xd9
0000            516   _RXTO1          BIT 0xda
0000            517   _RFRQ           BIT 0xdb
0000            518   _TIE            BIT 0xdc
0000            519   _TXHOLD         BIT 0xdd
0000            520   _TXNF1          BIT 0xde
0000            521   _TFRQ           BIT 0xdf
0000            522   ;--------------------------------------------------------
0000            523   ; overlayable register banks
0000            524   ;--------------------------------------------------------
0000            525            rbank0 segment data overlay
0000            526   ;--------------------------------------------------------
0000            527   ; internal ram data
0000            528   ;--------------------------------------------------------
0000            529            rseg R_DSEG
0000            530   _freq4:
0000            531            ds 2
0002            532   _reload4:
0002            533            ds 2
0004            534   _sendCommand_PARM_2:
0004            535            ds 1
0005            536   _sendCommandS_op_1_88:
0005            537            ds 1
0006            538   _sendCommandS_d_1_88:
0006            539            ds 1
0007            540   _LCDprint_PARM_2:
0007            541            ds 1
0008            542   _nunchuck_init_buf_1_134:
0008            543            ds 6
000E            544   _nunchuck_init_sloc0_1_0:
000E            545            ds 2
0010            546   _nunchuck_init_sloc1_1_0:
0010            547            ds 2
0012            548   _nunchuck_init_sloc2_1_0:
0012            549            ds 2
0014            550   _get_speed_PARM_2:
0014            551            ds 1
0015            552   _read_nunchuck_PARM_2:
0015            553            ds 3
0018            554   _read_nunchuck_PARM_3:
0018            555            ds 3
001B            556   _read_nunchuck_PARM_4:
001B            557            ds 2
001D            558   _read_nunchuck_PARM_5:
001D            559            ds 2
001F            560   _read_nunchuck_direction_1_167:
001F            561            ds 3
0022            562   _read_nunchuck_joy_x_1_168:
0022            563            ds 1
0023            564   _read_nunchuck_joy_y_1_168:
0023            565            ds 1
0024            566   _read_nunchuck_sloc0_1_0:
0024            567            ds 1
0025            568   _mode:
0025            569            ds 1
0026            570   _getsn_PARM_2:
0026            571            ds 2
0028            572   _getsn_buff_1_171:
0028            573            ds 3
002B            574   _getsn_sloc0_1_0:
002B            575            ds 2
002D            576   _main_buffer_1_177:
002D            577            ds 6
0033            578   _main_speed_1_177:
0033            579            ds 1
0034            580   _main_direction_1_177:
0034            581            ds 1
0035            582   _main_off_y_1_177:
0035            583            ds 2
0037            584   ;--------------------------------------------------------
0037            585   ; overlayable items in internal ram 
0037            586   ;--------------------------------------------------------
0000            587            rseg    R_OSEG
0000            588            rseg    R_OSEG
0000            589            rseg    R_OSEG
0000            590            rseg    R_OSEG
0000            591            rseg    R_OSEG
0000            592            rseg    R_OSEG
0000            593   _get_direction_PARM_2:
0000            594            ds 1
0001            595   ;--------------------------------------------------------
0001            596   ; indirectly addressable internal ram data
0001            597   ;--------------------------------------------------------
0000            598            rseg R_ISEG
0000            599   ;--------------------------------------------------------
0000            600   ; absolute internal ram data
0000            601   ;--------------------------------------------------------
0000            602            DSEG
0000            603   ;--------------------------------------------------------
0000            604   ; bit data
0000            605   ;--------------------------------------------------------
0000            606            rseg R_BSEG
0000            607   _reload_flag:
0000            608            DBIT    1
0001            609   _LCDprint_PARM_3:
0001            610            DBIT    1
0002            611   _nunchuck_init_PARM_1:
0002            612            DBIT    1
0003            613   _read_nunchuck_but1_1_168:
0003            614            DBIT    1
0004            615   _read_nunchuck_but2_1_168:
0004            616            DBIT    1
0005            617   _offset_flag:
0005            618            DBIT    1
0006            619   _speedbit:
0006            620            DBIT    1
0007            621   ;--------------------------------------------------------
0007            622   ; paged external ram data
0007            623   ;--------------------------------------------------------
0000            624            rseg R_PSEG
0000            625   ;--------------------------------------------------------
0000            626   ; external ram data
0000            627   ;--------------------------------------------------------
0000            628            rseg R_XSEG
0000            629   ;--------------------------------------------------------
0000            630   ; absolute external ram data
0000            631   ;--------------------------------------------------------
0000            632            XSEG
0000            633   ;--------------------------------------------------------
0000            634   ; external initialized ram data
0000            635   ;--------------------------------------------------------
0000            636            rseg R_IXSEG
0000            637            rseg R_HOME
0000            638            rseg R_GSINIT
0000            639            rseg R_CSEG
0000            640   ;--------------------------------------------------------
0000            641   ; Reset entry point and interrupt vectors
0000            642   ;--------------------------------------------------------
0000            643            CSEG at 0x0000
0000 020100     644            ljmp    _crt0
000B            645            CSEG at 0x000b
000B 020100     646            ljmp    _Timer0_ISR
002B            647            CSEG at 0x002b
002B 020100     648            ljmp    _Timer2_ISR
008B            649            CSEG at 0x008b
008B 020100     650            ljmp    _Timer4_ISR
008E            651   ;--------------------------------------------------------
008E            652   ; global & static initialisations
008E            653   ;--------------------------------------------------------
0000            654            rseg R_HOME
0000            655            rseg R_GSINIT
0000            656            rseg R_GSINIT
0000            657   ;--------------------------------------------------------
0000            658   ; data variables initialization
0000            659   ;--------------------------------------------------------
0000            660            rseg R_DINIT
0000            661   ;        Tcom.h:29: unsigned int freq4 = 15000;
0000 756898     662            mov     _freq4,#0x98
0003 75693A     663            mov     (_freq4 + 1),#0x3A
0006            664   ;        Tcom.h:30: unsigned int reload4 = 65109;
0006 752855     665            mov     _reload4,#0x55
0009 7529FE     666            mov     (_reload4 + 1),#0xFE
000C            667   ;        Transmitter_src.c:16: volatile unsigned char mode = 1;
000C 75B801     668            mov     _mode,#0x01
000F            669   ;        Tcom.h:28: volatile bit reload_flag = 0;
000F C238       670            clr     _reload_flag
0011            671   ;        Transmitter_src.c:13: volatile unsigned bit offset_flag=1;
0011 D258       672            setb    _offset_flag
0013            673   ;        Transmitter_src.c:14: volatile unsigned bit speedbit=1;
0013 D218       674            setb    _speedbit
0015            675            ; The linker places a 'ret' at the end of segment R_DINIT.
0015            676   ;--------------------------------------------------------
0015            677   ; code
0015            678   ;--------------------------------------------------------
0000            679            rseg R_CSEG
0000            680   ;------------------------------------------------------------
0000            681   ;Allocation info for local variables in function 'UART1_Init'
0000            682   ;------------------------------------------------------------
0000            683   ;baudrate                  Allocated to registers r2 r3 r4 r5 
0000            684   ;------------------------------------------------------------
0000            685   ;        EFM8UART1lib.h:11: void UART1_Init (unsigned long baudrate)
0000            686   ;        -----------------------------------------
0000            687   ;         function UART1_Init
0000            688   ;        -----------------------------------------
0000            689   _UART1_Init:
0000            690            using   0
0000 AA82       691            mov     r2,dpl
0002 AB83       692            mov     r3,dph
0004 ACF0       693            mov     r4,b
0006 FD         694            mov     r5,a
0007            695   ;        EFM8UART1lib.h:13: SFRPAGE = 0x20;
0007 75A720     696            mov     _SFRPAGE,#0x20
000A            697   ;        EFM8UART1lib.h:14: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
000A 75930C     698            mov     _SMOD1,#0x0C
000D            699   ;        EFM8UART1lib.h:15: SCON1 = 0x10; //Receive fifo overrun flag = 0; Parity Error Flag = 0; 0; Receive enable flag = 1; TBX = 0; RBX = 0; Transmit Interrupt Flag = 0; Receive Interrupt FLag = 0;
000D 75C810     700            mov     _SCON1,#0x10
0010            701   ;        EFM8UART1lib.h:16: SBCON1 =0x00;   // disable baud rate generator
0010 759400     702            mov     _SBCON1,#0x00
0013            703   ;        EFM8UART1lib.h:17: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));  //Baud rate reload
0013 8A00       704            mov     __divulong_PARM_2,r2
0015 8B01       705            mov     (__divulong_PARM_2 + 1),r3
0017 8C02       706            mov     (__divulong_PARM_2 + 2),r4
0019 8D03       707            mov     (__divulong_PARM_2 + 3),r5
001B 90A200     708            mov     dptr,#0xA200
001E 75F04A     709            mov     b,#0x4A
0021 7404       710            mov     a,#0x04
0023 120100     711            lcall   __divulong
0026 AA82       712            mov     r2,dpl
0028 AB83       713            mov     r3,dph
002A ACF0       714            mov     r4,b
002C FD         715            mov     r5,a
002D 750018     716            mov     __divulong_PARM_2,#0x18
0030 E4         717            clr     a
0031 F501       718            mov     (__divulong_PARM_2 + 1),a
0033 F502       719            mov     (__divulong_PARM_2 + 2),a
0035 F503       720            mov     (__divulong_PARM_2 + 3),a
0037 8A82       721            mov     dpl,r2
0039 8B83       722            mov     dph,r3
003B 8CF0       723            mov     b,r4
003D ED         724            mov     a,r5
003E 120100     725            lcall   __divulong
0041 AA82       726            mov     r2,dpl
0043 AB83       727            mov     r3,dph
0045 ACF0       728            mov     r4,b
0047 FD         729            mov     r5,a
0048 E4         730            clr     a
0049 C3         731            clr     c
004A 9A         732            subb    a,r2
004B FA         733            mov     r2,a
004C E4         734            clr     a
004D 9B         735            subb    a,r3
004E FB         736            mov     r3,a
004F 7401       737            mov     a,#0x01
0051 9C         738            subb    a,r4
0052 E4         739            clr     a
0053 9D         740            subb    a,r5
0054 8A95       741            mov     _SBRL1,r2
0056 8B96       742            mov     (_SBRL1 >> 8),r3
0058            743   ;        EFM8UART1lib.h:18: TI1 = 1; // indicate ready for TX
0058 D2C9       744            setb    _TI1
005A            745   ;        EFM8UART1lib.h:19: SBCON1 |= 0x40;   // enable baud rate generator
005A 439440     746            orl     _SBCON1,#0x40
005D            747   ;        EFM8UART1lib.h:20: SFRPAGE = 0x00;
005D 75A700     748            mov     _SFRPAGE,#0x00
0060 22         749            ret
0061            750   ;------------------------------------------------------------
0061            751   ;Allocation info for local variables in function 'putchar1'
0061            752   ;------------------------------------------------------------
0061            753   ;c                         Allocated to registers r2 
0061            754   ;------------------------------------------------------------
0061            755   ;        EFM8UART1lib.h:23: void putchar1 (char c) 
0061            756   ;        -----------------------------------------
0061            757   ;         function putchar1
0061            758   ;        -----------------------------------------
0061            759   _putchar1:
0061 AA82       760            mov     r2,dpl
0063            761   ;        EFM8UART1lib.h:25: SFRPAGE = 0x20;
0063 75A720     762            mov     _SFRPAGE,#0x20
0066            763   ;        EFM8UART1lib.h:26: if (c == '\n') 
0066 BA0A98     764            cjne    r2,#0x0A,L003006?
0069            765   ;        EFM8UART1lib.h:28: while (!TI1);
0069            766   L003001?:
0069            767   ;        EFM8UART1lib.h:29: TI1=0;
0069 10C918     768            jbc     _TI1,L003017?
006C 8001       769            sjmp    L003001?
006E            770   L003017?:
006E            771   ;        EFM8UART1lib.h:30: SBUF1 = '\r';
006E 75920D     772            mov     _SBUF1,#0x0D
0071            773   ;        EFM8UART1lib.h:32: while (!TI1);
0071            774   L003006?:
0071            775   ;        EFM8UART1lib.h:33: TI1=0;
0071 10C958     776            jbc     _TI1,L003018?
0074 8001       777            sjmp    L003006?
0076            778   L003018?:
0076            779   ;        EFM8UART1lib.h:34: SBUF1 = c;
0076 8A92       780            mov     _SBUF1,r2
0078            781   ;        EFM8UART1lib.h:35: SFRPAGE = 0x00;
0078 75A700     782            mov     _SFRPAGE,#0x00
007B 22         783            ret
007C            784   ;------------------------------------------------------------
007C            785   ;Allocation info for local variables in function 'getchar1'
007C            786   ;------------------------------------------------------------
007C            787   ;c                         Allocated to registers 
007C            788   ;------------------------------------------------------------
007C            789   ;        EFM8UART1lib.h:38: char getchar1 (void)
007C            790   ;        -----------------------------------------
007C            791   ;         function getchar1
007C            792   ;        -----------------------------------------
007C            793   _getchar1:
007C            794   ;        EFM8UART1lib.h:41: SFRPAGE = 0x20;
007C 75A720     795            mov     _SFRPAGE,#0x20
007F            796   ;        EFM8UART1lib.h:42: while (!RI1);
007F            797   L004001?:
007F            798   ;        EFM8UART1lib.h:43: RI1=0;
007F 10C8D8     799            jbc     _RI1,L004008?
0082 8001       800            sjmp    L004001?
0084            801   L004008?:
0084            802   ;        EFM8UART1lib.h:45: SCON1&=0b_0011_1111;
0084 53C83F     803            anl     _SCON1,#0x3F
0087            804   ;        EFM8UART1lib.h:46: c = SBUF1;
0087 859282     805            mov     dpl,_SBUF1
008A            806   ;        EFM8UART1lib.h:47: SFRPAGE = 0x00;
008A 75A700     807            mov     _SFRPAGE,#0x00
008D            808   ;        EFM8UART1lib.h:48: return (c);
008D 22         809            ret
008E            810   ;------------------------------------------------------------
008E            811   ;Allocation info for local variables in function 'Timer0_init'
008E            812   ;------------------------------------------------------------
008E            813   ;------------------------------------------------------------
008E            814   ;        Tcom.h:34: void Timer0_init(void){
008E            815   ;        -----------------------------------------
008E            816   ;         function Timer0_init
008E            817   ;        -----------------------------------------
008E            818   _Timer0_init:
008E            819   ;        Tcom.h:37: CKCON0 |= 0b_0000_0100; // Timer0 clock source = SYSCLK/12
008E 438E04     820            orl     _CKCON0,#0x04
0091            821   ;        Tcom.h:38: TMOD &= 0xf0;  // Mask out timer 1 bits
0091 5389F0     822            anl     _TMOD,#0xF0
0094            823   ;        Tcom.h:39: TMOD |= 0x02;  // Timer0 in 8-bit auto-reload mode
0094 438902     824            orl     _TMOD,#0x02
0097            825   ;        Tcom.h:41: TL0 = TH0 = 256-(SYSCLK/SMB_FREQUENCY/3);
0097 758C10     826            mov     _TH0,#0x10
009A 758A10     827            mov     _TL0,#0x10
009D            828   ;        Tcom.h:42: TR0 = 1; // Enable timer 0
009D D28C       829            setb    _TR0
009F 22         830            ret
00A0            831   ;------------------------------------------------------------
00A0            832   ;Allocation info for local variables in function 'Timer0_ISR'
00A0            833   ;------------------------------------------------------------
00A0            834   ;------------------------------------------------------------
00A0            835   ;        Tcom.h:47: void Timer0_ISR (void) interrupt INTERRUPT_TIMER0 {
00A0            836   ;        -----------------------------------------
00A0            837   ;         function Timer0_ISR
00A0            838   ;        -----------------------------------------
00A0            839   _Timer0_ISR:
00A0            840   ;        Tcom.h:48: TF0 = 0;
00A0 C28D       841            clr     _TF0
00A2            842   ;        Tcom.h:49: SI=0;
00A2 C2C0       843            clr     _SI
00A4 32         844            reti
00A5            845   ;        eliminated unneeded push/pop psw
00A5            846   ;        eliminated unneeded push/pop dpl
00A5            847   ;        eliminated unneeded push/pop dph
00A5            848   ;        eliminated unneeded push/pop b
00A5            849   ;        eliminated unneeded push/pop acc
00A5            850   ;------------------------------------------------------------
00A5            851   ;Allocation info for local variables in function 'Timer2_init'
00A5            852   ;------------------------------------------------------------
00A5            853   ;------------------------------------------------------------
00A5            854   ;        Tcom.h:54: void Timer2_init(void) {
00A5            855   ;        -----------------------------------------
00A5            856   ;         function Timer2_init
00A5            857   ;        -----------------------------------------
00A5            858   _Timer2_init:
00A5            859   ;        Tcom.h:55: TMR2CN0=0b_0000_0000;   // Stop Timer2; Clear TF2; T2XCLK uses Sysclk/12
00A5 75C800     860            mov     _TMR2CN0,#0x00
00A8            861   ;        Tcom.h:56: CKCON0|=0b_0000_0000; // Timer 2 uses the system clock; Timer2 uses T2XCLK
00A8 858E8E     862            mov     _CKCON0,_CKCON0
00AB            863   ;        Tcom.h:57: TMR2RL=64936; //Initilizes reload value for 100hz;
00AB 75CAA8     864            mov     _TMR2RL,#0xA8
00AE 75CBFD     865            mov     (_TMR2RL >> 8),#0xFD
00B1            866   ;        Tcom.h:58: TMR2=0xffff;   // Set to reload immediately
00B1 75CEFF     867            mov     _TMR2,#0xFF
00B4 75CFFF     868            mov     (_TMR2 >> 8),#0xFF
00B7            869   ;        Tcom.h:59: ET2=0;         // Enable Timer2 interrupts
00B7 C2AD       870            clr     _ET2
00B9            871   ;        Tcom.h:60: TR2=1;         // Start Timer2 (TMR2CN is bit addressable)
00B9 D2CA       872            setb    _TR2
00BB 22         873            ret
00BC            874   ;------------------------------------------------------------
00BC            875   ;Allocation info for local variables in function 'Timer2_ISR'
00BC            876   ;------------------------------------------------------------
00BC            877   ;------------------------------------------------------------
00BC            878   ;        Tcom.h:63: void Timer2_ISR (void) interrupt 5 {
00BC            879   ;        -----------------------------------------
00BC            880   ;         function Timer2_ISR
00BC            881   ;        -----------------------------------------
00BC            882   _Timer2_ISR:
00BC            883   ;        Tcom.h:64: SFRPAGE=0x00;
00BC 75A700     884            mov     _SFRPAGE,#0x00
00BF            885   ;        Tcom.h:66: TF2H = 0; // Clear Timer2 interrupt flag
00BF C2CF       886            clr     _TF2H
00C1 32         887            reti
00C2            888   ;        eliminated unneeded push/pop psw
00C2            889   ;        eliminated unneeded push/pop dpl
00C2            890   ;        eliminated unneeded push/pop dph
00C2            891   ;        eliminated unneeded push/pop b
00C2            892   ;        eliminated unneeded push/pop acc
00C2            893   ;------------------------------------------------------------
00C2            894   ;Allocation info for local variables in function 'Timer4_init'
00C2            895   ;------------------------------------------------------------
00C2            896   ;------------------------------------------------------------
00C2            897   ;        Tcom.h:88: void Timer4_init(void) {
00C2            898   ;        -----------------------------------------
00C2            899   ;         function Timer4_init
00C2            900   ;        -----------------------------------------
00C2            901   _Timer4_init:
00C2            902   ;        Tcom.h:89: SFRPAGE=0x10;
00C2 75A710     903            mov     _SFRPAGE,#0x10
00C5            904   ;        Tcom.h:90: TMR4CN0=0b_0000_0000;
00C5 759800     905            mov     _TMR4CN0,#0x00
00C8            906   ;        Tcom.h:91: TMR4CN1=0b_0110_0000;
00C8 75FF60     907            mov     _TMR4CN1,#0x60
00CB            908   ;        Tcom.h:93: TMR4RL=reload4; //reload = 2^16 - (SYSCLK/12)/(F*2); 15kHz
00CB 8528A2     909            mov     _TMR4RL,_reload4
00CE 8529A3     910            mov     (_TMR4RL >> 8),(_reload4 + 1)
00D1            911   ;        Tcom.h:94: TMR4=0xffff;
00D1 75A4FF     912            mov     _TMR4,#0xFF
00D4 75A5FF     913            mov     (_TMR4 >> 8),#0xFF
00D7            914   ;        Tcom.h:96: EIE2|=0b_0000_0100;
00D7 43F304     915            orl     _EIE2,#0x04
00DA            916   ;        Tcom.h:97: TR4=1;
00DA D29A       917            setb    _TR4
00DC            918   ;        Tcom.h:98: SFRPAGE=0x00;
00DC 75A700     919            mov     _SFRPAGE,#0x00
00DF 22         920            ret
00E0            921   ;------------------------------------------------------------
00E0            922   ;Allocation info for local variables in function 'Timer4_ISR'
00E0            923   ;------------------------------------------------------------
00E0            924   ;------------------------------------------------------------
00E0            925   ;        Tcom.h:102: void Timer4_ISR(void) interrupt INTERRUPT_TIMER4 {
00E0            926   ;        -----------------------------------------
00E0            927   ;         function Timer4_ISR
00E0            928   ;        -----------------------------------------
00E0            929   _Timer4_ISR:
00E0            930   ;        Tcom.h:103: reload_flag = 1;
00E0 D238       931            setb    _reload_flag
00E2            932   ;        Tcom.h:104: TF4H = 0; //interrupt flag
00E2 C29F       933            clr     _TF4H
00E4            934   ;        Tcom.h:106: OUT0 = !OUT0;
00E4 B2A0       935            cpl     _P2_0
00E6            936   ;        Tcom.h:107: reload_flag = 0;
00E6 C238       937            clr     _reload_flag
00E8 32         938            reti
00E9            939   ;        eliminated unneeded push/pop psw
00E9            940   ;        eliminated unneeded push/pop dpl
00E9            941   ;        eliminated unneeded push/pop dph
00E9            942   ;        eliminated unneeded push/pop b
00E9            943   ;        eliminated unneeded push/pop acc
00E9            944   ;------------------------------------------------------------
00E9            945   ;Allocation info for local variables in function 'sendCommand'
00E9            946   ;------------------------------------------------------------
00E9            947   ;value                     Allocated with name '_sendCommand_PARM_2'
00E9            948   ;op                        Allocated to registers r2 
00E9            949   ;------------------------------------------------------------
00E9            950   ;        Tcom.h:110: void sendCommand(unsigned char op, unsigned char value) {
00E9            951   ;        -----------------------------------------
00E9            952   ;         function sendCommand
00E9            953   ;        -----------------------------------------
00E9            954   _sendCommand:
00E9 AA82       955            mov     r2,dpl
00EB            956   ;        Tcom.h:111: if (op < 0b_1000 && value < 0b_100000) {
00EB BA0818     957            cjne    r2,#0x08,L011009?
00EE            958   L011009?:
00EE 5001       959            jnc     L011002?
00F0 74E0       960            mov     a,#0x100 - 0x20
00F2 25E8       961            add     a,_sendCommand_PARM_2
00F4 4001       962            jc      L011002?
00F6            963   ;        Tcom.h:112: putchar1(op*0b_100000 + value);
00F6 EA         964            mov     a,r2
00F7 C4         965            swap    a
00F8 23         966            rl      a
00F9 54E0       967            anl     a,#0xe0
00FB FB         968            mov     r3,a
00FC E5E8       969            mov     a,_sendCommand_PARM_2
00FE 2B         970            add     a,r3
00FF F582       971            mov     dpl,a
0101 C002       972            push    ar2
0103 120100     973            lcall   _putchar1
0106 D002       974            pop     ar2
0108            975   ;        Tcom.h:113: printf("Sent: %d\r\n", op*0b_100000 + value);
0108 EA         976            mov     a,r2
0109 75F020     977            mov     b,#0x20
010C A4         978            mul     ab
010D FA         979            mov     r2,a
010E ABF0       980            mov     r3,b
0110 ACE8       981            mov     r4,_sendCommand_PARM_2
0112 7D00       982            mov     r5,#0x00
0114 EC         983            mov     a,r4
0115 2A         984            add     a,r2
0116 FA         985            mov     r2,a
0117 ED         986            mov     a,r5
0118 3B         987            addc    a,r3
0119 FB         988            mov     r3,a
011A C002       989            push    ar2
011C C003       990            push    ar3
011E 7498       991            mov     a,#__str_0
0120 C0E0       992            push    acc
0122 74C4       993            mov     a,#(__str_0 >> 8)
0124 C0E0       994            push    acc
0126 7480       995            mov     a,#0x80
0128 C0E0       996            push    acc
012A 120100     997            lcall   _printf
012D E581       998            mov     a,sp
012F 24FB       999            add     a,#0xfb
0131 F581      1000            mov     sp,a
0133 22        1001            ret
0134           1002   L011002?:
0134           1003   ;        Tcom.h:115: printf("c err\r\n");
0134 7498      1004            mov     a,#__str_1
0136 C0E0      1005            push    acc
0138 74C5      1006            mov     a,#(__str_1 >> 8)
013A C0E0      1007            push    acc
013C 7480      1008            mov     a,#0x80
013E C0E0      1009            push    acc
0140 120100    1010            lcall   _printf
0143 1581      1011            dec     sp
0145 1581      1012            dec     sp
0147 1581      1013            dec     sp
0149 22        1014            ret
014A           1015   ;------------------------------------------------------------
014A           1016   ;Allocation info for local variables in function 'sendCommandS'
014A           1017   ;------------------------------------------------------------
014A           1018   ;input                     Allocated to registers r2 r3 r4 
014A           1019   ;op                        Allocated with name '_sendCommandS_op_1_88'
014A           1020   ;d                         Allocated with name '_sendCommandS_d_1_88'
014A           1021   ;------------------------------------------------------------
014A           1022   ;        Tcom.h:119: void sendCommandS(char* input) {
014A           1023   ;        -----------------------------------------
014A           1024   ;         function sendCommandS
014A           1025   ;        -----------------------------------------
014A           1026   _sendCommandS:
014A AA82      1027            mov     r2,dpl
014C AB83      1028            mov     r3,dph
014E ACF0      1029            mov     r4,b
0150           1030   ;        Tcom.h:123: sscanf(input, "%*s %c %c", &op, &d);
0150 74C8      1031            mov     a,#_sendCommandS_d_1_88
0152 C0E0      1032            push    acc
0154 74BB      1033            mov     a,#(_sendCommandS_d_1_88 >> 8)
0156 C0E0      1034            push    acc
0158 7440      1035            mov     a,#0x40
015A C0E0      1036            push    acc
015C 7478      1037            mov     a,#_sendCommandS_op_1_88
015E C0E0      1038            push    acc
0160 74BB      1039            mov     a,#(_sendCommandS_op_1_88 >> 8)
0162 C0E0      1040            push    acc
0164 7440      1041            mov     a,#0x40
0166 C0E0      1042            push    acc
0168 74D8      1043            mov     a,#__str_2
016A C0E0      1044            push    acc
016C 74C5      1045            mov     a,#(__str_2 >> 8)
016E C0E0      1046            push    acc
0170 7480      1047            mov     a,#0x80
0172 C0E0      1048            push    acc
0174 C002      1049            push    ar2
0176 C003      1050            push    ar3
0178 C004      1051            push    ar4
017A 120100    1052            lcall   _sscanf
017D E581      1053            mov     a,sp
017F 24F4      1054            add     a,#0xf4
0181 F581      1055            mov     sp,a
0183           1056   ;        Tcom.h:125: switch(op) {
0183 AA78      1057            mov     r2,_sendCommandS_op_1_88
0185 BA6658    1058            cjne    r2,#0x66,L012011?
0188 8001      1059            sjmp    L012002?
018A           1060   L012011?:
018A 8A03      1061            mov     ar3,r2
018C BB72D8    1062            cjne    r3,#0x72,L012012?
018F 8001      1063            sjmp    L012003?
0191           1064   L012012?:
0191 BA7358    1065            cjne    r2,#0x73,L012004?
0194           1066   ;        Tcom.h:127: op = 0;
0194 757800    1067            mov     _sendCommandS_op_1_88,#0x00
0197           1068   ;        Tcom.h:128: break;
0197           1069   ;        Tcom.h:129: case 'f':
0197 8001      1070            sjmp    L012005?
0199           1071   L012002?:
0199           1072   ;        Tcom.h:130: op = 0b_001;
0199 757801    1073            mov     _sendCommandS_op_1_88,#0x01
019C           1074   ;        Tcom.h:131: break;
019C           1075   ;        Tcom.h:132: case 'r':
019C 8001      1076            sjmp    L012005?
019E           1077   L012003?:
019E           1078   ;        Tcom.h:133: op = 0b_010;
019E 757802    1079            mov     _sendCommandS_op_1_88,#0x02
01A1           1080   ;        Tcom.h:134: break;
01A1           1081   ;        Tcom.h:135: default:
01A1 8001      1082            sjmp    L012005?
01A3           1083   L012004?:
01A3           1084   ;        Tcom.h:136: return;
01A3           1085   ;        Tcom.h:137: }
01A3 22        1086            ret
01A4           1087   L012005?:
01A4           1088   ;        Tcom.h:138: sendCommand(op, d);
01A4 85C8E8    1089            mov     _sendCommand_PARM_2,_sendCommandS_d_1_88
01A7 857882    1090            mov     dpl,_sendCommandS_op_1_88
01AA 020100    1091            ljmp    _sendCommand
01AD           1092   ;------------------------------------------------------------
01AD           1093   ;Allocation info for local variables in function 'frequencyToReload'
01AD           1094   ;------------------------------------------------------------
01AD           1095   ;freq                      Allocated to registers r2 r3 
01AD           1096   ;------------------------------------------------------------
01AD           1097   ;        Tcom.h:157: unsigned int frequencyToReload(unsigned int freq) {
01AD           1098   ;        -----------------------------------------
01AD           1099   ;         function frequencyToReload
01AD           1100   ;        -----------------------------------------
01AD           1101   _frequencyToReload:
01AD AA82      1102            mov     r2,dpl
01AF           1103   ;        Tcom.h:158: return 65536 - ((SYSCLK/12)/(freq*2));
01AF E583      1104            mov     a,dph
01B1 CA        1105            xch     a,r2
01B2 25E0      1106            add     a,acc
01B4 CA        1107            xch     a,r2
01B5 33        1108            rlc     a
01B6 FB        1109            mov     r3,a
01B7 8A00      1110            mov     __divslong_PARM_2,r2
01B9 8B01      1111            mov     (__divslong_PARM_2 + 1),r3
01BB 750200    1112            mov     (__divslong_PARM_2 + 2),#0x00
01BE 750300    1113            mov     (__divslong_PARM_2 + 3),#0x00
01C1 908D80    1114            mov     dptr,#0x8D80
01C4 75F05B    1115            mov     b,#0x5B
01C7 E4        1116            clr     a
01C8 120100    1117            lcall   __divslong
01CB AA82      1118            mov     r2,dpl
01CD AB83      1119            mov     r3,dph
01CF ACF0      1120            mov     r4,b
01D1 FD        1121            mov     r5,a
01D2 E4        1122            clr     a
01D3 C3        1123            clr     c
01D4 9A        1124            subb    a,r2
01D5 FA        1125            mov     r2,a
01D6 E4        1126            clr     a
01D7 9B        1127            subb    a,r3
01D8 FB        1128            mov     r3,a
01D9 7401      1129            mov     a,#0x01
01DB 9C        1130            subb    a,r4
01DC E4        1131            clr     a
01DD 9D        1132            subb    a,r5
01DE 8A82      1133            mov     dpl,r2
01E0 8B83      1134            mov     dph,r3
01E2 22        1135            ret
01E3           1136   ;------------------------------------------------------------
01E3           1137   ;Allocation info for local variables in function 'reloadToFrequency'
01E3           1138   ;------------------------------------------------------------
01E3           1139   ;reload                    Allocated to registers r2 r3 
01E3           1140   ;------------------------------------------------------------
01E3           1141   ;        Tcom.h:161: unsigned int reloadToFrequency(unsigned int reload) {
01E3           1142   ;        -----------------------------------------
01E3           1143   ;         function reloadToFrequency
01E3           1144   ;        -----------------------------------------
01E3           1145   _reloadToFrequency:
01E3 AA82      1146            mov     r2,dpl
01E5 AB83      1147            mov     r3,dph
01E7           1148   ;        Tcom.h:162: return ((SYSCLK/12)/(65536 - reload))/2;
01E7 7C00      1149            mov     r4,#0x00
01E9 E4        1150            clr     a
01EA FD        1151            mov     r5,a
01EB C3        1152            clr     c
01EC 9A        1153            subb    a,r2
01ED F500      1154            mov     __divslong_PARM_2,a
01EF E4        1155            clr     a
01F0 9B        1156            subb    a,r3
01F1 F501      1157            mov     (__divslong_PARM_2 + 1),a
01F3 7401      1158            mov     a,#0x01
01F5 9C        1159            subb    a,r4
01F6 F502      1160            mov     (__divslong_PARM_2 + 2),a
01F8 E4        1161            clr     a
01F9 9D        1162            subb    a,r5
01FA F503      1163            mov     (__divslong_PARM_2 + 3),a
01FC 908D80    1164            mov     dptr,#0x8D80
01FF 75F05B    1165            mov     b,#0x5B
0202 E4        1166            clr     a
0203 120100    1167            lcall   __divslong
0206 AA82      1168            mov     r2,dpl
0208 AB83      1169            mov     r3,dph
020A ACF0      1170            mov     r4,b
020C FD        1171            mov     r5,a
020D 750002    1172            mov     __divslong_PARM_2,#0x02
0210 E4        1173            clr     a
0211 F501      1174            mov     (__divslong_PARM_2 + 1),a
0213 F502      1175            mov     (__divslong_PARM_2 + 2),a
0215 F503      1176            mov     (__divslong_PARM_2 + 3),a
0217 8A82      1177            mov     dpl,r2
0219 8B83      1178            mov     dph,r3
021B 8CF0      1179            mov     b,r4
021D ED        1180            mov     a,r5
021E 020100    1181            ljmp    __divslong
0221           1182   ;------------------------------------------------------------
0221           1183   ;Allocation info for local variables in function 'setFrequency'
0221           1184   ;------------------------------------------------------------
0221           1185   ;input                     Allocated to registers r2 r3 r4 
0221           1186   ;------------------------------------------------------------
0221           1187   ;        Tcom.h:165: void setFrequency(char* input) {
0221           1188   ;        -----------------------------------------
0221           1189   ;         function setFrequency
0221           1190   ;        -----------------------------------------
0221           1191   _setFrequency:
0221 AA82      1192            mov     r2,dpl
0223 AB83      1193            mov     r3,dph
0225 ACF0      1194            mov     r4,b
0227           1195   ;        Tcom.h:166: sscanf(input, "%*s %u", &freq4);
0227 7468      1196            mov     a,#_freq4
0229 C0E0      1197            push    acc
022B 744E      1198            mov     a,#(_freq4 >> 8)
022D C0E0      1199            push    acc
022F 7440      1200            mov     a,#0x40
0231 C0E0      1201            push    acc
0233 7468      1202            mov     a,#__str_3
0235 C0E0      1203            push    acc
0237 74C8      1204            mov     a,#(__str_3 >> 8)
0239 C0E0      1205            push    acc
023B 7480      1206            mov     a,#0x80
023D C0E0      1207            push    acc
023F C002      1208            push    ar2
0241 C003      1209            push    ar3
0243 C004      1210            push    ar4
0245 120100    1211            lcall   _sscanf
0248 E581      1212            mov     a,sp
024A 24F7      1213            add     a,#0xf7
024C F581      1214            mov     sp,a
024E           1215   ;        Tcom.h:167: while(reload_flag != 0);
024E           1216   L015001?:
024E 2038A8    1217            jb      _reload_flag,L015001?
0251           1218   ;        Tcom.h:168: reload4 = frequencyToReload(freq4);
0251 856882    1219            mov     dpl,_freq4
0254 856983    1220            mov     dph,(_freq4 + 1)
0257 120100    1221            lcall   _frequencyToReload
025A 858228    1222            mov     _reload4,dpl
025D 858329    1223            mov     (_reload4 + 1),dph
0260           1224   ;        Tcom.h:169: SFRPAGE = 0x10;
0260 75A710    1225            mov     _SFRPAGE,#0x10
0263           1226   ;        Tcom.h:170: TMR4RL = reload4;
0263 8528A2    1227            mov     _TMR4RL,_reload4
0266 8529A3    1228            mov     (_TMR4RL >> 8),(_reload4 + 1)
0269           1229   ;        Tcom.h:171: SFRPAGE = 0x00;
0269 75A700    1230            mov     _SFRPAGE,#0x00
026C           1231   ;        Tcom.h:172: printf("Set timer4 freq to: %d\r\n", freq4);
026C C068      1232            push    _freq4
026E C069      1233            push    (_freq4 + 1)
0270 74E8      1234            mov     a,#__str_4
0272 C0E0      1235            push    acc
0274 74C8      1236            mov     a,#(__str_4 >> 8)
0276 C0E0      1237            push    acc
0278 7480      1238            mov     a,#0x80
027A C0E0      1239            push    acc
027C 120100    1240            lcall   _printf
027F E581      1241            mov     a,sp
0281 24FB      1242            add     a,#0xfb
0283 F581      1243            mov     sp,a
0285 22        1244            ret
0286           1245   ;------------------------------------------------------------
0286           1246   ;Allocation info for local variables in function 'setReload'
0286           1247   ;------------------------------------------------------------
0286           1248   ;input                     Allocated to registers r2 r3 r4 
0286           1249   ;------------------------------------------------------------
0286           1250   ;        Tcom.h:175: void setReload(char* input) {
0286           1251   ;        -----------------------------------------
0286           1252   ;         function setReload
0286           1253   ;        -----------------------------------------
0286           1254   _setReload:
0286 AA82      1255            mov     r2,dpl
0288 AB83      1256            mov     r3,dph
028A ACF0      1257            mov     r4,b
028C           1258   ;        Tcom.h:176: sscanf(input, "%*s %u", &reload4);
028C 7428      1259            mov     a,#_reload4
028E C0E0      1260            push    acc
0290 744E      1261            mov     a,#(_reload4 >> 8)
0292 C0E0      1262            push    acc
0294 7440      1263            mov     a,#0x40
0296 C0E0      1264            push    acc
0298 7468      1265            mov     a,#__str_3
029A C0E0      1266            push    acc
029C 74C8      1267            mov     a,#(__str_3 >> 8)
029E C0E0      1268            push    acc
02A0 7480      1269            mov     a,#0x80
02A2 C0E0      1270            push    acc
02A4 C002      1271            push    ar2
02A6 C003      1272            push    ar3
02A8 C004      1273            push    ar4
02AA 120100    1274            lcall   _sscanf
02AD E581      1275            mov     a,sp
02AF 24F7      1276            add     a,#0xf7
02B1 F581      1277            mov     sp,a
02B3           1278   ;        Tcom.h:177: while(reload_flag != 0);
02B3           1279   L016001?:
02B3 203828    1280            jb      _reload_flag,L016001?
02B6           1281   ;        Tcom.h:178: freq4 = reloadToFrequency(reload4);
02B6 852882    1282            mov     dpl,_reload4
02B9 852983    1283            mov     dph,(_reload4 + 1)
02BC 120100    1284            lcall   _reloadToFrequency
02BF 858268    1285            mov     _freq4,dpl
02C2 858369    1286            mov     (_freq4 + 1),dph
02C5           1287   ;        Tcom.h:179: SFRPAGE = 0x10;
02C5 75A710    1288            mov     _SFRPAGE,#0x10
02C8           1289   ;        Tcom.h:180: TMR4RL = reload4;
02C8 8528A2    1290            mov     _TMR4RL,_reload4
02CB 8529A3    1291            mov     (_TMR4RL >> 8),(_reload4 + 1)
02CE           1292   ;        Tcom.h:181: SFRPAGE = 0x00;
02CE 75A700    1293            mov     _SFRPAGE,#0x00
02D1           1294   ;        Tcom.h:182: printf("Set timer4 reload to: %d\r\n", reload4);
02D1 C028      1295            push    _reload4
02D3 C029      1296            push    (_reload4 + 1)
02D5 7468      1297            mov     a,#__str_5
02D7 C0E0      1298            push    acc
02D9 74C9      1299            mov     a,#(__str_5 >> 8)
02DB C0E0      1300            push    acc
02DD 7480      1301            mov     a,#0x80
02DF C0E0      1302            push    acc
02E1 120100    1303            lcall   _printf
02E4 E581      1304            mov     a,sp
02E6 24FB      1305            add     a,#0xfb
02E8 F581      1306            mov     sp,a
02EA 22        1307            ret
02EB           1308   ;------------------------------------------------------------
02EB           1309   ;Allocation info for local variables in function 'PWMoff'
02EB           1310   ;------------------------------------------------------------
02EB           1311   ;------------------------------------------------------------
02EB           1312   ;        Tcom.h:200: void PWMoff() {
02EB           1313   ;        -----------------------------------------
02EB           1314   ;         function PWMoff
02EB           1315   ;        -----------------------------------------
02EB           1316   _PWMoff:
02EB           1317   ;        Tcom.h:201: OUT0 = 0;
02EB C2A0      1318            clr     _P2_0
02ED           1319   ;        Tcom.h:202: OUT1 = 0;
02ED C296      1320            clr     _P1_6
02EF           1321   ;        Tcom.h:203: TR2 = 0;
02EF C2CA      1322            clr     _TR2
02F1 22        1323            ret
02F2           1324   ;------------------------------------------------------------
02F2           1325   ;Allocation info for local variables in function 'PWMon'
02F2           1326   ;------------------------------------------------------------
02F2           1327   ;------------------------------------------------------------
02F2           1328   ;        Tcom.h:206: void PWMon() {
02F2           1329   ;        -----------------------------------------
02F2           1330   ;         function PWMon
02F2           1331   ;        -----------------------------------------
02F2           1332   _PWMon:
02F2           1333   ;        Tcom.h:207: TR2 = 1;
02F2 D2CA      1334            setb    _TR2
02F4 22        1335            ret
02F5           1336   ;------------------------------------------------------------
02F5           1337   ;Allocation info for local variables in function 'getCommand'
02F5           1338   ;------------------------------------------------------------
02F5           1339   ;input                     Allocated to registers r2 r3 r4 
02F5           1340   ;------------------------------------------------------------
02F5           1341   ;        Tcom.h:210: void getCommand(char* input) {
02F5           1342   ;        -----------------------------------------
02F5           1343   ;         function getCommand
02F5           1344   ;        -----------------------------------------
02F5           1345   _getCommand:
02F5           1346   ;        Tcom.h:212: if (input[0] == '-') {
02F5 AA82      1347            mov     r2,dpl
02F7 AB83      1348            mov     r3,dph
02F9 ACF0      1349            mov     r4,b
02FB 120100    1350            lcall   __gptrget
02FE FD        1351            mov     r5,a
02FF BD2DE8    1352            cjne    r5,#0x2D,L019031?
0302 8001      1353            sjmp    L019032?
0304           1354   L019031?:
0304 020100    1355            ljmp    L019016?
0307           1356   L019032?:
0307           1357   ;        Tcom.h:213: switch(input[1]) {
0307 7401      1358            mov     a,#0x01
0309 2A        1359            add     a,r2
030A FD        1360            mov     r5,a
030B E4        1361            clr     a
030C 3B        1362            addc    a,r3
030D FE        1363            mov     r6,a
030E 8C07      1364            mov     ar7,r4
0310 8D82      1365            mov     dpl,r5
0312 8E83      1366            mov     dph,r6
0314 8FF0      1367            mov     b,r7
0316 120100    1368            lcall   __gptrget
0319 FD        1369            mov     r5,a
031A BD2FA8    1370            cjne    r5,#0x2F,L019033?
031D 8001      1371            sjmp    L019001?
031F           1372   L019033?:
031F BD6628    1373            cjne    r5,#0x66,L019034?
0322 8001      1374            sjmp    L019002?
0324           1375   L019034?:
0324 BD68A8    1376            cjne    r5,#0x68,L019035?
0327 8001      1377            sjmp    L019003?
0329           1378   L019035?:
0329 BD6928    1379            cjne    r5,#0x69,L019036?
032C 8001      1380            sjmp    L019004?
032E           1381   L019036?:
032E BD6FA8    1382            cjne    r5,#0x6F,L019037?
0331 8001      1383            sjmp    L019005?
0333           1384   L019037?:
0333 BD7228    1385            cjne    r5,#0x72,L019038?
0336 8001      1386            sjmp    L019008?
0338           1387   L019038?:
0338 BD73A8    1388            cjne    r5,#0x73,L019039?
033B 020100    1389            ljmp    L019009?
033E           1390   L019039?:
033E BD7428    1391            cjne    r5,#0x74,L019040?
0341 020100    1392            ljmp    L019012?
0344           1393   L019040?:
0344 020100    1394            ljmp    L019013?
0347           1395   ;        Tcom.h:214: case '/':
0347           1396   L019001?:
0347           1397   ;        Tcom.h:215: sendCommandS(input);
0347 8A82      1398            mov     dpl,r2
0349 8B83      1399            mov     dph,r3
034B 8CF0      1400            mov     b,r4
034D 120100    1401            lcall   _sendCommandS
0350           1402   ;        Tcom.h:216: break;
0350 020100    1403            ljmp    L019017?
0353           1404   ;        Tcom.h:217: case 'f':
0353           1405   L019002?:
0353           1406   ;        Tcom.h:218: setFrequency(input);
0353 8A82      1407            mov     dpl,r2
0355 8B83      1408            mov     dph,r3
0357 8CF0      1409            mov     b,r4
0359 120100    1410            lcall   _setFrequency
035C           1411   ;        Tcom.h:219: break;
035C 020100    1412            ljmp    L019017?
035F           1413   ;        Tcom.h:220: case 'h':
035F           1414   L019003?:
035F           1415   ;        Tcom.h:221: printf("Help Menu\r\nList of Commands: \r\n-cw [duty value]\r\n-ccw [duty value]\r\n-f [freq value]\r\n-r [reload value]\r\n-o\r\n-s\r\n-i\r\n\n");
035F 7428      1416            mov     a,#__str_6
0361 C0E0      1417            push    acc
0363 74CF      1418            mov     a,#(__str_6 >> 8)
0365 C0E0      1419            push    acc
0367 7480      1420            mov     a,#0x80
0369 C0E0      1421            push    acc
036B 120100    1422            lcall   _printf
036E 1581      1423            dec     sp
0370 1581      1424            dec     sp
0372 1581      1425            dec     sp
0374           1426   ;        Tcom.h:222: break;
0374 020100    1427            ljmp    L019017?
0377           1428   ;        Tcom.h:223: case 'i':
0377           1429   L019004?:
0377           1430   ;        Tcom.h:224: printf("Reload: %u, Freq: %d \r\n", reload4, freq4);
0377 C068      1431            push    _freq4
0379 C069      1432            push    (_freq4 + 1)
037B C028      1433            push    _reload4
037D C029      1434            push    (_reload4 + 1)
037F 7468      1435            mov     a,#__str_7
0381 C0E0      1436            push    acc
0383 74CF      1437            mov     a,#(__str_7 >> 8)
0385 C0E0      1438            push    acc
0387 7480      1439            mov     a,#0x80
0389 C0E0      1440            push    acc
038B 120100    1441            lcall   _printf
038E E581      1442            mov     a,sp
0390 24F9      1443            add     a,#0xf9
0392 F581      1444            mov     sp,a
0394           1445   ;        Tcom.h:225: break;
0394 020100    1446            ljmp    L019017?
0397           1447   ;        Tcom.h:226: case 'o':
0397           1448   L019005?:
0397           1449   ;        Tcom.h:227: if (input[2] == 0)
0397 7402      1450            mov     a,#0x02
0399 2A        1451            add     a,r2
039A FD        1452            mov     r5,a
039B E4        1453            clr     a
039C 3B        1454            addc    a,r3
039D FE        1455            mov     r6,a
039E 8C07      1456            mov     ar7,r4
03A0 8D82      1457            mov     dpl,r5
03A2 8E83      1458            mov     dph,r6
03A4 8FF0      1459            mov     b,r7
03A6 120100    1460            lcall   __gptrget
03A9 7001      1461            jnz     L019017?
03AB           1462   ;        Tcom.h:228: PWMoff();
03AB 120100    1463            lcall   _PWMoff
03AE           1464   ;        Tcom.h:229: break;      
03AE           1465   ;        Tcom.h:230: case 'r':
03AE 8001      1466            sjmp    L019017?
03B0           1467   L019008?:
03B0           1468   ;        Tcom.h:231: setReload(input);
03B0 8A82      1469            mov     dpl,r2
03B2 8B83      1470            mov     dph,r3
03B4 8CF0      1471            mov     b,r4
03B6 120100    1472            lcall   _setReload
03B9           1473   ;        Tcom.h:232: break;
03B9           1474   ;        Tcom.h:233: case 's':
03B9 8001      1475            sjmp    L019017?
03BB           1476   L019009?:
03BB           1477   ;        Tcom.h:234: if (input[2] == 0)
03BB 7402      1478            mov     a,#0x02
03BD 2A        1479            add     a,r2
03BE FD        1480            mov     r5,a
03BF E4        1481            clr     a
03C0 3B        1482            addc    a,r3
03C1 FE        1483            mov     r6,a
03C2 8C07      1484            mov     ar7,r4
03C4 8D82      1485            mov     dpl,r5
03C6 8E83      1486            mov     dph,r6
03C8 8FF0      1487            mov     b,r7
03CA 120100    1488            lcall   __gptrget
03CD 7001      1489            jnz     L019017?
03CF           1490   ;        Tcom.h:235: PWMon();
03CF 120100    1491            lcall   _PWMon
03D2           1492   ;        Tcom.h:236: break;
03D2           1493   ;        Tcom.h:237: case 't':
03D2 8001      1494            sjmp    L019017?
03D4           1495   L019012?:
03D4           1496   ;        Tcom.h:238: putchar1(0b_1010_1010);
03D4 7582AA    1497            mov     dpl,#0xAA
03D7 120100    1498            lcall   _putchar1
03DA           1499   ;        Tcom.h:239: break;
03DA           1500   ;        Tcom.h:240: default:
03DA 8001      1501            sjmp    L019017?
03DC           1502   L019013?:
03DC           1503   ;        Tcom.h:241: printf("\"%s\" invalid command\r\n", input);
03DC C002      1504            push    ar2
03DE C003      1505            push    ar3
03E0 C004      1506            push    ar4
03E2 74A8      1507            mov     a,#__str_8
03E4 C0E0      1508            push    acc
03E6 74CF      1509            mov     a,#(__str_8 >> 8)
03E8 C0E0      1510            push    acc
03EA 7480      1511            mov     a,#0x80
03EC C0E0      1512            push    acc
03EE 120100    1513            lcall   _printf
03F1 E581      1514            mov     a,sp
03F3 24FA      1515            add     a,#0xfa
03F5 F581      1516            mov     sp,a
03F7           1517   ;        Tcom.h:243: }
03F7 8001      1518            sjmp    L019017?
03F9           1519   L019016?:
03F9           1520   ;        Tcom.h:245: printf("Not Valid input\r\n");
03F9 74E8      1521            mov     a,#__str_9
03FB C0E0      1522            push    acc
03FD 74CF      1523            mov     a,#(__str_9 >> 8)
03FF C0E0      1524            push    acc
0401 7480      1525            mov     a,#0x80
0403 C0E0      1526            push    acc
0405 120100    1527            lcall   _printf
0408 1581      1528            dec     sp
040A 1581      1529            dec     sp
040C 1581      1530            dec     sp
040E           1531   L019017?:
040E           1532   ;        Tcom.h:247: return;
040E 22        1533            ret
040F           1534   ;------------------------------------------------------------
040F           1535   ;Allocation info for local variables in function 'Tcom_init'
040F           1536   ;------------------------------------------------------------
040F           1537   ;baudrate                  Allocated to registers r2 r3 r4 r5 
040F           1538   ;------------------------------------------------------------
040F           1539   ;        Tcom.h:250: void Tcom_init(unsigned long baudrate) {
040F           1540   ;        -----------------------------------------
040F           1541   ;         function Tcom_init
040F           1542   ;        -----------------------------------------
040F           1543   _Tcom_init:
040F AA82      1544            mov     r2,dpl
0411 AB83      1545            mov     r3,dph
0413 ACF0      1546            mov     r4,b
0415 FD        1547            mov     r5,a
0416           1548   ;        Tcom.h:256: Timer4_init(); //used for frequency-resolution interrupts
0416 C002      1549            push    ar2
0418 C003      1550            push    ar3
041A C004      1551            push    ar4
041C C005      1552            push    ar5
041E 120100    1553            lcall   _Timer4_init
0421 D005      1554            pop     ar5
0423 D004      1555            pop     ar4
0425 D003      1556            pop     ar3
0427 D002      1557            pop     ar2
0429           1558   ;        Tcom.h:259: UART1_Init(baudrate);
0429 8A82      1559            mov     dpl,r2
042B 8B83      1560            mov     dph,r3
042D 8CF0      1561            mov     b,r4
042F ED        1562            mov     a,r5
0430 020100    1563            ljmp    _UART1_Init
0433           1564   ;------------------------------------------------------------
0433           1565   ;Allocation info for local variables in function 'Timer2us'
0433           1566   ;------------------------------------------------------------
0433           1567   ;us                        Allocated to registers r2 
0433           1568   ;i                         Allocated to registers r3 
0433           1569   ;------------------------------------------------------------
0433           1570   ;        EFM8core.h:9: void Timer2us(unsigned char us)
0433           1571   ;        -----------------------------------------
0433           1572   ;         function Timer2us
0433           1573   ;        -----------------------------------------
0433           1574   _Timer2us:
0433 AA82      1575            mov     r2,dpl
0435           1576   ;        EFM8core.h:13: SFRPAGE=0x00;
0435 75A700    1577            mov     _SFRPAGE,#0x00
0438           1578   ;        EFM8core.h:15: CKCON0|=0b_0001_0000;
0438 438E10    1579            orl     _CKCON0,#0x10
043B           1580   ;        EFM8core.h:17: TMR2RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
043B 75CAB8    1581            mov     _TMR2RL,#0xB8
043E 75CBFF    1582            mov     (_TMR2RL >> 8),#0xFF
0441           1583   ;        EFM8core.h:18: TMR2 = TMR2RL;                 // Initialize Timer3 for first overflow
0441 85CACE    1584            mov     _TMR2,_TMR2RL
0444 85CBCF    1585            mov     (_TMR2 >> 8),(_TMR2RL >> 8)
0447           1586   ;        EFM8core.h:20: TMR2CN0 = 0x04;                 // Start Timer3 and clear overflow flag
0447 75C804    1587            mov     _TMR2CN0,#0x04
044A           1588   ;        EFM8core.h:22: for (i = 0; i < us; i++)       // Count <us> overflows
044A 7B00      1589            mov     r3,#0x00
044C           1590   L021004?:
044C C3        1591            clr     c
044D EB        1592            mov     a,r3
044E 9A        1593            subb    a,r2
044F 5001      1594            jnc     L021007?
0451           1595   ;        EFM8core.h:24: while (!(TMR2CN0 & 0x80));  // Wait for overflow
0451           1596   L021001?:
0451 E5C8      1597            mov     a,_TMR2CN0
0453 30E7A8    1598            jnb     acc.7,L021001?
0456           1599   ;        EFM8core.h:26: TMR2CN0 &= ~(0x80);         // Clear overflow indicator
0456 53C87F    1600            anl     _TMR2CN0,#0x7F
0459           1601   ;        EFM8core.h:22: for (i = 0; i < us; i++)       // Count <us> overflows
0459 0B        1602            inc     r3
045A 8001      1603            sjmp    L021004?
045C           1604   L021007?:
045C           1605   ;        EFM8core.h:29: TMR2CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
045C 75C800    1606            mov     _TMR2CN0,#0x00
045F 22        1607            ret
0460           1608   ;------------------------------------------------------------
0460           1609   ;Allocation info for local variables in function 'waitms'
0460           1610   ;------------------------------------------------------------
0460           1611   ;ms                        Allocated to registers r2 r3 
0460           1612   ;j                         Allocated to registers r2 r3 
0460           1613   ;------------------------------------------------------------
0460           1614   ;        EFM8core.h:32: void waitms (unsigned int ms)
0460           1615   ;        -----------------------------------------
0460           1616   ;         function waitms
0460           1617   ;        -----------------------------------------
0460           1618   _waitms:
0460 AA82      1619            mov     r2,dpl
0462 AB83      1620            mov     r3,dph
0464           1621   ;        EFM8core.h:35: for(j=ms; j!=0; j--)
0464           1622   L022001?:
0464 BA0028    1623            cjne    r2,#0x00,L022010?
0467 BB0028    1624            cjne    r3,#0x00,L022010?
046A 22        1625            ret
046B           1626   L022010?:
046B           1627   ;        EFM8core.h:37: Timer2us(249);
046B 7582F9    1628            mov     dpl,#0xF9
046E C002      1629            push    ar2
0470 C003      1630            push    ar3
0472 120100    1631            lcall   _Timer2us
0475           1632   ;        EFM8core.h:38: Timer2us(249);
0475 7582F9    1633            mov     dpl,#0xF9
0478 120100    1634            lcall   _Timer2us
047B           1635   ;        EFM8core.h:39: Timer2us(249);
047B 7582F9    1636            mov     dpl,#0xF9
047E 120100    1637            lcall   _Timer2us
0481           1638   ;        EFM8core.h:40: Timer2us(250);
0481 7582FA    1639            mov     dpl,#0xFA
0484 120100    1640            lcall   _Timer2us
0487 D003      1641            pop     ar3
0489 D002      1642            pop     ar2
048B           1643   ;        EFM8core.h:35: for(j=ms; j!=0; j--)
048B 1A        1644            dec     r2
048C BAFF68    1645            cjne    r2,#0xff,L022011?
048F 1B        1646            dec     r3
0490           1647   L022011?:
0490 8001      1648            sjmp    L022001?
0492           1649   ;------------------------------------------------------------
0492           1650   ;Allocation info for local variables in function 'LCD_pulse'
0492           1651   ;------------------------------------------------------------
0492           1652   ;------------------------------------------------------------
0492           1653   ;        EFM8LCDlib.h:15: void LCD_pulse (void)
0492           1654   ;        -----------------------------------------
0492           1655   ;         function LCD_pulse
0492           1656   ;        -----------------------------------------
0492           1657   _LCD_pulse:
0492           1658   ;        EFM8LCDlib.h:17: LCD_E=1;
0492 D2A5      1659            setb    _P2_5
0494           1660   ;        EFM8LCDlib.h:18: Timer2us(40);
0494 758228    1661            mov     dpl,#0x28
0497 120100    1662            lcall   _Timer2us
049A           1663   ;        EFM8LCDlib.h:19: LCD_E=0;
049A C2A5      1664            clr     _P2_5
049C 22        1665            ret
049D           1666   ;------------------------------------------------------------
049D           1667   ;Allocation info for local variables in function 'LCD_byte'
049D           1668   ;------------------------------------------------------------
049D           1669   ;x                         Allocated to registers r2 
049D           1670   ;------------------------------------------------------------
049D           1671   ;        EFM8LCDlib.h:22: void LCD_byte (unsigned char x)
049D           1672   ;        -----------------------------------------
049D           1673   ;         function LCD_byte
049D           1674   ;        -----------------------------------------
049D           1675   _LCD_byte:
049D AA82      1676            mov     r2,dpl
049F           1677   ;        EFM8LCDlib.h:25: ACC=x; //Send high nible
049F 8AE0      1678            mov     _ACC,r2
04A1           1679   ;        EFM8LCDlib.h:26: LCD_D7=ACC_7;
04A1 A2E7      1680            mov     c,_ACC_7
04A3 92A1      1681            mov     _P2_1,c
04A5           1682   ;        EFM8LCDlib.h:27: LCD_D6=ACC_6;
04A5 A2E6      1683            mov     c,_ACC_6
04A7 92A2      1684            mov     _P2_2,c
04A9           1685   ;        EFM8LCDlib.h:28: LCD_D5=ACC_5;
04A9 A2E5      1686            mov     c,_ACC_5
04AB 92A3      1687            mov     _P2_3,c
04AD           1688   ;        EFM8LCDlib.h:29: LCD_D4=ACC_4;
04AD A2E4      1689            mov     c,_ACC_4
04AF 92A4      1690            mov     _P2_4,c
04B1           1691   ;        EFM8LCDlib.h:30: LCD_pulse();
04B1 C002      1692            push    ar2
04B3 120100    1693            lcall   _LCD_pulse
04B6           1694   ;        EFM8LCDlib.h:31: Timer2us(40);
04B6 758228    1695            mov     dpl,#0x28
04B9 120100    1696            lcall   _Timer2us
04BC D002      1697            pop     ar2
04BE           1698   ;        EFM8LCDlib.h:32: ACC=x; //Send low nible
04BE 8AE0      1699            mov     _ACC,r2
04C0           1700   ;        EFM8LCDlib.h:33: LCD_D7=ACC_3;
04C0 A2E3      1701            mov     c,_ACC_3
04C2 92A1      1702            mov     _P2_1,c
04C4           1703   ;        EFM8LCDlib.h:34: LCD_D6=ACC_2;
04C4 A2E2      1704            mov     c,_ACC_2
04C6 92A2      1705            mov     _P2_2,c
04C8           1706   ;        EFM8LCDlib.h:35: LCD_D5=ACC_1;
04C8 A2E1      1707            mov     c,_ACC_1
04CA 92A3      1708            mov     _P2_3,c
04CC           1709   ;        EFM8LCDlib.h:36: LCD_D4=ACC_0;
04CC A2E0      1710            mov     c,_ACC_0
04CE 92A4      1711            mov     _P2_4,c
04D0           1712   ;        EFM8LCDlib.h:37: LCD_pulse();
04D0 020100    1713            ljmp    _LCD_pulse
04D3           1714   ;------------------------------------------------------------
04D3           1715   ;Allocation info for local variables in function 'WriteData'
04D3           1716   ;------------------------------------------------------------
04D3           1717   ;x                         Allocated to registers r2 
04D3           1718   ;------------------------------------------------------------
04D3           1719   ;        EFM8LCDlib.h:40: void WriteData (unsigned char x)
04D3           1720   ;        -----------------------------------------
04D3           1721   ;         function WriteData
04D3           1722   ;        -----------------------------------------
04D3           1723   _WriteData:
04D3 AA82      1724            mov     r2,dpl
04D5           1725   ;        EFM8LCDlib.h:42: LCD_RS=1;
04D5 D2A6      1726            setb    _P2_6
04D7           1727   ;        EFM8LCDlib.h:43: LCD_byte(x);
04D7 8A82      1728            mov     dpl,r2
04D9 120100    1729            lcall   _LCD_byte
04DC           1730   ;        EFM8LCDlib.h:44: waitms(2);
04DC 900002    1731            mov     dptr,#0x0002
04DF 020100    1732            ljmp    _waitms
04E2           1733   ;------------------------------------------------------------
04E2           1734   ;Allocation info for local variables in function 'WriteCommand'
04E2           1735   ;------------------------------------------------------------
04E2           1736   ;x                         Allocated to registers r2 
04E2           1737   ;------------------------------------------------------------
04E2           1738   ;        EFM8LCDlib.h:47: void WriteCommand (unsigned char x)
04E2           1739   ;        -----------------------------------------
04E2           1740   ;         function WriteCommand
04E2           1741   ;        -----------------------------------------
04E2           1742   _WriteCommand:
04E2 AA82      1743            mov     r2,dpl
04E4           1744   ;        EFM8LCDlib.h:49: LCD_RS=0;
04E4 C2A6      1745            clr     _P2_6
04E6           1746   ;        EFM8LCDlib.h:50: LCD_byte(x);
04E6 8A82      1747            mov     dpl,r2
04E8 120100    1748            lcall   _LCD_byte
04EB           1749   ;        EFM8LCDlib.h:51: waitms(5);
04EB 900005    1750            mov     dptr,#0x0005
04EE 020100    1751            ljmp    _waitms
04F1           1752   ;------------------------------------------------------------
04F1           1753   ;Allocation info for local variables in function 'LCD_4BIT'
04F1           1754   ;------------------------------------------------------------
04F1           1755   ;------------------------------------------------------------
04F1           1756   ;        EFM8LCDlib.h:54: void LCD_4BIT (void)
04F1           1757   ;        -----------------------------------------
04F1           1758   ;         function LCD_4BIT
04F1           1759   ;        -----------------------------------------
04F1           1760   _LCD_4BIT:
04F1           1761   ;        EFM8LCDlib.h:56: LCD_E=0; // Resting state of LCD's enable is zero
04F1 C2A5      1762            clr     _P2_5
04F3           1763   ;        EFM8LCDlib.h:58: waitms(20);
04F3 900014    1764            mov     dptr,#0x0014
04F6 120100    1765            lcall   _waitms
04F9           1766   ;        EFM8LCDlib.h:60: WriteCommand(0x33);
04F9 758233    1767            mov     dpl,#0x33
04FC 120100    1768            lcall   _WriteCommand
04FF           1769   ;        EFM8LCDlib.h:61: WriteCommand(0x33);
04FF 758233    1770            mov     dpl,#0x33
0502 120100    1771            lcall   _WriteCommand
0505           1772   ;        EFM8LCDlib.h:62: WriteCommand(0x32); // Change to 4-bit mode
0505 758232    1773            mov     dpl,#0x32
0508 120100    1774            lcall   _WriteCommand
050B           1775   ;        EFM8LCDlib.h:65: WriteCommand(0x28);
050B 758228    1776            mov     dpl,#0x28
050E 120100    1777            lcall   _WriteCommand
0511           1778   ;        EFM8LCDlib.h:66: WriteCommand(0x0c);
0511 75820C    1779            mov     dpl,#0x0C
0514 120100    1780            lcall   _WriteCommand
0517           1781   ;        EFM8LCDlib.h:67: WriteCommand(0x01); // Clear screen command (takes some time)
0517 758201    1782            mov     dpl,#0x01
051A 120100    1783            lcall   _WriteCommand
051D           1784   ;        EFM8LCDlib.h:68: waitms(20); // Wait for clear screen command to finsih.
051D 900014    1785            mov     dptr,#0x0014
0520 020100    1786            ljmp    _waitms
0523           1787   ;------------------------------------------------------------
0523           1788   ;Allocation info for local variables in function 'LCDprint'
0523           1789   ;------------------------------------------------------------
0523           1790   ;line                      Allocated with name '_LCDprint_PARM_2'
0523           1791   ;string                    Allocated to registers r2 r3 r4 
0523           1792   ;j                         Allocated to registers r5 r6 
0523           1793   ;------------------------------------------------------------
0523           1794   ;        EFM8LCDlib.h:71: void LCDprint(char * string, unsigned char line, bit clear)
0523           1795   ;        -----------------------------------------
0523           1796   ;         function LCDprint
0523           1797   ;        -----------------------------------------
0523           1798   _LCDprint:
0523 AA82      1799            mov     r2,dpl
0525 AB83      1800            mov     r3,dph
0527 ACF0      1801            mov     r4,b
0529           1802   ;        EFM8LCDlib.h:75: WriteCommand(line==2?0xc0:0x80);
0529 7402      1803            mov     a,#0x02
052B B598A8    1804            cjne    a,_LCDprint_PARM_2,L028013?
052E 7DC0      1805            mov     r5,#0xC0
0530 8001      1806            sjmp    L028014?
0532           1807   L028013?:
0532 7D80      1808            mov     r5,#0x80
0534           1809   L028014?:
0534 8D82      1810            mov     dpl,r5
0536 C002      1811            push    ar2
0538 C003      1812            push    ar3
053A C004      1813            push    ar4
053C 120100    1814            lcall   _WriteCommand
053F           1815   ;        EFM8LCDlib.h:76: waitms(5);
053F 900005    1816            mov     dptr,#0x0005
0542 120100    1817            lcall   _waitms
0545 D004      1818            pop     ar4
0547 D003      1819            pop     ar3
0549 D002      1820            pop     ar2
054B           1821   ;        EFM8LCDlib.h:77: for(j=0; string[j]!=0; j++)    WriteData(string[j]);// Write the message
054B 7D00      1822            mov     r5,#0x00
054D 7E00      1823            mov     r6,#0x00
054F           1824   L028003?:
054F ED        1825            mov     a,r5
0550 2A        1826            add     a,r2
0551 FF        1827            mov     r7,a
0552 EE        1828            mov     a,r6
0553 3B        1829            addc    a,r3
0554 F8        1830            mov     r0,a
0555 8C01      1831            mov     ar1,r4
0557 8F82      1832            mov     dpl,r7
0559 8883      1833            mov     dph,r0
055B 89F0      1834            mov     b,r1
055D 120100    1835            lcall   __gptrget
0560 FF        1836            mov     r7,a
0561 6001      1837            jz      L028006?
0563 8F82      1838            mov     dpl,r7
0565 C002      1839            push    ar2
0567 C003      1840            push    ar3
0569 C004      1841            push    ar4
056B C005      1842            push    ar5
056D C006      1843            push    ar6
056F 120100    1844            lcall   _WriteData
0572 D006      1845            pop     ar6
0574 D005      1846            pop     ar5
0576 D004      1847            pop     ar4
0578 D003      1848            pop     ar3
057A D002      1849            pop     ar2
057C 0D        1850            inc     r5
057D BD0028    1851            cjne    r5,#0x00,L028003?
0580 0E        1852            inc     r6
0581 8001      1853            sjmp    L028003?
0583           1854   L028006?:
0583           1855   ;        EFM8LCDlib.h:78: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0583 30F8A8    1856            jnb     _LCDprint_PARM_3,L028011?
0586 8D02      1857            mov     ar2,r5
0588 8E03      1858            mov     ar3,r6
058A           1859   L028007?:
058A C3        1860            clr     c
058B EA        1861            mov     a,r2
058C 9410      1862            subb    a,#0x10
058E EB        1863            mov     a,r3
058F 6480      1864            xrl     a,#0x80
0591 9480      1865            subb    a,#0x80
0593 5001      1866            jnc     L028011?
0595 758220    1867            mov     dpl,#0x20
0598 C002      1868            push    ar2
059A C003      1869            push    ar3
059C 120100    1870            lcall   _WriteData
059F D003      1871            pop     ar3
05A1 D002      1872            pop     ar2
05A3 0A        1873            inc     r2
05A4 BA00E8    1874            cjne    r2,#0x00,L028007?
05A7 0B        1875            inc     r3
05A8 8001      1876            sjmp    L028007?
05AA           1877   L028011?:
05AA 22        1878            ret
05AB           1879   ;------------------------------------------------------------
05AB           1880   ;Allocation info for local variables in function 'I2C_write'
05AB           1881   ;------------------------------------------------------------
05AB           1882   ;output_data               Allocated to registers 
05AB           1883   ;------------------------------------------------------------
05AB           1884   ;        Nunchuck_reader.h:83: void I2C_write (unsigned char output_data)
05AB           1885   ;        -----------------------------------------
05AB           1886   ;         function I2C_write
05AB           1887   ;        -----------------------------------------
05AB           1888   _I2C_write:
05AB 8582C2    1889            mov     _SMB0DAT,dpl
05AE           1890   ;        Nunchuck_reader.h:87: SI = 0;
05AE C2C0      1891            clr     _SI
05B0           1892   ;        Nunchuck_reader.h:88: while (!SI); // Wait until done with send
05B0           1893   L029001?:
05B0 30C028    1894            jnb     _SI,L029001?
05B3 22        1895            ret
05B4           1896   ;------------------------------------------------------------
05B4           1897   ;Allocation info for local variables in function 'I2C_read'
05B4           1898   ;------------------------------------------------------------
05B4           1899   ;input_data                Allocated to registers 
05B4           1900   ;------------------------------------------------------------
05B4           1901   ;        Nunchuck_reader.h:91: unsigned char I2C_read (void)
05B4           1902   ;        -----------------------------------------
05B4           1903   ;         function I2C_read
05B4           1904   ;        -----------------------------------------
05B4           1905   _I2C_read:
05B4           1906   ;        Nunchuck_reader.h:94: SI = 0;
05B4 C2C0      1907            clr     _SI
05B6           1908   ;        Nunchuck_reader.h:95: while (!SI); // Wait until we have data to read
05B6           1909   L030001?:
05B6 30C068    1910            jnb     _SI,L030001?
05B9           1911   ;        Nunchuck_reader.h:96: input_data = SMB0DAT; // Read the data
05B9 85C282    1912            mov     dpl,_SMB0DAT
05BC           1913   ;        Nunchuck_reader.h:98: return input_data;
05BC 22        1914            ret
05BD           1915   ;------------------------------------------------------------
05BD           1916   ;Allocation info for local variables in function 'I2C_start'
05BD           1917   ;------------------------------------------------------------
05BD           1918   ;------------------------------------------------------------
05BD           1919   ;        Nunchuck_reader.h:101: void I2C_start (void)
05BD           1920   ;        -----------------------------------------
05BD           1921   ;         function I2C_start
05BD           1922   ;        -----------------------------------------
05BD           1923   _I2C_start:
05BD           1924   ;        Nunchuck_reader.h:103: ACK = 1;
05BD D2C1      1925            setb    _ACK
05BF           1926   ;        Nunchuck_reader.h:104: STA = 1;     // Send I2C start
05BF D2C5      1927            setb    _STA
05C1           1928   ;        Nunchuck_reader.h:105: STO = 0;
05C1 C2C4      1929            clr     _STO
05C3           1930   ;        Nunchuck_reader.h:106: SI = 0;
05C3 C2C0      1931            clr     _SI
05C5           1932   ;        Nunchuck_reader.h:107: while (!SI); // Wait until start sent
05C5           1933   L031001?:
05C5 30C0A8    1934            jnb     _SI,L031001?
05C8           1935   ;        Nunchuck_reader.h:108: STA = 0;     // Reset I2C start
05C8 C2C5      1936            clr     _STA
05CA 22        1937            ret
05CB           1938   ;------------------------------------------------------------
05CB           1939   ;Allocation info for local variables in function 'I2C_stop'
05CB           1940   ;------------------------------------------------------------
05CB           1941   ;------------------------------------------------------------
05CB           1942   ;        Nunchuck_reader.h:111: void I2C_stop(void)
05CB           1943   ;        -----------------------------------------
05CB           1944   ;         function I2C_stop
05CB           1945   ;        -----------------------------------------
05CB           1946   _I2C_stop:
05CB           1947   ;        Nunchuck_reader.h:113: STO = 1;         // Perform I2C stop
05CB D2C4      1948            setb    _STO
05CD           1949   ;        Nunchuck_reader.h:114: SI = 0;  // Clear SI
05CD C2C0      1950            clr     _SI
05CF 22        1951            ret
05D0           1952   ;------------------------------------------------------------
05D0           1953   ;Allocation info for local variables in function 'nunchuck_init'
05D0           1954   ;------------------------------------------------------------
05D0           1955   ;i                         Allocated to registers r2 
05D0           1956   ;buf                       Allocated with name '_nunchuck_init_buf_1_134'
05D0           1957   ;sloc0                     Allocated with name '_nunchuck_init_sloc0_1_0'
05D0           1958   ;sloc1                     Allocated with name '_nunchuck_init_sloc1_1_0'
05D0           1959   ;sloc2                     Allocated with name '_nunchuck_init_sloc2_1_0'
05D0           1960   ;------------------------------------------------------------
05D0           1961   ;        Nunchuck_reader.h:118: void nunchuck_init(bit print_extension_type)
05D0           1962   ;        -----------------------------------------
05D0           1963   ;         function nunchuck_init
05D0           1964   ;        -----------------------------------------
05D0           1965   _nunchuck_init:
05D0           1966   ;        Nunchuck_reader.h:124: I2C_start();
05D0 120100    1967            lcall   _I2C_start
05D3           1968   ;        Nunchuck_reader.h:125: I2C_write(0xA4);
05D3 7582A4    1969            mov     dpl,#0xA4
05D6 120100    1970            lcall   _I2C_write
05D9           1971   ;        Nunchuck_reader.h:126: I2C_write(0xF0);
05D9 7582F0    1972            mov     dpl,#0xF0
05DC 120100    1973            lcall   _I2C_write
05DF           1974   ;        Nunchuck_reader.h:127: I2C_write(0x55);
05DF 758255    1975            mov     dpl,#0x55
05E2 120100    1976            lcall   _I2C_write
05E5           1977   ;        Nunchuck_reader.h:128: I2C_stop();
05E5 120100    1978            lcall   _I2C_stop
05E8           1979   ;        Nunchuck_reader.h:129: waitms(1);
05E8 900001    1980            mov     dptr,#0x0001
05EB 120100    1981            lcall   _waitms
05EE           1982   ;        Nunchuck_reader.h:131: I2C_start();
05EE 120100    1983            lcall   _I2C_start
05F1           1984   ;        Nunchuck_reader.h:132: I2C_write(0xA4);
05F1 7582A4    1985            mov     dpl,#0xA4
05F4 120100    1986            lcall   _I2C_write
05F7           1987   ;        Nunchuck_reader.h:133: I2C_write(0xFB);
05F7 7582FB    1988            mov     dpl,#0xFB
05FA 120100    1989            lcall   _I2C_write
05FD           1990   ;        Nunchuck_reader.h:134: I2C_write(0x00);
05FD 758200    1991            mov     dpl,#0x00
0600 120100    1992            lcall   _I2C_write
0603           1993   ;        Nunchuck_reader.h:135: I2C_stop();
0603 120100    1994            lcall   _I2C_stop
0606           1995   ;        Nunchuck_reader.h:136: waitms(1);
0606 900001    1996            mov     dptr,#0x0001
0609 120100    1997            lcall   _waitms
060C           1998   ;        Nunchuck_reader.h:140: I2C_start();
060C 120100    1999            lcall   _I2C_start
060F           2000   ;        Nunchuck_reader.h:141: I2C_write(0xA4);
060F 7582A4    2001            mov     dpl,#0xA4
0612 120100    2002            lcall   _I2C_write
0615           2003   ;        Nunchuck_reader.h:142: I2C_write(0xFA); // extension type register
0615 7582FA    2004            mov     dpl,#0xFA
0618 120100    2005            lcall   _I2C_write
061B           2006   ;        Nunchuck_reader.h:143: I2C_stop();
061B 120100    2007            lcall   _I2C_stop
061E           2008   ;        Nunchuck_reader.h:144: waitms(3); // 3 ms required to complete acquisition
061E 900003    2009            mov     dptr,#0x0003
0621 120100    2010            lcall   _waitms
0624           2011   ;        Nunchuck_reader.h:146: I2C_start();
0624 120100    2012            lcall   _I2C_start
0627           2013   ;        Nunchuck_reader.h:147: I2C_write(0xA5);
0627 7582A5    2014            mov     dpl,#0xA5
062A 120100    2015            lcall   _I2C_write
062D           2016   ;        Nunchuck_reader.h:150: for(i=0; i<CHARS_PER_LINE; i++)
062D 7A00      2017            mov     r2,#0x00
062F           2018   L033003?:
062F BA1028    2019            cjne    r2,#0x10,L033013?
0632           2020   L033013?:
0632 5001      2021            jnc     L033006?
0634           2022   ;        Nunchuck_reader.h:152: buf[i]=I2C_read();
0634 EA        2023            mov     a,r2
0635 2418      2024            add     a,#_nunchuck_init_buf_1_134
0637 F8        2025            mov     r0,a
0638 C002      2026            push    ar2
063A C000      2027            push    ar0
063C 120100    2028            lcall   _I2C_read
063F E582      2029            mov     a,dpl
0641 D000      2030            pop     ar0
0643 D002      2031            pop     ar2
0645 F6        2032            mov     @r0,a
0646           2033   ;        Nunchuck_reader.h:150: for(i=0; i<CHARS_PER_LINE; i++)
0646 0A        2034            inc     r2
0647 8001      2035            sjmp    L033003?
0649           2036   L033006?:
0649           2037   ;        Nunchuck_reader.h:154: ACK=0;
0649 C2C1      2038            clr     _ACK
064B           2039   ;        Nunchuck_reader.h:155: I2C_stop();
064B 120100    2040            lcall   _I2C_stop
064E           2041   ;        Nunchuck_reader.h:156: waitms(3);
064E 900003    2042            mov     dptr,#0x0003
0651 120100    2043            lcall   _waitms
0654           2044   ;        Nunchuck_reader.h:158: if(print_extension_type)
0654 30A8A8    2045            jnb     _nunchuck_init_PARM_1,L033002?
0657           2046   ;        Nunchuck_reader.h:161: buf[0],  buf[1], buf[2], buf[3], buf[4], buf[5]);
0657 AA1D      2047            mov     r2,(_nunchuck_init_buf_1_134 + 0x0005)
0659 7B00      2048            mov     r3,#0x00
065B AC1C      2049            mov     r4,(_nunchuck_init_buf_1_134 + 0x0004)
065D 7D00      2050            mov     r5,#0x00
065F 851B68    2051            mov     _nunchuck_init_sloc0_1_0,(_nunchuck_init_buf_1_134 + 0x0003)
0662 756900    2052            mov     (_nunchuck_init_sloc0_1_0 + 1),#0x00
0665 851AB8    2053            mov     _nunchuck_init_sloc1_1_0,(_nunchuck_init_buf_1_134 + 0x0002)
0668 75B900    2054            mov     (_nunchuck_init_sloc1_1_0 + 1),#0x00
066B 851908    2055            mov     _nunchuck_init_sloc2_1_0,(_nunchuck_init_buf_1_134 + 0x0001)
066E 750900    2056            mov     (_nunchuck_init_sloc2_1_0 + 1),#0x00
0671 AE18      2057            mov     r6,_nunchuck_init_buf_1_134
0673 7F00      2058            mov     r7,#0x00
0675           2059   ;        Nunchuck_reader.h:160: printf("Extension type: %02x  %02x  %02x  %02x  %02x  %02x\n", 
0675 C002      2060            push    ar2
0677 C003      2061            push    ar3
0679 C004      2062            push    ar4
067B C005      2063            push    ar5
067D C068      2064            push    _nunchuck_init_sloc0_1_0
067F C069      2065            push    (_nunchuck_init_sloc0_1_0 + 1)
0681 C0B8      2066            push    _nunchuck_init_sloc1_1_0
0683 C0B9      2067            push    (_nunchuck_init_sloc1_1_0 + 1)
0685 C008      2068            push    _nunchuck_init_sloc2_1_0
0687 C009      2069            push    (_nunchuck_init_sloc2_1_0 + 1)
0689 C006      2070            push    ar6
068B C007      2071            push    ar7
068D 74E8      2072            mov     a,#__str_10
068F C0E0      2073            push    acc
0691 74D4      2074            mov     a,#(__str_10 >> 8)
0693 C0E0      2075            push    acc
0695 7480      2076            mov     a,#0x80
0697 C0E0      2077            push    acc
0699 120100    2078            lcall   _printf
069C E581      2079            mov     a,sp
069E 24F1      2080            add     a,#0xf1
06A0 F581      2081            mov     sp,a
06A2           2082   L033002?:
06A2           2083   ;        Nunchuck_reader.h:166: I2C_start();
06A2 120100    2084            lcall   _I2C_start
06A5           2085   ;        Nunchuck_reader.h:167: I2C_write(0xA4);
06A5 7582A4    2086            mov     dpl,#0xA4
06A8 120100    2087            lcall   _I2C_write
06AB           2088   ;        Nunchuck_reader.h:168: I2C_write(0xF0);
06AB 7582F0    2089            mov     dpl,#0xF0
06AE 120100    2090            lcall   _I2C_write
06B1           2091   ;        Nunchuck_reader.h:169: I2C_write(0xAA);
06B1 7582AA    2092            mov     dpl,#0xAA
06B4 120100    2093            lcall   _I2C_write
06B7           2094   ;        Nunchuck_reader.h:170: I2C_stop();
06B7 120100    2095            lcall   _I2C_stop
06BA           2096   ;        Nunchuck_reader.h:171: waitms(1);
06BA 900001    2097            mov     dptr,#0x0001
06BD 120100    2098            lcall   _waitms
06C0           2099   ;        Nunchuck_reader.h:173: I2C_start();
06C0 120100    2100            lcall   _I2C_start
06C3           2101   ;        Nunchuck_reader.h:174: I2C_write(0xA4);
06C3 7582A4    2102            mov     dpl,#0xA4
06C6 120100    2103            lcall   _I2C_write
06C9           2104   ;        Nunchuck_reader.h:175: I2C_write(0x40);
06C9 758240    2105            mov     dpl,#0x40
06CC 120100    2106            lcall   _I2C_write
06CF           2107   ;        Nunchuck_reader.h:176: I2C_write(0x00);
06CF 758200    2108            mov     dpl,#0x00
06D2 120100    2109            lcall   _I2C_write
06D5           2110   ;        Nunchuck_reader.h:177: I2C_write(0x00);
06D5 758200    2111            mov     dpl,#0x00
06D8 120100    2112            lcall   _I2C_write
06DB           2113   ;        Nunchuck_reader.h:178: I2C_write(0x00);
06DB 758200    2114            mov     dpl,#0x00
06DE 120100    2115            lcall   _I2C_write
06E1           2116   ;        Nunchuck_reader.h:179: I2C_write(0x00);
06E1 758200    2117            mov     dpl,#0x00
06E4 120100    2118            lcall   _I2C_write
06E7           2119   ;        Nunchuck_reader.h:180: I2C_write(0x00);
06E7 758200    2120            mov     dpl,#0x00
06EA 120100    2121            lcall   _I2C_write
06ED           2122   ;        Nunchuck_reader.h:181: I2C_write(0x00);
06ED 758200    2123            mov     dpl,#0x00
06F0 120100    2124            lcall   _I2C_write
06F3           2125   ;        Nunchuck_reader.h:182: I2C_stop();
06F3 120100    2126            lcall   _I2C_stop
06F6           2127   ;        Nunchuck_reader.h:183: waitms(1);
06F6 900001    2128            mov     dptr,#0x0001
06F9 120100    2129            lcall   _waitms
06FC           2130   ;        Nunchuck_reader.h:185: I2C_start();
06FC 120100    2131            lcall   _I2C_start
06FF           2132   ;        Nunchuck_reader.h:186: I2C_write(0xA4);
06FF 7582A4    2133            mov     dpl,#0xA4
0702 120100    2134            lcall   _I2C_write
0705           2135   ;        Nunchuck_reader.h:187: I2C_write(0x40);
0705 758240    2136            mov     dpl,#0x40
0708 120100    2137            lcall   _I2C_write
070B           2138   ;        Nunchuck_reader.h:188: I2C_write(0x00);
070B 758200    2139            mov     dpl,#0x00
070E 120100    2140            lcall   _I2C_write
0711           2141   ;        Nunchuck_reader.h:189: I2C_write(0x00);
0711 758200    2142            mov     dpl,#0x00
0714 120100    2143            lcall   _I2C_write
0717           2144   ;        Nunchuck_reader.h:190: I2C_write(0x00);
0717 758200    2145            mov     dpl,#0x00
071A 120100    2146            lcall   _I2C_write
071D           2147   ;        Nunchuck_reader.h:191: I2C_write(0x00);
071D 758200    2148            mov     dpl,#0x00
0720 120100    2149            lcall   _I2C_write
0723           2150   ;        Nunchuck_reader.h:192: I2C_write(0x00);
0723 758200    2151            mov     dpl,#0x00
0726 120100    2152            lcall   _I2C_write
0729           2153   ;        Nunchuck_reader.h:193: I2C_write(0x00);
0729 758200    2154            mov     dpl,#0x00
072C 120100    2155            lcall   _I2C_write
072F           2156   ;        Nunchuck_reader.h:194: I2C_stop();
072F 120100    2157            lcall   _I2C_stop
0732           2158   ;        Nunchuck_reader.h:195: waitms(1);
0732 900001    2159            mov     dptr,#0x0001
0735 120100    2160            lcall   _waitms
0738           2161   ;        Nunchuck_reader.h:197: I2C_start();
0738 120100    2162            lcall   _I2C_start
073B           2163   ;        Nunchuck_reader.h:198: I2C_write(0xA4);
073B 7582A4    2164            mov     dpl,#0xA4
073E 120100    2165            lcall   _I2C_write
0741           2166   ;        Nunchuck_reader.h:199: I2C_write(0x40);
0741 758240    2167            mov     dpl,#0x40
0744 120100    2168            lcall   _I2C_write
0747           2169   ;        Nunchuck_reader.h:200: I2C_write(0x00);
0747 758200    2170            mov     dpl,#0x00
074A 120100    2171            lcall   _I2C_write
074D           2172   ;        Nunchuck_reader.h:201: I2C_write(0x00);
074D 758200    2173            mov     dpl,#0x00
0750 120100    2174            lcall   _I2C_write
0753           2175   ;        Nunchuck_reader.h:202: I2C_write(0x00);
0753 758200    2176            mov     dpl,#0x00
0756 120100    2177            lcall   _I2C_write
0759           2178   ;        Nunchuck_reader.h:203: I2C_write(0x00);
0759 758200    2179            mov     dpl,#0x00
075C 120100    2180            lcall   _I2C_write
075F           2181   ;        Nunchuck_reader.h:204: I2C_stop();
075F 120100    2182            lcall   _I2C_stop
0762           2183   ;        Nunchuck_reader.h:205: waitms(1);
0762 900001    2184            mov     dptr,#0x0001
0765 020100    2185            ljmp    _waitms
0768           2186   ;------------------------------------------------------------
0768           2187   ;Allocation info for local variables in function 'nunchuck_getdata'
0768           2188   ;------------------------------------------------------------
0768           2189   ;s                         Allocated to registers r2 r3 r4 
0768           2190   ;i                         Allocated to registers r5 
0768           2191   ;------------------------------------------------------------
0768           2192   ;        Nunchuck_reader.h:208: void nunchuck_getdata(unsigned char * s)
0768           2193   ;        -----------------------------------------
0768           2194   ;         function nunchuck_getdata
0768           2195   ;        -----------------------------------------
0768           2196   _nunchuck_getdata:
0768 AA82      2197            mov     r2,dpl
076A AB83      2198            mov     r3,dph
076C ACF0      2199            mov     r4,b
076E           2200   ;        Nunchuck_reader.h:213: I2C_start();
076E C002      2201            push    ar2
0770 C003      2202            push    ar3
0772 C004      2203            push    ar4
0774 120100    2204            lcall   _I2C_start
0777           2205   ;        Nunchuck_reader.h:214: I2C_write(0xA4);
0777 7582A4    2206            mov     dpl,#0xA4
077A 120100    2207            lcall   _I2C_write
077D           2208   ;        Nunchuck_reader.h:215: I2C_write(0x00);
077D 758200    2209            mov     dpl,#0x00
0780 120100    2210            lcall   _I2C_write
0783           2211   ;        Nunchuck_reader.h:216: I2C_stop();
0783 120100    2212            lcall   _I2C_stop
0786           2213   ;        Nunchuck_reader.h:217: waitms(3);       // 3 ms required to complete acquisition
0786 900003    2214            mov     dptr,#0x0003
0789 120100    2215            lcall   _waitms
078C           2216   ;        Nunchuck_reader.h:220: I2C_start();
078C 120100    2217            lcall   _I2C_start
078F           2218   ;        Nunchuck_reader.h:221: I2C_write(0xA5);
078F 7582A5    2219            mov     dpl,#0xA5
0792 120100    2220            lcall   _I2C_write
0795 D004      2221            pop     ar4
0797 D003      2222            pop     ar3
0799 D002      2223            pop     ar2
079B           2224   ;        Nunchuck_reader.h:224: for(i=0; i<CHARS_PER_LINE; i++)
079B 7D00      2225            mov     r5,#0x00
079D           2226   L034001?:
079D BD1068    2227            cjne    r5,#0x10,L034010?
07A0           2228   L034010?:
07A0 5001      2229            jnc     L034004?
07A2           2230   ;        Nunchuck_reader.h:226: s[i]=(I2C_read()^0x17)+0x17; // Read and decrypt
07A2 ED        2231            mov     a,r5
07A3 2A        2232            add     a,r2
07A4 FE        2233            mov     r6,a
07A5 E4        2234            clr     a
07A6 3B        2235            addc    a,r3
07A7 FF        2236            mov     r7,a
07A8 8C00      2237            mov     ar0,r4
07AA C002      2238            push    ar2
07AC C003      2239            push    ar3
07AE C004      2240            push    ar4
07B0 C005      2241            push    ar5
07B2 C006      2242            push    ar6
07B4 C007      2243            push    ar7
07B6 C000      2244            push    ar0
07B8 120100    2245            lcall   _I2C_read
07BB E582      2246            mov     a,dpl
07BD D000      2247            pop     ar0
07BF D007      2248            pop     ar7
07C1 D006      2249            pop     ar6
07C3 D005      2250            pop     ar5
07C5 D004      2251            pop     ar4
07C7 D003      2252            pop     ar3
07C9 D002      2253            pop     ar2
07CB 6417      2254            xrl     a,#0x17
07CD 2417      2255            add     a,#0x17
07CF F9        2256            mov     r1,a
07D0 8E82      2257            mov     dpl,r6
07D2 8F83      2258            mov     dph,r7
07D4 88F0      2259            mov     b,r0
07D6 120100    2260            lcall   __gptrput
07D9           2261   ;        Nunchuck_reader.h:224: for(i=0; i<CHARS_PER_LINE; i++)
07D9 0D        2262            inc     r5
07DA 8001      2263            sjmp    L034001?
07DC           2264   L034004?:
07DC           2265   ;        Nunchuck_reader.h:228: ACK=0;
07DC C2C1      2266            clr     _ACK
07DE           2267   ;        Nunchuck_reader.h:229: I2C_stop();
07DE 020100    2268            ljmp    _I2C_stop
07E1           2269   ;------------------------------------------------------------
07E1           2270   ;Allocation info for local variables in function 'get_speed'
07E1           2271   ;------------------------------------------------------------
07E1           2272   ;y_ax                      Allocated with name '_get_speed_PARM_2'
07E1           2273   ;x_ax                      Allocated to registers r2 
07E1           2274   ;spd                       Allocated to registers r4 
07E1           2275   ;------------------------------------------------------------
07E1           2276   ;        Nunchuck_reader.h:235: char get_speed(char x_ax, char y_ax){
07E1           2277   ;        -----------------------------------------
07E1           2278   ;         function get_speed
07E1           2279   ;        -----------------------------------------
07E1           2280   _get_speed:
07E1 AA82      2281            mov     r2,dpl
07E3           2282   ;        Nunchuck_reader.h:237: y_ax=abs(y_ax);
07E3 E548      2283            mov     a,_get_speed_PARM_2
07E5 FB        2284            mov     r3,a
07E6 33        2285            rlc     a
07E7 95E0      2286            subb    a,acc
07E9 FC        2287            mov     r4,a
07EA 8B82      2288            mov     dpl,r3
07EC 8C83      2289            mov     dph,r4
07EE C002      2290            push    ar2
07F0 120100    2291            lcall   _abs
07F3 AB82      2292            mov     r3,dpl
07F5 D002      2293            pop     ar2
07F7           2294   ;        Nunchuck_reader.h:238: x_ax=abs(x_ax);
07F7 EA        2295            mov     a,r2
07F8 FC        2296            mov     r4,a
07F9 33        2297            rlc     a
07FA 95E0      2298            subb    a,acc
07FC FD        2299            mov     r5,a
07FD 8C82      2300            mov     dpl,r4
07FF 8D83      2301            mov     dph,r5
0801 C003      2302            push    ar3
0803 120100    2303            lcall   _abs
0806 AC82      2304            mov     r4,dpl
0808 AD83      2305            mov     r5,dph
080A D003      2306            pop     ar3
080C 8C02      2307            mov     ar2,r4
080E           2308   ;        Nunchuck_reader.h:240: if(y_ax>x_ax){
080E C3        2309            clr     c
080F EA        2310            mov     a,r2
0810 6480      2311            xrl     a,#0x80
0812 8BF0      2312            mov     b,r3
0814 63F080    2313            xrl     b,#0x80
0817 95F0      2314            subb    a,b
0819 5001      2315            jnc     L035004?
081B           2316   ;        Nunchuck_reader.h:241: spd=y_ax;
081B 8B04      2317            mov     ar4,r3
081D           2318   ;        Nunchuck_reader.h:242: if(y_ax>85)
081D C3        2319            clr     c
081E 74D5      2320            mov     a,#(0x55 ^ 0x80)
0820 8BF0      2321            mov     b,r3
0822 63F080    2322            xrl     b,#0x80
0825 95F0      2323            subb    a,b
0827 5001      2324            jnc     L035005?
0829           2325   ;        Nunchuck_reader.h:243: spd=100;
0829 7C64      2326            mov     r4,#0x64
082B 8001      2327            sjmp    L035005?
082D           2328   L035004?:
082D           2329   ;        Nunchuck_reader.h:245: else spd=x_ax;
082D 8A04      2330            mov     ar4,r2
082F           2331   L035005?:
082F           2332   ;        Nunchuck_reader.h:247: return spd/TRANSMISSION_SIZE;
082F C2D5      2333            clr     F0
0831 75F004    2334            mov     b,#0x04
0834 EC        2335            mov     a,r4
0835 30E728    2336            jnb     acc.7,L035012?
0838 B2D5      2337            cpl     F0
083A F4        2338            cpl     a
083B 04        2339            inc     a
083C           2340   L035012?:
083C 84        2341            div     ab
083D 30D568    2342            jnb     F0,L035013?
0840 F4        2343            cpl     a
0841 04        2344            inc     a
0842           2345   L035013?:
0842 F582      2346            mov     dpl,a
0844 22        2347            ret
0845           2348   ;------------------------------------------------------------
0845           2349   ;Allocation info for local variables in function 'get_direction'
0845           2350   ;------------------------------------------------------------
0845           2351   ;y_axis                    Allocated with name '_get_direction_PARM_2'
0845           2352   ;x_axis                    Allocated to registers r2 
0845           2353   ;direction                 Allocated to registers r3 
0845           2354   ;------------------------------------------------------------
0845           2355   ;        Nunchuck_reader.h:250: char get_direction(char x_axis, char y_axis){
0845           2356   ;        -----------------------------------------
0845           2357   ;         function get_direction
0845           2358   ;        -----------------------------------------
0845           2359   _get_direction:
0845 AA82      2360            mov     r2,dpl
0847           2361   ;        Nunchuck_reader.h:252: char direction=north;
0847 7B00      2362            mov     r3,#0x00
0849           2363   ;        Nunchuck_reader.h:255: if(y_axis>0){
0849 C3        2364            clr     c
084A E4        2365            clr     a
084B 6480      2366            xrl     a,#0x80
084D 85D8F0    2367            mov     b,_get_direction_PARM_2
0850 63F080    2368            xrl     b,#0x80
0853 95F0      2369            subb    a,b
0855 4001      2370            jc      L036130?
0857 020100    2371            ljmp    L036084?
085A           2372   L036130?:
085A           2373   ;        Nunchuck_reader.h:257: if ((x_axis<10)&&(x_axis>-10)){
085A C3        2374            clr     c
085B EA        2375            mov     a,r2
085C 6480      2376            xrl     a,#0x80
085E 948A      2377            subb    a,#0x8a
0860 5001      2378            jnc     L036038?
0862 C3        2379            clr     c
0863 7476      2380            mov     a,#(0xF6 ^ 0x80)
0865 8AF0      2381            mov     b,r2
0867 63F080    2382            xrl     b,#0x80
086A 95F0      2383            subb    a,b
086C 5001      2384            jnc     L036038?
086E           2385   ;        Nunchuck_reader.h:260: if(y_axis>5&&y_axis>-5){
086E C3        2386            clr     c
086F 7485      2387            mov     a,#(0x05 ^ 0x80)
0871 85D8F0    2388            mov     b,_get_direction_PARM_2
0874 63F080    2389            xrl     b,#0x80
0877 95F0      2390            subb    a,b
0879 5001      2391            jnc     L036002?
087B C3        2392            clr     c
087C 747B      2393            mov     a,#(0xFB ^ 0x80)
087E 85D8F0    2394            mov     b,_get_direction_PARM_2
0881 63F080    2395            xrl     b,#0x80
0884 95F0      2396            subb    a,b
0886 5001      2397            jnc     L036002?
0888           2398   ;        Nunchuck_reader.h:261: direction=north;
0888 7B00      2399            mov     r3,#0x00
088A 020100    2400            ljmp    L036085?
088D           2401   L036002?:
088D           2402   ;        Nunchuck_reader.h:263: else direction=north;
088D 7B00      2403            mov     r3,#0x00
088F 020100    2404            ljmp    L036085?
0892           2405   L036038?:
0892           2406   ;        Nunchuck_reader.h:267: else if(x_axis>10&&x_axis<=30){
0892 C3        2407            clr     c
0893 748A      2408            mov     a,#(0x0A ^ 0x80)
0895 8AF0      2409            mov     b,r2
0897 63F080    2410            xrl     b,#0x80
089A 95F0      2411            subb    a,b
089C 5001      2412            jnc     L036034?
089E C3        2413            clr     c
089F 749E      2414            mov     a,#(0x1E ^ 0x80)
08A1 8AF0      2415            mov     b,r2
08A3 63F080    2416            xrl     b,#0x80
08A6 95F0      2417            subb    a,b
08A8 4001      2418            jc      L036034?
08AA           2419   ;        Nunchuck_reader.h:268: direction=NNE;
08AA 7B02      2420            mov     r3,#0x02
08AC 020100    2421            ljmp    L036085?
08AF           2422   L036034?:
08AF           2423   ;        Nunchuck_reader.h:270: else if(x_axis>30&&x_axis<=50){
08AF C3        2424            clr     c
08B0 749E      2425            mov     a,#(0x1E ^ 0x80)
08B2 8AF0      2426            mov     b,r2
08B4 63F080    2427            xrl     b,#0x80
08B7 95F0      2428            subb    a,b
08B9 5001      2429            jnc     L036030?
08BB C3        2430            clr     c
08BC 74B2      2431            mov     a,#(0x32 ^ 0x80)
08BE 8AF0      2432            mov     b,r2
08C0 63F080    2433            xrl     b,#0x80
08C3 95F0      2434            subb    a,b
08C5 4001      2435            jc      L036030?
08C7           2436   ;        Nunchuck_reader.h:271: direction=NE;
08C7 7B04      2437            mov     r3,#0x04
08C9 020100    2438            ljmp    L036085?
08CC           2439   L036030?:
08CC           2440   ;        Nunchuck_reader.h:273: else if(x_axis>50&&x_axis<=70){
08CC C3        2441            clr     c
08CD 74B2      2442            mov     a,#(0x32 ^ 0x80)
08CF 8AF0      2443            mov     b,r2
08D1 63F080    2444            xrl     b,#0x80
08D4 95F0      2445            subb    a,b
08D6 5001      2446            jnc     L036026?
08D8 C3        2447            clr     c
08D9 74C6      2448            mov     a,#(0x46 ^ 0x80)
08DB 8AF0      2449            mov     b,r2
08DD 63F080    2450            xrl     b,#0x80
08E0 95F0      2451            subb    a,b
08E2 4001      2452            jc      L036026?
08E4           2453   ;        Nunchuck_reader.h:274: direction=NEE;
08E4 7B06      2454            mov     r3,#0x06
08E6 020100    2455            ljmp    L036085?
08E9           2456   L036026?:
08E9           2457   ;        Nunchuck_reader.h:276: else if(x_axis>70&&x_axis<=100){
08E9 C3        2458            clr     c
08EA 74C6      2459            mov     a,#(0x46 ^ 0x80)
08EC 8AF0      2460            mov     b,r2
08EE 63F080    2461            xrl     b,#0x80
08F1 95F0      2462            subb    a,b
08F3 5001      2463            jnc     L036022?
08F5 C3        2464            clr     c
08F6 74E4      2465            mov     a,#(0x64 ^ 0x80)
08F8 8AF0      2466            mov     b,r2
08FA 63F080    2467            xrl     b,#0x80
08FD 95F0      2468            subb    a,b
08FF 4001      2469            jc      L036022?
0901           2470   ;        Nunchuck_reader.h:277: direction=east;
0901 7B08      2471            mov     r3,#0x08
0903 020100    2472            ljmp    L036085?
0906           2473   L036022?:
0906           2474   ;        Nunchuck_reader.h:280: else if(x_axis<-10&&x_axis>=-30){
0906 C3        2475            clr     c
0907 EA        2476            mov     a,r2
0908 6480      2477            xrl     a,#0x80
090A 9476      2478            subb    a,#0x76
090C 5001      2479            jnc     L036018?
090E C3        2480            clr     c
090F EA        2481            mov     a,r2
0910 6480      2482            xrl     a,#0x80
0912 9462      2483            subb    a,#0x62
0914 4001      2484            jc      L036018?
0916           2485   ;        Nunchuck_reader.h:281: direction=NNW;
0916 7B03      2486            mov     r3,#0x03
0918 020100    2487            ljmp    L036085?
091B           2488   L036018?:
091B           2489   ;        Nunchuck_reader.h:283: else if(x_axis<-30&&x_axis>=-50){
091B C3        2490            clr     c
091C EA        2491            mov     a,r2
091D 6480      2492            xrl     a,#0x80
091F 9462      2493            subb    a,#0x62
0921 5001      2494            jnc     L036014?
0923 C3        2495            clr     c
0924 EA        2496            mov     a,r2
0925 6480      2497            xrl     a,#0x80
0927 944E      2498            subb    a,#0x4e
0929 4001      2499            jc      L036014?
092B           2500   ;        Nunchuck_reader.h:284: direction=NW;
092B 7B05      2501            mov     r3,#0x05
092D 020100    2502            ljmp    L036085?
0930           2503   L036014?:
0930           2504   ;        Nunchuck_reader.h:286: else if(x_axis<-50&&x_axis>=-70){
0930 C3        2505            clr     c
0931 EA        2506            mov     a,r2
0932 6480      2507            xrl     a,#0x80
0934 944E      2508            subb    a,#0x4e
0936 5001      2509            jnc     L036010?
0938 C3        2510            clr     c
0939 EA        2511            mov     a,r2
093A 6480      2512            xrl     a,#0x80
093C 943A      2513            subb    a,#0x3a
093E 4001      2514            jc      L036010?
0940           2515   ;        Nunchuck_reader.h:287: direction=NWW;
0940 7B07      2516            mov     r3,#0x07
0942 020100    2517            ljmp    L036085?
0945           2518   L036010?:
0945           2519   ;        Nunchuck_reader.h:289: else if(x_axis<-70&&x_axis>=-110){
0945 C3        2520            clr     c
0946 EA        2521            mov     a,r2
0947 6480      2522            xrl     a,#0x80
0949 943A      2523            subb    a,#0x3a
094B 5001      2524            jnc     L036006?
094D C3        2525            clr     c
094E EA        2526            mov     a,r2
094F 6480      2527            xrl     a,#0x80
0951 9412      2528            subb    a,#0x12
0953 4001      2529            jc      L036006?
0955           2530   ;        Nunchuck_reader.h:290: direction=west;
0955 7B09      2531            mov     r3,#0x09
0957 020100    2532            ljmp    L036085?
095A           2533   L036006?:
095A           2534   ;        Nunchuck_reader.h:293: direction=north;
095A 7B00      2535            mov     r3,#0x00
095C 020100    2536            ljmp    L036085?
095F           2537   L036084?:
095F           2538   ;        Nunchuck_reader.h:297: else if (y_axis<0){
095F E5D8      2539            mov     a,_get_direction_PARM_2
0961 20E7E8    2540            jb      acc.7,L036151?
0964 020100    2541            ljmp    L036085?
0967           2542   L036151?:
0967           2543   ;        Nunchuck_reader.h:299: if ((x_axis<10)&&(x_axis>-10)){
0967 C3        2544            clr     c
0968 EA        2545            mov     a,r2
0969 6480      2546            xrl     a,#0x80
096B 948A      2547            subb    a,#0x8a
096D 5001      2548            jnc     L036078?
096F C3        2549            clr     c
0970 7476      2550            mov     a,#(0xF6 ^ 0x80)
0972 8AF0      2551            mov     b,r2
0974 63F080    2552            xrl     b,#0x80
0977 95F0      2553            subb    a,b
0979 5001      2554            jnc     L036078?
097B           2555   ;        Nunchuck_reader.h:302: if(y_axis>5&&y_axis>-5){
097B C3        2556            clr     c
097C 7485      2557            mov     a,#(0x05 ^ 0x80)
097E 85D8F0    2558            mov     b,_get_direction_PARM_2
0981 63F080    2559            xrl     b,#0x80
0984 95F0      2560            subb    a,b
0986 5001      2561            jnc     L036042?
0988 C3        2562            clr     c
0989 747B      2563            mov     a,#(0xFB ^ 0x80)
098B 85D8F0    2564            mov     b,_get_direction_PARM_2
098E 63F080    2565            xrl     b,#0x80
0991 95F0      2566            subb    a,b
0993 5001      2567            jnc     L036042?
0995           2568   ;        Nunchuck_reader.h:303: direction=south;
0995 7B01      2569            mov     r3,#0x01
0997 020100    2570            ljmp    L036085?
099A           2571   L036042?:
099A           2572   ;        Nunchuck_reader.h:305: else direction=south;
099A 7B01      2573            mov     r3,#0x01
099C 020100    2574            ljmp    L036085?
099F           2575   L036078?:
099F           2576   ;        Nunchuck_reader.h:309: else if(x_axis>10&&x_axis<=30){
099F C3        2577            clr     c
09A0 748A      2578            mov     a,#(0x0A ^ 0x80)
09A2 8AF0      2579            mov     b,r2
09A4 63F080    2580            xrl     b,#0x80
09A7 95F0      2581            subb    a,b
09A9 5001      2582            jnc     L036074?
09AB C3        2583            clr     c
09AC 749E      2584            mov     a,#(0x1E ^ 0x80)
09AE 8AF0      2585            mov     b,r2
09B0 63F080    2586            xrl     b,#0x80
09B3 95F0      2587            subb    a,b
09B5 4001      2588            jc      L036074?
09B7           2589   ;        Nunchuck_reader.h:310: direction=SSE;
09B7 7B0A      2590            mov     r3,#0x0A
09B9 020100    2591            ljmp    L036085?
09BC           2592   L036074?:
09BC           2593   ;        Nunchuck_reader.h:312: else if(x_axis>30&&x_axis<=50){
09BC C3        2594            clr     c
09BD 749E      2595            mov     a,#(0x1E ^ 0x80)
09BF 8AF0      2596            mov     b,r2
09C1 63F080    2597            xrl     b,#0x80
09C4 95F0      2598            subb    a,b
09C6 5001      2599            jnc     L036070?
09C8 C3        2600            clr     c
09C9 74B2      2601            mov     a,#(0x32 ^ 0x80)
09CB 8AF0      2602            mov     b,r2
09CD 63F080    2603            xrl     b,#0x80
09D0 95F0      2604            subb    a,b
09D2 4001      2605            jc      L036070?
09D4           2606   ;        Nunchuck_reader.h:313: direction=SE;
09D4 7B0C      2607            mov     r3,#0x0C
09D6 020100    2608            ljmp    L036085?
09D9           2609   L036070?:
09D9           2610   ;        Nunchuck_reader.h:315: else if(x_axis>50&&x_axis<=70){
09D9 C3        2611            clr     c
09DA 74B2      2612            mov     a,#(0x32 ^ 0x80)
09DC 8AF0      2613            mov     b,r2
09DE 63F080    2614            xrl     b,#0x80
09E1 95F0      2615            subb    a,b
09E3 5001      2616            jnc     L036066?
09E5 C3        2617            clr     c
09E6 74C6      2618            mov     a,#(0x46 ^ 0x80)
09E8 8AF0      2619            mov     b,r2
09EA 63F080    2620            xrl     b,#0x80
09ED 95F0      2621            subb    a,b
09EF 4001      2622            jc      L036066?
09F1           2623   ;        Nunchuck_reader.h:316: direction=SEE;
09F1 7B0E      2624            mov     r3,#0x0E
09F3 020100    2625            ljmp    L036085?
09F6           2626   L036066?:
09F6           2627   ;        Nunchuck_reader.h:318: else if(x_axis>70&&x_axis<=100){
09F6 C3        2628            clr     c
09F7 74C6      2629            mov     a,#(0x46 ^ 0x80)
09F9 8AF0      2630            mov     b,r2
09FB 63F080    2631            xrl     b,#0x80
09FE 95F0      2632            subb    a,b
0A00 5001      2633            jnc     L036062?
0A02 C3        2634            clr     c
0A03 74E4      2635            mov     a,#(0x64 ^ 0x80)
0A05 8AF0      2636            mov     b,r2
0A07 63F080    2637            xrl     b,#0x80
0A0A 95F0      2638            subb    a,b
0A0C 4001      2639            jc      L036062?
0A0E           2640   ;        Nunchuck_reader.h:319: direction=east;
0A0E 7B08      2641            mov     r3,#0x08
0A10 8001      2642            sjmp    L036085?
0A12           2643   L036062?:
0A12           2644   ;        Nunchuck_reader.h:322: else if(x_axis<-10&&x_axis>=-30){
0A12 C3        2645            clr     c
0A13 EA        2646            mov     a,r2
0A14 6480      2647            xrl     a,#0x80
0A16 9476      2648            subb    a,#0x76
0A18 5001      2649            jnc     L036058?
0A1A C3        2650            clr     c
0A1B EA        2651            mov     a,r2
0A1C 6480      2652            xrl     a,#0x80
0A1E 9462      2653            subb    a,#0x62
0A20 4001      2654            jc      L036058?
0A22           2655   ;        Nunchuck_reader.h:323: direction=SSW;
0A22 7B0B      2656            mov     r3,#0x0B
0A24 8001      2657            sjmp    L036085?
0A26           2658   L036058?:
0A26           2659   ;        Nunchuck_reader.h:325: else if(x_axis<-30&&x_axis>=-50){
0A26 C3        2660            clr     c
0A27 EA        2661            mov     a,r2
0A28 6480      2662            xrl     a,#0x80
0A2A 9462      2663            subb    a,#0x62
0A2C 5001      2664            jnc     L036054?
0A2E C3        2665            clr     c
0A2F EA        2666            mov     a,r2
0A30 6480      2667            xrl     a,#0x80
0A32 944E      2668            subb    a,#0x4e
0A34 4001      2669            jc      L036054?
0A36           2670   ;        Nunchuck_reader.h:326: direction=SW;
0A36 7B0C      2671            mov     r3,#0x0C
0A38 8001      2672            sjmp    L036085?
0A3A           2673   L036054?:
0A3A           2674   ;        Nunchuck_reader.h:328: else if(x_axis<-50&&x_axis>=-80){
0A3A C3        2675            clr     c
0A3B EA        2676            mov     a,r2
0A3C 6480      2677            xrl     a,#0x80
0A3E 944E      2678            subb    a,#0x4e
0A40 5001      2679            jnc     L036050?
0A42 C3        2680            clr     c
0A43 EA        2681            mov     a,r2
0A44 6480      2682            xrl     a,#0x80
0A46 9430      2683            subb    a,#0x30
0A48 4001      2684            jc      L036050?
0A4A           2685   ;        Nunchuck_reader.h:329: direction=SWW;
0A4A 7B0F      2686            mov     r3,#0x0F
0A4C 8001      2687            sjmp    L036085?
0A4E           2688   L036050?:
0A4E           2689   ;        Nunchuck_reader.h:331: else if(x_axis<-80&&x_axis>=-110){
0A4E C3        2690            clr     c
0A4F EA        2691            mov     a,r2
0A50 6480      2692            xrl     a,#0x80
0A52 9430      2693            subb    a,#0x30
0A54 5001      2694            jnc     L036046?
0A56 C3        2695            clr     c
0A57 EA        2696            mov     a,r2
0A58 6480      2697            xrl     a,#0x80
0A5A 9412      2698            subb    a,#0x12
0A5C 4001      2699            jc      L036046?
0A5E           2700   ;        Nunchuck_reader.h:332: direction=west;
0A5E 7B09      2701            mov     r3,#0x09
0A60 8001      2702            sjmp    L036085?
0A62           2703   L036046?:
0A62           2704   ;        Nunchuck_reader.h:335: direction=north;
0A62 7B00      2705            mov     r3,#0x00
0A64           2706   L036085?:
0A64           2707   ;        Nunchuck_reader.h:341: return direction;
0A64 8B82      2708            mov     dpl,r3
0A66 22        2709            ret
0A67           2710   ;------------------------------------------------------------
0A67           2711   ;Allocation info for local variables in function 'read_nunchuck'
0A67           2712   ;------------------------------------------------------------
0A67           2713   ;speed                     Allocated with name '_read_nunchuck_PARM_2'
0A67           2714   ;rbuf                      Allocated with name '_read_nunchuck_PARM_3'
0A67           2715   ;off_x                     Allocated with name '_read_nunchuck_PARM_4'
0A67           2716   ;off_y                     Allocated with name '_read_nunchuck_PARM_5'
0A67           2717   ;direction                 Allocated with name '_read_nunchuck_direction_1_167'
0A67           2718   ;joy_x                     Allocated with name '_read_nunchuck_joy_x_1_168'
0A67           2719   ;joy_y                     Allocated with name '_read_nunchuck_joy_y_1_168'
0A67           2720   ;sloc0                     Allocated with name '_read_nunchuck_sloc0_1_0'
0A67           2721   ;------------------------------------------------------------
0A67           2722   ;        Nunchuck_reader.h:346: void read_nunchuck(char * direction, char * speed, char * rbuf, int off_x, int off_y)
0A67           2723   ;        -----------------------------------------
0A67           2724   ;         function read_nunchuck
0A67           2725   ;        -----------------------------------------
0A67           2726   _read_nunchuck:
0A67 858258    2727            mov     _read_nunchuck_direction_1_167,dpl
0A6A 858359    2728            mov     (_read_nunchuck_direction_1_167 + 1),dph
0A6D 85F05A    2729            mov     (_read_nunchuck_direction_1_167 + 2),b
0A70           2730   ;        Nunchuck_reader.h:366: nunchuck_getdata(rbuf);
0A70 ADA8      2731            mov     r5,_read_nunchuck_PARM_3
0A72 AEA9      2732            mov     r6,(_read_nunchuck_PARM_3 + 1)
0A74 AFAA      2733            mov     r7,(_read_nunchuck_PARM_3 + 2)
0A76 8D82      2734            mov     dpl,r5
0A78 8E83      2735            mov     dph,r6
0A7A 8FF0      2736            mov     b,r7
0A7C 120100    2737            lcall   _nunchuck_getdata
0A7F           2738   ;        Nunchuck_reader.h:371: joy_x=(int)rbuf[0]-128-off_x;
0A7F ADA8      2739            mov     r5,_read_nunchuck_PARM_3
0A81 AEA9      2740            mov     r6,(_read_nunchuck_PARM_3 + 1)
0A83 AFAA      2741            mov     r7,(_read_nunchuck_PARM_3 + 2)
0A85 8D82      2742            mov     dpl,r5
0A87 8E83      2743            mov     dph,r6
0A89 8FF0      2744            mov     b,r7
0A8B 120100    2745            lcall   __gptrget
0A8E F8        2746            mov     r0,a
0A8F 33        2747            rlc     a
0A90 95E0      2748            subb    a,acc
0A92 E8        2749            mov     a,r0
0A93 2480      2750            add     a,#0x80
0A95 F8        2751            mov     r0,a
0A96 A958      2752            mov     r1,_read_nunchuck_PARM_4
0A98 C3        2753            clr     c
0A99 99        2754            subb    a,r1
0A9A F5A8      2755            mov     _read_nunchuck_joy_x_1_168,a
0A9C           2756   ;        Nunchuck_reader.h:372: joy_y=(int)rbuf[1]-128-off_y;
0A9C 7401      2757            mov     a,#0x01
0A9E 2D        2758            add     a,r5
0A9F F9        2759            mov     r1,a
0AA0 E4        2760            clr     a
0AA1 3E        2761            addc    a,r6
0AA2 FA        2762            mov     r2,a
0AA3 8F03      2763            mov     ar3,r7
0AA5 8982      2764            mov     dpl,r1
0AA7 8A83      2765            mov     dph,r2
0AA9 8BF0      2766            mov     b,r3
0AAB 120100    2767            lcall   __gptrget
0AAE F9        2768            mov     r1,a
0AAF 33        2769            rlc     a
0AB0 95E0      2770            subb    a,acc
0AB2 E9        2771            mov     a,r1
0AB3 2480      2772            add     a,#0x80
0AB5 F9        2773            mov     r1,a
0AB6 AA08      2774            mov     r2,_read_nunchuck_PARM_5
0AB8 C3        2775            clr     c
0AB9 9A        2776            subb    a,r2
0ABA F5F8      2777            mov     _read_nunchuck_joy_y_1_168,a
0ABC           2778   ;        Nunchuck_reader.h:377: but1=(rbuf[5] & 0x01)?1:0;
0ABC 7405      2779            mov     a,#0x05
0ABE 2D        2780            add     a,r5
0ABF FD        2781            mov     r5,a
0AC0 E4        2782            clr     a
0AC1 3E        2783            addc    a,r6
0AC2 FE        2784            mov     r6,a
0AC3 8D82      2785            mov     dpl,r5
0AC5 8E83      2786            mov     dph,r6
0AC7 8FF0      2787            mov     b,r7
0AC9 120100    2788            lcall   __gptrget
0ACC FD        2789            mov     r5,a
0ACD 13        2790            rrc     a
0ACE 9278      2791            mov     _read_nunchuck_but1_1_168,c
0AD0           2792   ;        Nunchuck_reader.h:378: but2=(rbuf[5] & 0x02)?1:0;
0AD0 ED        2793            mov     a,r5
0AD1 A2E1      2794            mov     c,acc.1
0AD3 92C8      2795            mov     _read_nunchuck_but2_1_168,c
0AD5           2796   ;        Nunchuck_reader.h:387: but1?'1':'0', but2?'1':'0', joy_x, joy_y);
0AD5 E5F8      2797            mov     a,_read_nunchuck_joy_y_1_168
0AD7 FB        2798            mov     r3,a
0AD8 33        2799            rlc     a
0AD9 95E0      2800            subb    a,acc
0ADB FC        2801            mov     r4,a
0ADC E5A8      2802            mov     a,_read_nunchuck_joy_x_1_168
0ADE FD        2803            mov     r5,a
0ADF 33        2804            rlc     a
0AE0 95E0      2805            subb    a,acc
0AE2 FE        2806            mov     r6,a
0AE3 30C8A8    2807            jnb     _read_nunchuck_but2_1_168,L037003?
0AE6 7F31      2808            mov     r7,#0x31
0AE8 8001      2809            sjmp    L037004?
0AEA           2810   L037003?:
0AEA 7F30      2811            mov     r7,#0x30
0AEC           2812   L037004?:
0AEC EF        2813            mov     a,r7
0AED 33        2814            rlc     a
0AEE 95E0      2815            subb    a,acc
0AF0 F9        2816            mov     r1,a
0AF1 307828    2817            jnb     _read_nunchuck_but1_1_168,L037005?
0AF4 754831    2818            mov     _read_nunchuck_sloc0_1_0,#0x31
0AF7 8001      2819            sjmp    L037006?
0AF9           2820   L037005?:
0AF9 754830    2821            mov     _read_nunchuck_sloc0_1_0,#0x30
0AFC           2822   L037006?:
0AFC E548      2823            mov     a,_read_nunchuck_sloc0_1_0
0AFE FA        2824            mov     r2,a
0AFF 33        2825            rlc     a
0B00 95E0      2826            subb    a,acc
0B02 F8        2827            mov     r0,a
0B03           2828   ;        Nunchuck_reader.h:386: printf("Buttons(Z:%c, C:%c) Joystick(%4d, %4d)\r",
0B03 C003      2829            push    ar3
0B05 C004      2830            push    ar4
0B07 C005      2831            push    ar5
0B09 C006      2832            push    ar6
0B0B C007      2833            push    ar7
0B0D C001      2834            push    ar1
0B0F C002      2835            push    ar2
0B11 C000      2836            push    ar0
0B13 74A8      2837            mov     a,#__str_11
0B15 C0E0      2838            push    acc
0B17 74DE      2839            mov     a,#(__str_11 >> 8)
0B19 C0E0      2840            push    acc
0B1B 7480      2841            mov     a,#0x80
0B1D C0E0      2842            push    acc
0B1F 120100    2843            lcall   _printf
0B22 E581      2844            mov     a,sp
0B24 24F5      2845            add     a,#0xf5
0B26 F581      2846            mov     sp,a
0B28           2847   ;        Nunchuck_reader.h:388: waitms(100); //determine if we want to change this length
0B28 900064    2848            mov     dptr,#0x0064
0B2B 120100    2849            lcall   _waitms
0B2E           2850   ;        Nunchuck_reader.h:393: *direction=get_direction(joy_x, joy_y);
0B2E 85F8D8    2851            mov     _get_direction_PARM_2,_read_nunchuck_joy_y_1_168
0B31 85A882    2852            mov     dpl,_read_nunchuck_joy_x_1_168
0B34 120100    2853            lcall   _get_direction
0B37 AA82      2854            mov     r2,dpl
0B39 855882    2855            mov     dpl,_read_nunchuck_direction_1_167
0B3C 855983    2856            mov     dph,(_read_nunchuck_direction_1_167 + 1)
0B3F 855AF0    2857            mov     b,(_read_nunchuck_direction_1_167 + 2)
0B42 EA        2858            mov     a,r2
0B43 120100    2859            lcall   __gptrput
0B46           2860   ;        Nunchuck_reader.h:394: *speed = get_speed(joy_x, joy_y);
0B46 AAF8      2861            mov     r2,_read_nunchuck_PARM_2
0B48 ABF9      2862            mov     r3,(_read_nunchuck_PARM_2 + 1)
0B4A ACFA      2863            mov     r4,(_read_nunchuck_PARM_2 + 2)
0B4C 85F848    2864            mov     _get_speed_PARM_2,_read_nunchuck_joy_y_1_168
0B4F 85A882    2865            mov     dpl,_read_nunchuck_joy_x_1_168
0B52 C002      2866            push    ar2
0B54 C003      2867            push    ar3
0B56 C004      2868            push    ar4
0B58 120100    2869            lcall   _get_speed
0B5B AD82      2870            mov     r5,dpl
0B5D D004      2871            pop     ar4
0B5F D003      2872            pop     ar3
0B61 D002      2873            pop     ar2
0B63 8A82      2874            mov     dpl,r2
0B65 8B83      2875            mov     dph,r3
0B67 8CF0      2876            mov     b,r4
0B69 ED        2877            mov     a,r5
0B6A 020100    2878            ljmp    __gptrput
0B6D           2879   ;------------------------------------------------------------
0B6D           2880   ;Allocation info for local variables in function '_c51_external_startup'
0B6D           2881   ;------------------------------------------------------------
0B6D           2882   ;------------------------------------------------------------
0B6D           2883   ;        Transmitter_src.c:18: char _c51_external_startup (void)
0B6D           2884   ;        -----------------------------------------
0B6D           2885   ;         function _c51_external_startup
0B6D           2886   ;        -----------------------------------------
0B6D           2887   __c51_external_startup:
0B6D           2888   ;        Transmitter_src.c:22: SFRPAGE = 0x00;
0B6D 75A700    2889            mov     _SFRPAGE,#0x00
0B70           2890   ;        Transmitter_src.c:23: WDTCN = 0xDE; //First key
0B70 7597DE    2891            mov     _WDTCN,#0xDE
0B73           2892   ;        Transmitter_src.c:24: WDTCN = 0xAD; //Second key
0B73 7597AD    2893            mov     _WDTCN,#0xAD
0B76           2894   ;        Transmitter_src.c:26: VDM0CN |= 0x80;  // enable VDD mon
0B76 43FF80    2895            orl     _VDM0CN,#0x80
0B79           2896   ;        Transmitter_src.c:27: RSTSRC = 0x02;
0B79 75EF02    2897            mov     _RSTSRC,#0x02
0B7C           2898   ;        Transmitter_src.c:34: SFRPAGE = 0x10;
0B7C 75A710    2899            mov     _SFRPAGE,#0x10
0B7F           2900   ;        Transmitter_src.c:35: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0B7F 75C120    2901            mov     _PFE0CN,#0x20
0B82           2902   ;        Transmitter_src.c:36: SFRPAGE = 0x00;
0B82 75A700    2903            mov     _SFRPAGE,#0x00
0B85           2904   ;        Transmitter_src.c:57: CLKSEL = 0x00;
0B85 75A900    2905            mov     _CLKSEL,#0x00
0B88           2906   ;        Transmitter_src.c:58: CLKSEL = 0x00;
0B88 75A900    2907            mov     _CLKSEL,#0x00
0B8B           2908   ;        Transmitter_src.c:59: while ((CLKSEL & 0x80) == 0);
0B8B           2909   L038001?:
0B8B E5A9      2910            mov     a,_CLKSEL
0B8D 30E7E8    2911            jnb     acc.7,L038001?
0B90           2912   ;        Transmitter_src.c:60: CLKSEL = 0x03;
0B90 75A903    2913            mov     _CLKSEL,#0x03
0B93           2914   ;        Transmitter_src.c:61: CLKSEL = 0x03;
0B93 75A903    2915            mov     _CLKSEL,#0x03
0B96           2916   ;        Transmitter_src.c:62: while ((CLKSEL & 0x80) == 0);
0B96           2917   L038004?:
0B96 E5A9      2918            mov     a,_CLKSEL
0B98 30E728    2919            jnb     acc.7,L038004?
0B9B           2920   ;        Transmitter_src.c:73: SCON0 = 0x10;
0B9B 759810    2921            mov     _SCON0,#0x10
0B9E           2922   ;        Transmitter_src.c:74: CKCON0 |= 0b_0000_0000 ; // Timer 1 uses the system clock divided by 12.
0B9E 858E8E    2923            mov     _CKCON0,_CKCON0
0BA1           2924   ;        Transmitter_src.c:75: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0BA1 758DE6    2925            mov     _TH1,#0xE6
0BA4           2926   ;        Transmitter_src.c:76: TL1 = TH1;      // Init Timer1
0BA4 858D8B    2927            mov     _TL1,_TH1
0BA7           2928   ;        Transmitter_src.c:77: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0BA7 53890F    2929            anl     _TMOD,#0x0F
0BAA           2930   ;        Transmitter_src.c:78: TMOD |=  0x20;                       
0BAA 438920    2931            orl     _TMOD,#0x20
0BAD           2932   ;        Transmitter_src.c:79: TR1 = 1; // START Timer1
0BAD D28E      2933            setb    _TR1
0BAF           2934   ;        Transmitter_src.c:80: TI = 1;  // Indicate TX0 ready
0BAF D299      2935            setb    _TI
0BB1           2936   ;        Transmitter_src.c:82: P0MDOUT |= 0x14; // Enable UART0 TX as push-pull output and UART1 Tx (pin 0.2)
0BB1 43A414    2937            orl     _P0MDOUT,#0x14
0BB4           2938   ;        Transmitter_src.c:83: P1MDOUT |= 0xff; // Enable Push/Pull on port 1
0BB4 E5A5      2939            mov     a,_P1MDOUT
0BB6 75A5FF    2940            mov     _P1MDOUT,#0xFF
0BB9           2941   ;        Transmitter_src.c:85: XBR0     = 0b_0000_0101; // Enable UART0 on P0.4(TX) and P0.5(RX) and SMB0 I/O on (0.0 SDA) and (0.1 SCL)               
0BB9 75E105    2942            mov     _XBR0,#0x05
0BBC           2943   ;        Transmitter_src.c:86: XBR1     = 0x00; // Enable T0 on P0.0
0BBC 75E200    2944            mov     _XBR1,#0x00
0BBF           2945   ;        Transmitter_src.c:87: XBR2     = 0x41; // Enable crossbar and weak pull-ups .... (page 110) may need to set BIT0 to enable UART1 IO (0.2 Tx) and 0.3 RX
0BBF 75E341    2946            mov     _XBR2,#0x41
0BC2           2947   ;        Transmitter_src.c:89: Timer0_init();
0BC2 120100    2948            lcall   _Timer0_init
0BC5           2949   ;        Transmitter_src.c:91: EA = 1;
0BC5 D2AF      2950            setb    _EA
0BC7           2951   ;        Transmitter_src.c:94: SMB0CF = 0b_0101_1100; //INH | EXTHOLD | SMBTOE | SMBFTE ;
0BC7 75C15C    2952            mov     _SMB0CF,#0x5C
0BCA           2953   ;        Transmitter_src.c:95: SMB0CF |= 0b_1000_0000;  // Enable SMBus
0BCA 43C180    2954            orl     _SMB0CF,#0x80
0BCD           2955   ;        Transmitter_src.c:98: return 0;
0BCD 758200    2956            mov     dpl,#0x00
0BD0 22        2957            ret
0BD1           2958   ;------------------------------------------------------------
0BD1           2959   ;Allocation info for local variables in function 'getsn'
0BD1           2960   ;------------------------------------------------------------
0BD1           2961   ;len                       Allocated with name '_getsn_PARM_2'
0BD1           2962   ;buff                      Allocated with name '_getsn_buff_1_171'
0BD1           2963   ;j                         Allocated with name '_getsn_sloc0_1_0'
0BD1           2964   ;c                         Allocated to registers r3 
0BD1           2965   ;sloc0                     Allocated with name '_getsn_sloc0_1_0'
0BD1           2966   ;------------------------------------------------------------
0BD1           2967   ;        Transmitter_src.c:102: int getsn (char * buff, int len){
0BD1           2968   ;        -----------------------------------------
0BD1           2969   ;         function getsn
0BD1           2970   ;        -----------------------------------------
0BD1           2971   _getsn:
0BD1 858298    2972            mov     _getsn_buff_1_171,dpl
0BD4 858399    2973            mov     (_getsn_buff_1_171 + 1),dph
0BD7 85F09A    2974            mov     (_getsn_buff_1_171 + 2),b
0BDA           2975   ;        Transmitter_src.c:107: for(j=0; j<(len-1); j++)
0BDA E4        2976            clr     a
0BDB F5E8      2977            mov     _getsn_sloc0_1_0,a
0BDD F5E9      2978            mov     (_getsn_sloc0_1_0 + 1),a
0BDF E578      2979            mov     a,_getsn_PARM_2
0BE1 24FF      2980            add     a,#0xff
0BE3 FF        2981            mov     r7,a
0BE4 E579      2982            mov     a,(_getsn_PARM_2 + 1)
0BE6 34FF      2983            addc    a,#0xff
0BE8 F8        2984            mov     r0,a
0BE9 7900      2985            mov     r1,#0x00
0BEB 7A00      2986            mov     r2,#0x00
0BED           2987   L039005?:
0BED C3        2988            clr     c
0BEE E9        2989            mov     a,r1
0BEF 9F        2990            subb    a,r7
0BF0 EA        2991            mov     a,r2
0BF1 6480      2992            xrl     a,#0x80
0BF3 88F0      2993            mov     b,r0
0BF5 63F080    2994            xrl     b,#0x80
0BF8 95F0      2995            subb    a,b
0BFA 5001      2996            jnc     L039008?
0BFC           2997   ;        Transmitter_src.c:109: c=getchar();
0BFC C002      2998            push    ar2
0BFE C007      2999            push    ar7
0C00 C000      3000            push    ar0
0C02 C001      3001            push    ar1
0C04 120100    3002            lcall   _getchar
0C07 AB82      3003            mov     r3,dpl
0C09 D001      3004            pop     ar1
0C0B D000      3005            pop     ar0
0C0D D007      3006            pop     ar7
0C0F D002      3007            pop     ar2
0C11           3008   ;        Transmitter_src.c:110: if ( (c=='\n') || (c=='\r') )
0C11 BB0A28    3009            cjne    r3,#0x0A,L039015?
0C14 8001      3010            sjmp    L039001?
0C16           3011   L039015?:
0C16 BB0DA8    3012            cjne    r3,#0x0D,L039002?
0C19           3013   L039001?:
0C19           3014   ;        Transmitter_src.c:112: buff[j]=0;
0C19 E5E8      3015            mov     a,_getsn_sloc0_1_0
0C1B 2598      3016            add     a,_getsn_buff_1_171
0C1D FC        3017            mov     r4,a
0C1E E5E9      3018            mov     a,(_getsn_sloc0_1_0 + 1)
0C20 3599      3019            addc    a,(_getsn_buff_1_171 + 1)
0C22 FD        3020            mov     r5,a
0C23 AE9A      3021            mov     r6,(_getsn_buff_1_171 + 2)
0C25 8C82      3022            mov     dpl,r4
0C27 8D83      3023            mov     dph,r5
0C29 8EF0      3024            mov     b,r6
0C2B E4        3025            clr     a
0C2C 120100    3026            lcall   __gptrput
0C2F           3027   ;        Transmitter_src.c:113: return j;
0C2F 85E882    3028            mov     dpl,_getsn_sloc0_1_0
0C32 85E983    3029            mov     dph,(_getsn_sloc0_1_0 + 1)
0C35 22        3030            ret
0C36           3031   L039002?:
0C36           3032   ;        Transmitter_src.c:117: buff[j]=c;
0C36 E9        3033            mov     a,r1
0C37 2598      3034            add     a,_getsn_buff_1_171
0C39 FC        3035            mov     r4,a
0C3A EA        3036            mov     a,r2
0C3B 3599      3037            addc    a,(_getsn_buff_1_171 + 1)
0C3D FD        3038            mov     r5,a
0C3E AE9A      3039            mov     r6,(_getsn_buff_1_171 + 2)
0C40 8C82      3040            mov     dpl,r4
0C42 8D83      3041            mov     dph,r5
0C44 8EF0      3042            mov     b,r6
0C46 EB        3043            mov     a,r3
0C47 120100    3044            lcall   __gptrput
0C4A           3045   ;        Transmitter_src.c:107: for(j=0; j<(len-1); j++)
0C4A 09        3046            inc     r1
0C4B B900E8    3047            cjne    r1,#0x00,L039018?
0C4E 0A        3048            inc     r2
0C4F           3049   L039018?:
0C4F 89E8      3050            mov     _getsn_sloc0_1_0,r1
0C51 8AE9      3051            mov     (_getsn_sloc0_1_0 + 1),r2
0C53 8001      3052            sjmp    L039005?
0C55           3053   L039008?:
0C55           3054   ;        Transmitter_src.c:120: buff[j]=0;
0C55 E5E8      3055            mov     a,_getsn_sloc0_1_0
0C57 2598      3056            add     a,_getsn_buff_1_171
0C59 FA        3057            mov     r2,a
0C5A E5E9      3058            mov     a,(_getsn_sloc0_1_0 + 1)
0C5C 3599      3059            addc    a,(_getsn_buff_1_171 + 1)
0C5E FB        3060            mov     r3,a
0C5F AC9A      3061            mov     r4,(_getsn_buff_1_171 + 2)
0C61 8A82      3062            mov     dpl,r2
0C63 8B83      3063            mov     dph,r3
0C65 8CF0      3064            mov     b,r4
0C67 E4        3065            clr     a
0C68 120100    3066            lcall   __gptrput
0C6B           3067   ;        Transmitter_src.c:121: return len;
0C6B 857882    3068            mov     dpl,_getsn_PARM_2
0C6E 857983    3069            mov     dph,(_getsn_PARM_2 + 1)
0C71 22        3070            ret
0C72           3071   ;------------------------------------------------------------
0C72           3072   ;Allocation info for local variables in function 'main'
0C72           3073   ;------------------------------------------------------------
0C72           3074   ;buffer                    Allocated with name '_main_buffer_1_177'
0C72           3075   ;speed                     Allocated with name '_main_speed_1_177'
0C72           3076   ;direction                 Allocated with name '_main_direction_1_177'
0C72           3077   ;off_x                     Allocated to registers r2 r3 
0C72           3078   ;off_y                     Allocated with name '_main_off_y_1_177'
0C72           3079   ;------------------------------------------------------------
0C72           3080   ;        Transmitter_src.c:124: void main(void) {
0C72           3081   ;        -----------------------------------------
0C72           3082   ;         function main
0C72           3083   ;        -----------------------------------------
0C72           3084   _main:
0C72           3085   ;        Transmitter_src.c:128: int off_x=0;
0C72           3086   ;        Transmitter_src.c:129: int off_y=0;
0C72 E4        3087            clr     a
0C73 FA        3088            mov     r2,a
0C74 FB        3089            mov     r3,a
0C75 F528      3090            mov     _main_off_y_1_177,a
0C77 F529      3091            mov     (_main_off_y_1_177 + 1),a
0C79           3092   ;        Transmitter_src.c:130: offset_flag=1;
0C79 D258      3093            setb    _offset_flag
0C7B           3094   ;        Transmitter_src.c:132: Tcom_init(110L); //enter baudrate for UART1
0C7B 90006E    3095            mov     dptr,#(0x6E&0x00ff)
0C7E E4        3096            clr     a
0C7F F5F0      3097            mov     b,a
0C81 C002      3098            push    ar2
0C83 C003      3099            push    ar3
0C85 120100    3100            lcall   _Tcom_init
0C88           3101   ;        Transmitter_src.c:133: LCD_4BIT();
0C88 120100    3102            lcall   _LCD_4BIT
0C8B           3103   ;        Transmitter_src.c:135: waitms(200);
0C8B 9000C8    3104            mov     dptr,#0x00C8
0C8E 120100    3105            lcall   _waitms
0C91 D003      3106            pop     ar3
0C93 D002      3107            pop     ar2
0C95           3108   ;        Transmitter_src.c:136: if (mode == 1) {
0C95 7401      3109            mov     a,#0x01
0C97 B5B828    3110            cjne    a,_mode,L040002?
0C9A           3111   ;        Transmitter_src.c:137: nunchuck_init(1);
0C9A D2A8      3112            setb    _nunchuck_init_PARM_1
0C9C C002      3113            push    ar2
0C9E C003      3114            push    ar3
0CA0 120100    3115            lcall   _nunchuck_init
0CA3 D003      3116            pop     ar3
0CA5 D002      3117            pop     ar2
0CA7           3118   L040002?:
0CA7           3119   ;        Transmitter_src.c:139: waitms(100);
0CA7 900064    3120            mov     dptr,#0x0064
0CAA C002      3121            push    ar2
0CAC C003      3122            push    ar3
0CAE 120100    3123            lcall   _waitms
0CB1 D003      3124            pop     ar3
0CB3 D002      3125            pop     ar2
0CB5           3126   ;        Transmitter_src.c:141: if(offset_flag && mode == 1){
0CB5 305868    3127            jnb     _offset_flag,L040004?
0CB8 7401      3128            mov     a,#0x01
0CBA B5B868    3129            cjne    a,_mode,L040004?
0CBD           3130   ;        Transmitter_src.c:142: nunchuck_getdata(buffer);
0CBD 90BF38    3131            mov     dptr,#_main_buffer_1_177
0CC0 75F040    3132            mov     b,#0x40
0CC3 120100    3133            lcall   _nunchuck_getdata
0CC6           3134   ;        Transmitter_src.c:143: off_x=(int)buffer[0]-128;
0CC6 AE38      3135            mov     r6,_main_buffer_1_177
0CC8 7F00      3136            mov     r7,#0x00
0CCA EE        3137            mov     a,r6
0CCB 2480      3138            add     a,#0x80
0CCD FA        3139            mov     r2,a
0CCE EF        3140            mov     a,r7
0CCF 34FF      3141            addc    a,#0xff
0CD1 FB        3142            mov     r3,a
0CD2           3143   ;        Transmitter_src.c:144: off_y=(int)buffer[1]-128;
0CD2 AE39      3144            mov     r6,(_main_buffer_1_177 + 0x0001)
0CD4 7F00      3145            mov     r7,#0x00
0CD6 EE        3146            mov     a,r6
0CD7 2480      3147            add     a,#0x80
0CD9 F528      3148            mov     _main_off_y_1_177,a
0CDB EF        3149            mov     a,r7
0CDC 34FF      3150            addc    a,#0xff
0CDE F529      3151            mov     (_main_off_y_1_177 + 1),a
0CE0           3152   ;        Transmitter_src.c:145: printf("Offset_X:%4d Offset_Y:%4d\n\n", off_x, off_y);
0CE0 C002      3153            push    ar2
0CE2 C003      3154            push    ar3
0CE4 C028      3155            push    _main_off_y_1_177
0CE6 C029      3156            push    (_main_off_y_1_177 + 1)
0CE8 C002      3157            push    ar2
0CEA C003      3158            push    ar3
0CEC 74A8      3159            mov     a,#__str_12
0CEE C0E0      3160            push    acc
0CF0 74E1      3161            mov     a,#(__str_12 >> 8)
0CF2 C0E0      3162            push    acc
0CF4 7480      3163            mov     a,#0x80
0CF6 C0E0      3164            push    acc
0CF8 120100    3165            lcall   _printf
0CFB E581      3166            mov     a,sp
0CFD 24F9      3167            add     a,#0xf9
0CFF F581      3168            mov     sp,a
0D01 D003      3169            pop     ar3
0D03 D002      3170            pop     ar2
0D05           3171   ;        Transmitter_src.c:146: offset_flag=0; //clear offset flag, so not to re-get offset. 
0D05 C258      3172            clr     _offset_flag
0D07           3173   L040004?:
0D07           3174   ;        Transmitter_src.c:149: waitms(500);
0D07 9001F4    3175            mov     dptr,#0x01F4
0D0A C002      3176            push    ar2
0D0C C003      3177            push    ar3
0D0E 120100    3178            lcall   _waitms
0D11           3179   ;        Transmitter_src.c:151: printf("LAB 6 Microcontroller\r\nWith extra features\r\n\n");
0D11 74E8      3180            mov     a,#__str_13
0D13 C0E0      3181            push    acc
0D15 74E1      3182            mov     a,#(__str_13 >> 8)
0D17 C0E0      3183            push    acc
0D19 7480      3184            mov     a,#0x80
0D1B C0E0      3185            push    acc
0D1D 120100    3186            lcall   _printf
0D20 1581      3187            dec     sp
0D22 1581      3188            dec     sp
0D24 1581      3189            dec     sp
0D26           3190   ;        Transmitter_src.c:152: waitms(500);     
0D26 9001F4    3191            mov     dptr,#0x01F4
0D29 120100    3192            lcall   _waitms
0D2C           3193   ;        Transmitter_src.c:153: LCDprint("Ready", 1, 1);
0D2C 759801    3194            mov     _LCDprint_PARM_2,#0x01
0D2F D2F8      3195            setb    _LCDprint_PARM_3
0D31 90E228    3196            mov     dptr,#__str_14
0D34 75F080    3197            mov     b,#0x80
0D37 120100    3198            lcall   _LCDprint
0D3A D003      3199            pop     ar3
0D3C D002      3200            pop     ar2
0D3E           3201   ;        Transmitter_src.c:158: while(1) {
0D3E           3202   L040015?:
0D3E           3203   ;        Transmitter_src.c:162: if (mode == 0) {
0D3E E5B8      3204            mov     a,_mode
0D40 7001      3205            jnz     L040012?
0D42           3206   ;        Transmitter_src.c:163: printf("Enter command: \r\n");
0D42 C002      3207            push    ar2
0D44 C003      3208            push    ar3
0D46 74E8      3209            mov     a,#__str_15
0D48 C0E0      3210            push    acc
0D4A 74E2      3211            mov     a,#(__str_15 >> 8)
0D4C C0E0      3212            push    acc
0D4E 7480      3213            mov     a,#0x80
0D50 C0E0      3214            push    acc
0D52 120100    3215            lcall   _printf
0D55 1581      3216            dec     sp
0D57 1581      3217            dec     sp
0D59 1581      3218            dec     sp
0D5B           3219   ;        Transmitter_src.c:164: getsn(buffer, CHARS_PER_LINE);
0D5B 757810    3220            mov     _getsn_PARM_2,#0x10
0D5E E4        3221            clr     a
0D5F F579      3222            mov     (_getsn_PARM_2 + 1),a
0D61 90BF38    3223            mov     dptr,#_main_buffer_1_177
0D64 75F040    3224            mov     b,#0x40
0D67 120100    3225            lcall   _getsn
0D6A           3226   ;        Transmitter_src.c:165: getCommand(buffer); //after use, is clear, only used within functions
0D6A 90BF38    3227            mov     dptr,#_main_buffer_1_177
0D6D 75F040    3228            mov     b,#0x40
0D70 120100    3229            lcall   _getCommand
0D73 D003      3230            pop     ar3
0D75 D002      3231            pop     ar2
0D77 8001      3232            sjmp    L040015?
0D79           3233   L040012?:
0D79           3234   ;        Transmitter_src.c:167: } else if (mode == 1) {
0D79 7401      3235            mov     a,#0x01
0D7B B5B868    3236            cjne    a,_mode,L040015?
0D7E           3237   ;        Transmitter_src.c:168: read_nunchuck(&direction, &speed, buffer, off_x, off_y);
0D7E 75F888    3238            mov     _read_nunchuck_PARM_2,#_main_speed_1_177
0D81 75F900    3239            mov     (_read_nunchuck_PARM_2 + 1),#0x00
0D84 75FA40    3240            mov     (_read_nunchuck_PARM_2 + 2),#0x40
0D87 75A838    3241            mov     _read_nunchuck_PARM_3,#_main_buffer_1_177
0D8A 75A900    3242            mov     (_read_nunchuck_PARM_3 + 1),#0x00
0D8D 75AA40    3243            mov     (_read_nunchuck_PARM_3 + 2),#0x40
0D90 8A58      3244            mov     _read_nunchuck_PARM_4,r2
0D92 8B59      3245            mov     (_read_nunchuck_PARM_4 + 1),r3
0D94 852808    3246            mov     _read_nunchuck_PARM_5,_main_off_y_1_177
0D97 852909    3247            mov     (_read_nunchuck_PARM_5 + 1),(_main_off_y_1_177 + 1)
0D9A 90BFD8    3248            mov     dptr,#_main_direction_1_177
0D9D 75F040    3249            mov     b,#0x40
0DA0 C002      3250            push    ar2
0DA2 C003      3251            push    ar3
0DA4 120100    3252            lcall   _read_nunchuck
0DA7 D003      3253            pop     ar3
0DA9 D002      3254            pop     ar2
0DAB           3255   ;        Transmitter_src.c:170: if(speedbit){
0DAB 301828    3256            jnb     _speedbit,L040007?
0DAE           3257   ;        Transmitter_src.c:171: sendCommand(SPEED_OP, speed);
0DAE 8588E8    3258            mov     _sendCommand_PARM_2,_main_speed_1_177
0DB1 758200    3259            mov     dpl,#0x00
0DB4 C002      3260            push    ar2
0DB6 C003      3261            push    ar3
0DB8 120100    3262            lcall   _sendCommand
0DBB D003      3263            pop     ar3
0DBD D002      3264            pop     ar2
0DBF           3265   ;        Transmitter_src.c:172: speedbit=0;
0DBF C218      3266            clr     _speedbit
0DC1 8001      3267            sjmp    L040008?
0DC3           3268   L040007?:
0DC3           3269   ;        Transmitter_src.c:174: sendCommand(DIRECTION_OP, direction);
0DC3 85D8E8    3270            mov     _sendCommand_PARM_2,_main_direction_1_177
0DC6 758201    3271            mov     dpl,#0x01
0DC9 C002      3272            push    ar2
0DCB C003      3273            push    ar3
0DCD 120100    3274            lcall   _sendCommand
0DD0 D003      3275            pop     ar3
0DD2 D002      3276            pop     ar2
0DD4           3277   ;        Transmitter_src.c:175: speedbit=1;
0DD4 D218      3278            setb    _speedbit
0DD6           3279   L040008?:
0DD6           3280   ;        Transmitter_src.c:179: printf("direction: %c   speed: %c \n", direction, speed);
0DD6 E588      3281            mov     a,_main_speed_1_177
0DD8 FE        3282            mov     r6,a
0DD9 33        3283            rlc     a
0DDA 95E0      3284            subb    a,acc
0DDC FF        3285            mov     r7,a
0DDD E5D8      3286            mov     a,_main_direction_1_177
0DDF FC        3287            mov     r4,a
0DE0 33        3288            rlc     a
0DE1 95E0      3289            subb    a,acc
0DE3 FD        3290            mov     r5,a
0DE4 C002      3291            push    ar2
0DE6 C003      3292            push    ar3
0DE8 C006      3293            push    ar6
0DEA C007      3294            push    ar7
0DEC C004      3295            push    ar4
0DEE C005      3296            push    ar5
0DF0 74A8      3297            mov     a,#__str_16
0DF2 C0E0      3298            push    acc
0DF4 74E3      3299            mov     a,#(__str_16 >> 8)
0DF6 C0E0      3300            push    acc
0DF8 7480      3301            mov     a,#0x80
0DFA C0E0      3302            push    acc
0DFC 120100    3303            lcall   _printf
0DFF E581      3304            mov     a,sp
0E01 24F9      3305            add     a,#0xf9
0E03 F581      3306            mov     sp,a
0E05 D003      3307            pop     ar3
0E07 D002      3308            pop     ar2
0E09 020100    3309            ljmp    L040015?
0E0C           3310            rseg R_CSEG
0E0C           3311   
0000           3312            rseg R_XINIT
0000           3313   
0000           3314            rseg R_CONST
0000           3315   __str_0:
0000 53656E74  3316            db 'Sent: %d'
     3A202564
0008 0D        3317            db 0x0D
0009 0A        3318            db 0x0A
000A 00        3319            db 0x00
000B           3320   __str_1:
000B 63206572  3321            db 'c err'
     72
0010 0D        3322            db 0x0D
0011 0A        3323            db 0x0A
0012 00        3324            db 0x00
0013           3325   __str_2:
0013 252A7320  3326            db '%*s %c %c'
     25632025
     63
001C 00        3327            db 0x00
001D           3328   __str_3:
001D 252A7320  3329            db '%*s %u'
     2575
0023 00        3330            db 0x00
0024           3331   __str_4:
0024 53657420  3332            db 'Set timer4 freq to: %d'
     74696D65
     72342066
     72657120
     746F3A20
     2564
003A 0D        3333            db 0x0D
003B 0A        3334            db 0x0A
003C 00        3335            db 0x00
003D           3336   __str_5:
003D 53657420  3337            db 'Set timer4 reload to: %d'
     74696D65
     72342072
     656C6F61
     6420746F
     3A202564
0055 0D        3338            db 0x0D
0056 0A        3339            db 0x0A
0057 00        3340            db 0x00
0058           3341   __str_6:
0058 48656C70  3342            db 'Help Menu'
     204D656E
     75
0061 0D        3343            db 0x0D
0062 0A        3344            db 0x0A
0063 4C697374  3345            db 'List of Commands: '
     206F6620
     436F6D6D
     616E6473
     3A20
0075 0D        3346            db 0x0D
0076 0A        3347            db 0x0A
0077 2D637720  3348            db '-cw [duty value]'
     5B647574
     79207661
     6C75655D
0087 0D        3349            db 0x0D
0088 0A        3350            db 0x0A
0089 2D636377  3351            db '-ccw [duty '
     205B6475
     747920
0094 76616C75  3352            db 'value]'
     655D
009A 0D        3353            db 0x0D
009B 0A        3354            db 0x0A
009C 2D66205B  3355            db '-f [freq value]'
     66726571
     2076616C
     75655D
00AB 0D        3356            db 0x0D
00AC 0A        3357            db 0x0A
00AD 2D72205B  3358            db '-r [reload value]'
     72656C6F
     61642076
     616C7565
     5D
00BE 0D        3359            db 0x0D
00BF 0A        3360            db 0x0A
00C0 2D6F      3361            db '-o'
00C2 0D        3362            db 0x0D
00C3 0A        3363            db 0x0A
00C4 2D73      3364            db '-s'
00C6 0D        3365            db 0x0D
00C7 0A        3366            db 0x0A
00C8 2D69      3367            db '-i'
00CA 0D        3368            db 0x0D
00CB 0A        3369            db 0x0A
00CC 0A        3370            db 0x0A
00CD 00        3371            db 0x00
00CE           3372   __str_7:
00CE 52656C6F  3373            db 'Reload: %u, Freq: %d '
     61643A20
     25752C20
     46726571
     3A202564
     20
00E3 0D        3374            db 0x0D
00E4 0A        3375            db 0x0A
00E5 00        3376            db 0x00
00E6           3377   __str_8:
00E6 22        3378            db 0x22
00E7 2573      3379            db '%s'
00E9 22        3380            db 0x22
00EA 20696E76  3381            db ' invalid command'
     616C6964
     20636F6D
     6D616E64
00FA 0D        3382            db 0x0D
00FB 0A        3383            db 0x0A
00FC 00        3384            db 0x00
00FD           3385   __str_9:
00FD 4E6F7420  3386            db 'Not Valid input'
     56616C69
     6420696E
     707574
010C 0D        3387            db 0x0D
010D 0A        3388            db 0x0A
010E 00        3389            db 0x00
010F           3390   __str_10:
010F 45787465  3391            db 'Extension type: %02x  %02x  %02x  %02x  %02x  %02x'
     6E73696F
     6E207479
     70653A20
     25303278
     20202530
     32782020
     25303278
     20202530
     32782020
     25303278
     20202530
     3278
0141 0A        3392            db 0x0A
0142 00        3393            db 0x00
0143           3394   __str_11:
0143 42757474  3395            db 'Buttons(Z:%c, C:%c) Joystick(%4d, %4d)'
     6F6E7328
     5A3A2563
     2C20433A
     25632920
     4A6F7973
     7469636B
     28253464
     2C202534
     6429
0169 0D        3396            db 0x0D
016A 00        3397            db 0x00
016B           3398   __str_12:
016B 4F666673  3399            db 'Offset_X:%4d Offset_Y:%4d'
     65745F58
     3A253464
     204F6666
     7365745F
     593A2534
     64
0184 0A        3400            db 0x0A
0185 0A        3401            db 0x0A
0186 00        3402            db 0x00
0187           3403   __str_13:
0187 4C414220  3404            db 'LAB 6 Microcontroller'
     36204D69
     63726F63
     6F6E7472
     6F6C6C65
     72
019C 0D        3405            db 0x0D
019D 0A        3406            db 0x0A
019E 57697468  3407            db 'With extra features'
     20657874
     72612066
     65617475
     726573
01B1 0D        3408            db 0x0D
01B2 0A        3409            db 0x0A
01B3 0A        3410            db 0x0A
01B4 00        3411            db 0x00
01B5           3412   __str_14:
01B5 52656164  3413            db 'Ready'
     79
01BA 00        3414            db 0x00
01BB           3415   __str_15:
01BB 456E7465  3416            db 'Enter command: '
     7220636F
     6D6D616E
     643A20
01CA 0D        3417            db 0x0D
01CB 0A        3418            db 0x0A
01CC 00        3419            db 0x00
01CD           3420   __str_16:
01CD 64697265  3421            db 'direction: %c   speed: %c '
     6374696F
     6E3A2025
     63202020
     73706565
     643A2025
     6320
01E7 0A        3422            db 0x0A
01E8 00        3423            db 0x00
01E9           3424   
008E           3425            CSEG
008E           3426   
008E           3427   end
