0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Thu Mar 29 15:05:40 2018
0000              5   ;--------------------------------------------------------
                  5   $name Transmitter_src
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _get_direction_PARM_2
0000             27            public _main
0000             28            public _getsn
0000             29            public __c51_external_startup
0000             30            public _read_nunchuck
0000             31            public _get_direction
0000             32            public _get_speed
0000             33            public _nunchuck_getdata
0000             34            public _nunchuck_init
0000             35            public _I2C_stop
0000             36            public _I2C_start
0000             37            public _I2C_read
0000             38            public _I2C_write
0000             39            public _LCDprint
0000             40            public _LCD_4BIT
0000             41            public _WriteCommand
0000             42            public _WriteData
0000             43            public _LCD_byte
0000             44            public _LCD_pulse
0000             45            public _waitms
0000             46            public _Timer2us
0000             47            public _Tcom_init
0000             48            public _getCommand
0000             49            public _PWMon
0000             50            public _PWMoff
0000             51            public _setReload
0000             52            public _setFrequency
0000             53            public _reloadToFrequency
0000             54            public _frequencyToReload
0000             55            public _sendCommandS
0000             56            public _sendCommand
0000             57            public _Timer4_ISR
0000             58            public _Timer4_init
0000             59            public _Timer2_ISR
0000             60            public _Timer2_init
0000             61            public _Timer0_ISR
0000             62            public _Timer0_init
0000             63            public _getchar1
0000             64            public _putchar1
0000             65            public _UART1_Init
0000             66            public _Z_but
0000             67            public _speedbit
0000             68            public _offset_flag
0000             69            public _nunchuck_init_PARM_1
0000             70            public _LCDprint_PARM_3
0000             71            public _reload_flag
0000             72            public _getsn_PARM_2
0000             73            public _mode
0000             74            public _read_nunchuck_PARM_5
0000             75            public _read_nunchuck_PARM_4
0000             76            public _read_nunchuck_PARM_3
0000             77            public _read_nunchuck_PARM_2
0000             78            public _get_speed_PARM_2
0000             79            public _LCDprint_PARM_2
0000             80            public _sendCommand_PARM_2
0000             81            public _reload4
0000             82            public _freq4
0000             83   ;--------------------------------------------------------
0000             84   ; Special Function Registers
0000             85   ;--------------------------------------------------------
0000             86   _ACC            DATA 0xe0
0000             87   _ADC0ASAH       DATA 0xb6
0000             88   _ADC0ASAL       DATA 0xb5
0000             89   _ADC0ASCF       DATA 0xa1
0000             90   _ADC0ASCT       DATA 0xc7
0000             91   _ADC0CF0        DATA 0xbc
0000             92   _ADC0CF1        DATA 0xb9
0000             93   _ADC0CF2        DATA 0xdf
0000             94   _ADC0CN0        DATA 0xe8
0000             95   _ADC0CN1        DATA 0xb2
0000             96   _ADC0CN2        DATA 0xb3
0000             97   _ADC0GTH        DATA 0xc4
0000             98   _ADC0GTL        DATA 0xc3
0000             99   _ADC0H          DATA 0xbe
0000            100   _ADC0L          DATA 0xbd
0000            101   _ADC0LTH        DATA 0xc6
0000            102   _ADC0LTL        DATA 0xc5
0000            103   _ADC0MX         DATA 0xbb
0000            104   _B              DATA 0xf0
0000            105   _CKCON0         DATA 0x8e
0000            106   _CKCON1         DATA 0xa6
0000            107   _CLEN0          DATA 0xc6
0000            108   _CLIE0          DATA 0xc7
0000            109   _CLIF0          DATA 0xe8
0000            110   _CLKSEL         DATA 0xa9
0000            111   _CLOUT0         DATA 0xd1
0000            112   _CLU0CF         DATA 0xb1
0000            113   _CLU0FN         DATA 0xaf
0000            114   _CLU0MX         DATA 0x84
0000            115   _CLU1CF         DATA 0xb3
0000            116   _CLU1FN         DATA 0xb2
0000            117   _CLU1MX         DATA 0x85
0000            118   _CLU2CF         DATA 0xb6
0000            119   _CLU2FN         DATA 0xb5
0000            120   _CLU2MX         DATA 0x91
0000            121   _CLU3CF         DATA 0xbf
0000            122   _CLU3FN         DATA 0xbe
0000            123   _CLU3MX         DATA 0xae
0000            124   _CMP0CN0        DATA 0x9b
0000            125   _CMP0CN1        DATA 0x99
0000            126   _CMP0MD         DATA 0x9d
0000            127   _CMP0MX         DATA 0x9f
0000            128   _CMP1CN0        DATA 0xbf
0000            129   _CMP1CN1        DATA 0xac
0000            130   _CMP1MD         DATA 0xab
0000            131   _CMP1MX         DATA 0xaa
0000            132   _CRC0CN0        DATA 0xce
0000            133   _CRC0CN1        DATA 0x86
0000            134   _CRC0CNT        DATA 0xd3
0000            135   _CRC0DAT        DATA 0xcb
0000            136   _CRC0FLIP       DATA 0xcf
0000            137   _CRC0IN         DATA 0xca
0000            138   _CRC0ST         DATA 0xd2
0000            139   _DAC0CF0        DATA 0x91
0000            140   _DAC0CF1        DATA 0x92
0000            141   _DAC0H          DATA 0x85
0000            142   _DAC0L          DATA 0x84
0000            143   _DAC1CF0        DATA 0x93
0000            144   _DAC1CF1        DATA 0x94
0000            145   _DAC1H          DATA 0x8a
0000            146   _DAC1L          DATA 0x89
0000            147   _DAC2CF0        DATA 0x95
0000            148   _DAC2CF1        DATA 0x96
0000            149   _DAC2H          DATA 0x8c
0000            150   _DAC2L          DATA 0x8b
0000            151   _DAC3CF0        DATA 0x9a
0000            152   _DAC3CF1        DATA 0x9c
0000            153   _DAC3H          DATA 0x8e
0000            154   _DAC3L          DATA 0x8d
0000            155   _DACGCF0        DATA 0x88
0000            156   _DACGCF1        DATA 0x98
0000            157   _DACGCF2        DATA 0xa2
0000            158   _DERIVID        DATA 0xad
0000            159   _DEVICEID       DATA 0xb5
0000            160   _DPH            DATA 0x83
0000            161   _DPL            DATA 0x82
0000            162   _EIE1           DATA 0xe6
0000            163   _EIE2           DATA 0xf3
0000            164   _EIP1           DATA 0xbb
0000            165   _EIP1H          DATA 0xee
0000            166   _EIP2           DATA 0xed
0000            167   _EIP2H          DATA 0xf6
0000            168   _EMI0CN         DATA 0xe7
0000            169   _FLKEY          DATA 0xb7
0000            170   _HFO0CAL        DATA 0xc7
0000            171   _HFO1CAL        DATA 0xd6
0000            172   _HFOCN          DATA 0xef
0000            173   _I2C0ADM        DATA 0xff
0000            174   _I2C0CN0        DATA 0xba
0000            175   _I2C0DIN        DATA 0xbc
0000            176   _I2C0DOUT       DATA 0xbb
0000            177   _I2C0FCN0       DATA 0xad
0000            178   _I2C0FCN1       DATA 0xab
0000            179   _I2C0FCT        DATA 0xf5
0000            180   _I2C0SLAD       DATA 0xbd
0000            181   _I2C0STAT       DATA 0xb9
0000            182   _IE             DATA 0xa8
0000            183   _IP             DATA 0xb8
0000            184   _IPH            DATA 0xf2
0000            185   _IT01CF         DATA 0xe4
0000            186   _LFO0CN         DATA 0xb1
0000            187   _P0             DATA 0x80
0000            188   _P0MASK         DATA 0xfe
0000            189   _P0MAT          DATA 0xfd
0000            190   _P0MDIN         DATA 0xf1
0000            191   _P0MDOUT        DATA 0xa4
0000            192   _P0SKIP         DATA 0xd4
0000            193   _P1             DATA 0x90
0000            194   _P1MASK         DATA 0xee
0000            195   _P1MAT          DATA 0xed
0000            196   _P1MDIN         DATA 0xf2
0000            197   _P1MDOUT        DATA 0xa5
0000            198   _P1SKIP         DATA 0xd5
0000            199   _P2             DATA 0xa0
0000            200   _P2MASK         DATA 0xfc
0000            201   _P2MAT          DATA 0xfb
0000            202   _P2MDIN         DATA 0xf3
0000            203   _P2MDOUT        DATA 0xa6
0000            204   _P2SKIP         DATA 0xcc
0000            205   _P3             DATA 0xb0
0000            206   _P3MDIN         DATA 0xf4
0000            207   _P3MDOUT        DATA 0x9c
0000            208   _PCA0CENT       DATA 0x9e
0000            209   _PCA0CLR        DATA 0x9c
0000            210   _PCA0CN0        DATA 0xd8
0000            211   _PCA0CPH0       DATA 0xfc
0000            212   _PCA0CPH1       DATA 0xea
0000            213   _PCA0CPH2       DATA 0xec
0000            214   _PCA0CPH3       DATA 0xf5
0000            215   _PCA0CPH4       DATA 0x85
0000            216   _PCA0CPH5       DATA 0xde
0000            217   _PCA0CPL0       DATA 0xfb
0000            218   _PCA0CPL1       DATA 0xe9
0000            219   _PCA0CPL2       DATA 0xeb
0000            220   _PCA0CPL3       DATA 0xf4
0000            221   _PCA0CPL4       DATA 0x84
0000            222   _PCA0CPL5       DATA 0xdd
0000            223   _PCA0CPM0       DATA 0xda
0000            224   _PCA0CPM1       DATA 0xdb
0000            225   _PCA0CPM2       DATA 0xdc
0000            226   _PCA0CPM3       DATA 0xae
0000            227   _PCA0CPM4       DATA 0xaf
0000            228   _PCA0CPM5       DATA 0xcc
0000            229   _PCA0H          DATA 0xfa
0000            230   _PCA0L          DATA 0xf9
0000            231   _PCA0MD         DATA 0xd9
0000            232   _PCA0POL        DATA 0x96
0000            233   _PCA0PWM        DATA 0xf7
0000            234   _PCON0          DATA 0x87
0000            235   _PCON1          DATA 0xcd
0000            236   _PFE0CN         DATA 0xc1
0000            237   _PRTDRV         DATA 0xf6
0000            238   _PSCTL          DATA 0x8f
0000            239   _PSTAT0         DATA 0xaa
0000            240   _PSW            DATA 0xd0
0000            241   _REF0CN         DATA 0xd1
0000            242   _REG0CN         DATA 0xc9
0000            243   _REVID          DATA 0xb6
0000            244   _RSTSRC         DATA 0xef
0000            245   _SBCON1         DATA 0x94
0000            246   _SBRLH1         DATA 0x96
0000            247   _SBRLL1         DATA 0x95
0000            248   _SBUF           DATA 0x99
0000            249   _SBUF0          DATA 0x99
0000            250   _SBUF1          DATA 0x92
0000            251   _SCON           DATA 0x98
0000            252   _SCON0          DATA 0x98
0000            253   _SCON1          DATA 0xc8
0000            254   _SFRPAGE        DATA 0xa7
0000            255   _SFRPGCN        DATA 0xbc
0000            256   _SFRSTACK       DATA 0xd7
0000            257   _SMB0ADM        DATA 0xd6
0000            258   _SMB0ADR        DATA 0xd7
0000            259   _SMB0CF         DATA 0xc1
0000            260   _SMB0CN0        DATA 0xc0
0000            261   _SMB0DAT        DATA 0xc2
0000            262   _SMB0FCN0       DATA 0xc3
0000            263   _SMB0FCN1       DATA 0xc4
0000            264   _SMB0FCT        DATA 0xef
0000            265   _SMB0RXLN       DATA 0xc5
0000            266   _SMB0TC         DATA 0xac
0000            267   _SMOD1          DATA 0x93
0000            268   _SP             DATA 0x81
0000            269   _SPI0CFG        DATA 0xa1
0000            270   _SPI0CKR        DATA 0xa2
0000            271   _SPI0CN0        DATA 0xf8
0000            272   _SPI0DAT        DATA 0xa3
0000            273   _SPI0FCN0       DATA 0x9a
0000            274   _SPI0FCN1       DATA 0x9b
0000            275   _SPI0FCT        DATA 0xf7
0000            276   _SPI0PCF        DATA 0xdf
0000            277   _TCON           DATA 0x88
0000            278   _TH0            DATA 0x8c
0000            279   _TH1            DATA 0x8d
0000            280   _TL0            DATA 0x8a
0000            281   _TL1            DATA 0x8b
0000            282   _TMOD           DATA 0x89
0000            283   _TMR2CN0        DATA 0xc8
0000            284   _TMR2CN1        DATA 0xfd
0000            285   _TMR2H          DATA 0xcf
0000            286   _TMR2L          DATA 0xce
0000            287   _TMR2RLH        DATA 0xcb
0000            288   _TMR2RLL        DATA 0xca
0000            289   _TMR3CN0        DATA 0x91
0000            290   _TMR3CN1        DATA 0xfe
0000            291   _TMR3H          DATA 0x95
0000            292   _TMR3L          DATA 0x94
0000            293   _TMR3RLH        DATA 0x93
0000            294   _TMR3RLL        DATA 0x92
0000            295   _TMR4CN0        DATA 0x98
0000            296   _TMR4CN1        DATA 0xff
0000            297   _TMR4H          DATA 0xa5
0000            298   _TMR4L          DATA 0xa4
0000            299   _TMR4RLH        DATA 0xa3
0000            300   _TMR4RLL        DATA 0xa2
0000            301   _TMR5CN0        DATA 0xc0
0000            302   _TMR5CN1        DATA 0xf1
0000            303   _TMR5H          DATA 0xd5
0000            304   _TMR5L          DATA 0xd4
0000            305   _TMR5RLH        DATA 0xd3
0000            306   _TMR5RLL        DATA 0xd2
0000            307   _UART0PCF       DATA 0xd9
0000            308   _UART1FCN0      DATA 0x9d
0000            309   _UART1FCN1      DATA 0xd8
0000            310   _UART1FCT       DATA 0xfa
0000            311   _UART1LIN       DATA 0x9e
0000            312   _UART1PCF       DATA 0xda
0000            313   _VDM0CN         DATA 0xff
0000            314   _WDTCN          DATA 0x97
0000            315   _XBR0           DATA 0xe1
0000            316   _XBR1           DATA 0xe2
0000            317   _XBR2           DATA 0xe3
0000            318   _XOSC0CN        DATA 0x86
0000            319   _DPTR           DATA 0x8382
0000            320   _TMR2RL         DATA 0xcbca
0000            321   _TMR3RL         DATA 0x9392
0000            322   _TMR4RL         DATA 0xa3a2
0000            323   _TMR5RL         DATA 0xd3d2
0000            324   _TMR0           DATA 0x8c8a
0000            325   _TMR1           DATA 0x8d8b
0000            326   _TMR2           DATA 0xcfce
0000            327   _TMR3           DATA 0x9594
0000            328   _TMR4           DATA 0xa5a4
0000            329   _TMR5           DATA 0xd5d4
0000            330   _SBRL1          DATA 0x9695
0000            331   _PCA0           DATA 0xfaf9
0000            332   _PCA0CP0        DATA 0xfcfb
0000            333   _PCA0CP1        DATA 0xeae9
0000            334   _PCA0CP2        DATA 0xeceb
0000            335   _PCA0CP3        DATA 0xf5f4
0000            336   _PCA0CP4        DATA 0x8584
0000            337   _PCA0CP5        DATA 0xdedd
0000            338   _ADC0ASA        DATA 0xb6b5
0000            339   _ADC0GT         DATA 0xc4c3
0000            340   _ADC0           DATA 0xbebd
0000            341   _ADC0LT         DATA 0xc6c5
0000            342   _DAC0           DATA 0x8584
0000            343   _DAC1           DATA 0x8a89
0000            344   _DAC2           DATA 0x8c8b
0000            345   _DAC3           DATA 0x8e8d
0000            346   ;--------------------------------------------------------
0000            347   ; special function bits
0000            348   ;--------------------------------------------------------
0000            349   _ACC_0          BIT 0xe0
0000            350   _ACC_1          BIT 0xe1
0000            351   _ACC_2          BIT 0xe2
0000            352   _ACC_3          BIT 0xe3
0000            353   _ACC_4          BIT 0xe4
0000            354   _ACC_5          BIT 0xe5
0000            355   _ACC_6          BIT 0xe6
0000            356   _ACC_7          BIT 0xe7
0000            357   _TEMPE          BIT 0xe8
0000            358   _ADGN0          BIT 0xe9
0000            359   _ADGN1          BIT 0xea
0000            360   _ADWINT         BIT 0xeb
0000            361   _ADBUSY         BIT 0xec
0000            362   _ADINT          BIT 0xed
0000            363   _IPOEN          BIT 0xee
0000            364   _ADEN           BIT 0xef
0000            365   _B_0            BIT 0xf0
0000            366   _B_1            BIT 0xf1
0000            367   _B_2            BIT 0xf2
0000            368   _B_3            BIT 0xf3
0000            369   _B_4            BIT 0xf4
0000            370   _B_5            BIT 0xf5
0000            371   _B_6            BIT 0xf6
0000            372   _B_7            BIT 0xf7
0000            373   _C0FIF          BIT 0xe8
0000            374   _C0RIF          BIT 0xe9
0000            375   _C1FIF          BIT 0xea
0000            376   _C1RIF          BIT 0xeb
0000            377   _C2FIF          BIT 0xec
0000            378   _C2RIF          BIT 0xed
0000            379   _C3FIF          BIT 0xee
0000            380   _C3RIF          BIT 0xef
0000            381   _D1SRC0         BIT 0x88
0000            382   _D1SRC1         BIT 0x89
0000            383   _D1AMEN         BIT 0x8a
0000            384   _D01REFSL       BIT 0x8b
0000            385   _D3SRC0         BIT 0x8c
0000            386   _D3SRC1         BIT 0x8d
0000            387   _D3AMEN         BIT 0x8e
0000            388   _D23REFSL       BIT 0x8f
0000            389   _D0UDIS         BIT 0x98
0000            390   _D1UDIS         BIT 0x99
0000            391   _D2UDIS         BIT 0x9a
0000            392   _D3UDIS         BIT 0x9b
0000            393   _EX0            BIT 0xa8
0000            394   _ET0            BIT 0xa9
0000            395   _EX1            BIT 0xaa
0000            396   _ET1            BIT 0xab
0000            397   _ES0            BIT 0xac
0000            398   _ET2            BIT 0xad
0000            399   _ESPI0          BIT 0xae
0000            400   _EA             BIT 0xaf
0000            401   _PX0            BIT 0xb8
0000            402   _PT0            BIT 0xb9
0000            403   _PX1            BIT 0xba
0000            404   _PT1            BIT 0xbb
0000            405   _PS0            BIT 0xbc
0000            406   _PT2            BIT 0xbd
0000            407   _PSPI0          BIT 0xbe
0000            408   _P0_0           BIT 0x80
0000            409   _P0_1           BIT 0x81
0000            410   _P0_2           BIT 0x82
0000            411   _P0_3           BIT 0x83
0000            412   _P0_4           BIT 0x84
0000            413   _P0_5           BIT 0x85
0000            414   _P0_6           BIT 0x86
0000            415   _P0_7           BIT 0x87
0000            416   _P1_0           BIT 0x90
0000            417   _P1_1           BIT 0x91
0000            418   _P1_2           BIT 0x92
0000            419   _P1_3           BIT 0x93
0000            420   _P1_4           BIT 0x94
0000            421   _P1_5           BIT 0x95
0000            422   _P1_6           BIT 0x96
0000            423   _P1_7           BIT 0x97
0000            424   _P2_0           BIT 0xa0
0000            425   _P2_1           BIT 0xa1
0000            426   _P2_2           BIT 0xa2
0000            427   _P2_3           BIT 0xa3
0000            428   _P2_4           BIT 0xa4
0000            429   _P2_5           BIT 0xa5
0000            430   _P2_6           BIT 0xa6
0000            431   _P3_0           BIT 0xb0
0000            432   _P3_1           BIT 0xb1
0000            433   _P3_2           BIT 0xb2
0000            434   _P3_3           BIT 0xb3
0000            435   _P3_4           BIT 0xb4
0000            436   _P3_7           BIT 0xb7
0000            437   _CCF0           BIT 0xd8
0000            438   _CCF1           BIT 0xd9
0000            439   _CCF2           BIT 0xda
0000            440   _CCF3           BIT 0xdb
0000            441   _CCF4           BIT 0xdc
0000            442   _CCF5           BIT 0xdd
0000            443   _CR             BIT 0xde
0000            444   _CF             BIT 0xdf
0000            445   _PARITY         BIT 0xd0
0000            446   _F1             BIT 0xd1
0000            447   _OV             BIT 0xd2
0000            448   _RS0            BIT 0xd3
0000            449   _RS1            BIT 0xd4
0000            450   _F0             BIT 0xd5
0000            451   _AC             BIT 0xd6
0000            452   _CY             BIT 0xd7
0000            453   _RI             BIT 0x98
0000            454   _TI             BIT 0x99
0000            455   _RB8            BIT 0x9a
0000            456   _TB8            BIT 0x9b
0000            457   _REN            BIT 0x9c
0000            458   _CE             BIT 0x9d
0000            459   _SMODE          BIT 0x9e
0000            460   _RI1            BIT 0xc8
0000            461   _TI1            BIT 0xc9
0000            462   _RBX1           BIT 0xca
0000            463   _TBX1           BIT 0xcb
0000            464   _REN1           BIT 0xcc
0000            465   _PERR1          BIT 0xcd
0000            466   _OVR1           BIT 0xce
0000            467   _SI             BIT 0xc0
0000            468   _ACK            BIT 0xc1
0000            469   _ARBLOST        BIT 0xc2
0000            470   _ACKRQ          BIT 0xc3
0000            471   _STO            BIT 0xc4
0000            472   _STA            BIT 0xc5
0000            473   _TXMODE         BIT 0xc6
0000            474   _MASTER         BIT 0xc7
0000            475   _SPIEN          BIT 0xf8
0000            476   _TXNF           BIT 0xf9
0000            477   _NSSMD0         BIT 0xfa
0000            478   _NSSMD1         BIT 0xfb
0000            479   _RXOVRN         BIT 0xfc
0000            480   _MODF           BIT 0xfd
0000            481   _WCOL           BIT 0xfe
0000            482   _SPIF           BIT 0xff
0000            483   _IT0            BIT 0x88
0000            484   _IE0            BIT 0x89
0000            485   _IT1            BIT 0x8a
0000            486   _IE1            BIT 0x8b
0000            487   _TR0            BIT 0x8c
0000            488   _TF0            BIT 0x8d
0000            489   _TR1            BIT 0x8e
0000            490   _TF1            BIT 0x8f
0000            491   _T2XCLK0        BIT 0xc8
0000            492   _T2XCLK1        BIT 0xc9
0000            493   _TR2            BIT 0xca
0000            494   _T2SPLIT        BIT 0xcb
0000            495   _TF2CEN         BIT 0xcc
0000            496   _TF2LEN         BIT 0xcd
0000            497   _TF2L           BIT 0xce
0000            498   _TF2H           BIT 0xcf
0000            499   _T4XCLK0        BIT 0x98
0000            500   _T4XCLK1        BIT 0x99
0000            501   _TR4            BIT 0x9a
0000            502   _T4SPLIT        BIT 0x9b
0000            503   _TF4CEN         BIT 0x9c
0000            504   _TF4LEN         BIT 0x9d
0000            505   _TF4L           BIT 0x9e
0000            506   _TF4H           BIT 0x9f
0000            507   _T5XCLK0        BIT 0xc0
0000            508   _T5XCLK1        BIT 0xc1
0000            509   _TR5            BIT 0xc2
0000            510   _T5SPLIT        BIT 0xc3
0000            511   _TF5CEN         BIT 0xc4
0000            512   _TF5LEN         BIT 0xc5
0000            513   _TF5L           BIT 0xc6
0000            514   _TF5H           BIT 0xc7
0000            515   _RIE            BIT 0xd8
0000            516   _RXTO0          BIT 0xd9
0000            517   _RXTO1          BIT 0xda
0000            518   _RFRQ           BIT 0xdb
0000            519   _TIE            BIT 0xdc
0000            520   _TXHOLD         BIT 0xdd
0000            521   _TXNF1          BIT 0xde
0000            522   _TFRQ           BIT 0xdf
0000            523   ;--------------------------------------------------------
0000            524   ; overlayable register banks
0000            525   ;--------------------------------------------------------
0000            526            rbank0 segment data overlay
0000            527   ;--------------------------------------------------------
0000            528   ; internal ram data
0000            529   ;--------------------------------------------------------
0000            530            rseg R_DSEG
0000            531   _freq4:
0000            532            ds 2
0002            533   _reload4:
0002            534            ds 2
0004            535   _sendCommand_PARM_2:
0004            536            ds 1
0005            537   _sendCommandS_op_1_88:
0005            538            ds 1
0006            539   _sendCommandS_d_1_88:
0006            540            ds 1
0007            541   _LCDprint_PARM_2:
0007            542            ds 1
0008            543   _nunchuck_init_buf_1_134:
0008            544            ds 6
000E            545   _nunchuck_init_sloc0_1_0:
000E            546            ds 2
0010            547   _nunchuck_init_sloc1_1_0:
0010            548            ds 2
0012            549   _nunchuck_init_sloc2_1_0:
0012            550            ds 2
0014            551   _get_speed_PARM_2:
0014            552            ds 1
0015            553   _read_nunchuck_PARM_2:
0015            554            ds 3
0018            555   _read_nunchuck_PARM_3:
0018            556            ds 3
001B            557   _read_nunchuck_PARM_4:
001B            558            ds 2
001D            559   _read_nunchuck_PARM_5:
001D            560            ds 2
001F            561   _read_nunchuck_direction_1_167:
001F            562            ds 3
0022            563   _mode:
0022            564            ds 1
0023            565   _getsn_PARM_2:
0023            566            ds 2
0025            567   _getsn_buff_1_171:
0025            568            ds 3
0028            569   _getsn_sloc0_1_0:
0028            570            ds 2
002A            571   _main_buffer_1_177:
002A            572            ds 6
0030            573   _main_speed_1_177:
0030            574            ds 1
0031            575   _main_direction_1_177:
0031            576            ds 1
0032            577   _main_off_y_1_177:
0032            578            ds 2
0034            579   ;--------------------------------------------------------
0034            580   ; overlayable items in internal ram 
0034            581   ;--------------------------------------------------------
0000            582            rseg    R_OSEG
0000            583            rseg    R_OSEG
0000            584            rseg    R_OSEG
0000            585            rseg    R_OSEG
0000            586            rseg    R_OSEG
0000            587            rseg    R_OSEG
0000            588   _get_direction_PARM_2:
0000            589            ds 1
0001            590   ;--------------------------------------------------------
0001            591   ; indirectly addressable internal ram data
0001            592   ;--------------------------------------------------------
0000            593            rseg R_ISEG
0000            594   ;--------------------------------------------------------
0000            595   ; absolute internal ram data
0000            596   ;--------------------------------------------------------
0000            597            DSEG
0000            598   ;--------------------------------------------------------
0000            599   ; bit data
0000            600   ;--------------------------------------------------------
0000            601            rseg R_BSEG
0000            602   _reload_flag:
0000            603            DBIT    1
0001            604   _LCDprint_PARM_3:
0001            605            DBIT    1
0002            606   _nunchuck_init_PARM_1:
0002            607            DBIT    1
0003            608   _read_nunchuck_Z_but_1_168:
0003            609            DBIT    1
0004            610   _offset_flag:
0004            611            DBIT    1
0005            612   _speedbit:
0005            613            DBIT    1
0006            614   _Z_but:
0006            615            DBIT    1
0007            616   ;--------------------------------------------------------
0007            617   ; paged external ram data
0007            618   ;--------------------------------------------------------
0000            619            rseg R_PSEG
0000            620   ;--------------------------------------------------------
0000            621   ; external ram data
0000            622   ;--------------------------------------------------------
0000            623            rseg R_XSEG
0000            624   ;--------------------------------------------------------
0000            625   ; absolute external ram data
0000            626   ;--------------------------------------------------------
0000            627            XSEG
0000            628   ;--------------------------------------------------------
0000            629   ; external initialized ram data
0000            630   ;--------------------------------------------------------
0000            631            rseg R_IXSEG
0000            632            rseg R_HOME
0000            633            rseg R_GSINIT
0000            634            rseg R_CSEG
0000            635   ;--------------------------------------------------------
0000            636   ; Reset entry point and interrupt vectors
0000            637   ;--------------------------------------------------------
0000            638            CSEG at 0x0000
0000 020100     639            ljmp    _crt0
000B            640            CSEG at 0x000b
000B 020100     641            ljmp    _Timer0_ISR
002B            642            CSEG at 0x002b
002B 020100     643            ljmp    _Timer2_ISR
008B            644            CSEG at 0x008b
008B 020100     645            ljmp    _Timer4_ISR
008E            646   ;--------------------------------------------------------
008E            647   ; global & static initialisations
008E            648   ;--------------------------------------------------------
0000            649            rseg R_HOME
0000            650            rseg R_GSINIT
0000            651            rseg R_GSINIT
0000            652   ;--------------------------------------------------------
0000            653   ; data variables initialization
0000            654   ;--------------------------------------------------------
0000            655            rseg R_DINIT
0000            656   ;        Tcom.h:29: unsigned int freq4 = 15000;
0000 75C098     657            mov     _freq4,#0x98
0003 75C13A     658            mov     (_freq4 + 1),#0x3A
0006            659   ;        Tcom.h:30: unsigned int reload4 = 65109;
0006 758055     660            mov     _reload4,#0x55
0009 7581FE     661            mov     (_reload4 + 1),#0xFE
000C            662   ;        Transmitter_src.c:17: volatile unsigned char mode = 1;
000C 751001     663            mov     _mode,#0x01
000F            664   ;        Tcom.h:28: volatile bit reload_flag = 0;
000F C290       665            clr     _reload_flag
0011            666   ;        Transmitter_src.c:13: volatile unsigned bit offset_flag=1;
0011 D2B0       667            setb    _offset_flag
0013            668   ;        Transmitter_src.c:14: volatile unsigned bit speedbit=1;
0013 D270       669            setb    _speedbit
0015            670   ;        Transmitter_src.c:15: volatile unsigned bit  Z_but=0;
0015 C290       671            clr     _Z_but
0017            672            ; The linker places a 'ret' at the end of segment R_DINIT.
0017            673   ;--------------------------------------------------------
0017            674   ; code
0017            675   ;--------------------------------------------------------
0000            676            rseg R_CSEG
0000            677   ;------------------------------------------------------------
0000            678   ;Allocation info for local variables in function 'UART1_Init'
0000            679   ;------------------------------------------------------------
0000            680   ;baudrate                  Allocated to registers r2 r3 r4 r5 
0000            681   ;------------------------------------------------------------
0000            682   ;        EFM8UART1lib.h:11: void UART1_Init (unsigned long baudrate)
0000            683   ;        -----------------------------------------
0000            684   ;         function UART1_Init
0000            685   ;        -----------------------------------------
0000            686   _UART1_Init:
0000            687            using   0
0000 AA82       688            mov     r2,dpl
0002 AB83       689            mov     r3,dph
0004 ACF0       690            mov     r4,b
0006 FD         691            mov     r5,a
0007            692   ;        EFM8UART1lib.h:13: SFRPAGE = 0x20;
0007 75A720     693            mov     _SFRPAGE,#0x20
000A            694   ;        EFM8UART1lib.h:14: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
000A 75930C     695            mov     _SMOD1,#0x0C
000D            696   ;        EFM8UART1lib.h:15: SCON1 = 0x10; //Receive fifo overrun flag = 0; Parity Error Flag = 0; 0; Receive enable flag = 1; TBX = 0; RBX = 0; Transmit Interrupt Flag = 0; Receive Interrupt FLag = 0;
000D 75C810     697            mov     _SCON1,#0x10
0010            698   ;        EFM8UART1lib.h:16: SBCON1 =0x00;   // disable baud rate generator
0010 759400     699            mov     _SBCON1,#0x00
0013            700   ;        EFM8UART1lib.h:17: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));  //Baud rate reload
0013 8A00       701            mov     __divulong_PARM_2,r2
0015 8B01       702            mov     (__divulong_PARM_2 + 1),r3
0017 8C02       703            mov     (__divulong_PARM_2 + 2),r4
0019 8D03       704            mov     (__divulong_PARM_2 + 3),r5
001B 90A200     705            mov     dptr,#0xA200
001E 75F04A     706            mov     b,#0x4A
0021 7404       707            mov     a,#0x04
0023 120100     708            lcall   __divulong
0026 AA82       709            mov     r2,dpl
0028 AB83       710            mov     r3,dph
002A ACF0       711            mov     r4,b
002C FD         712            mov     r5,a
002D 750018     713            mov     __divulong_PARM_2,#0x18
0030 E4         714            clr     a
0031 F501       715            mov     (__divulong_PARM_2 + 1),a
0033 F502       716            mov     (__divulong_PARM_2 + 2),a
0035 F503       717            mov     (__divulong_PARM_2 + 3),a
0037 8A82       718            mov     dpl,r2
0039 8B83       719            mov     dph,r3
003B 8CF0       720            mov     b,r4
003D ED         721            mov     a,r5
003E 120100     722            lcall   __divulong
0041 AA82       723            mov     r2,dpl
0043 AB83       724            mov     r3,dph
0045 ACF0       725            mov     r4,b
0047 FD         726            mov     r5,a
0048 E4         727            clr     a
0049 C3         728            clr     c
004A 9A         729            subb    a,r2
004B FA         730            mov     r2,a
004C E4         731            clr     a
004D 9B         732            subb    a,r3
004E FB         733            mov     r3,a
004F 7401       734            mov     a,#0x01
0051 9C         735            subb    a,r4
0052 E4         736            clr     a
0053 9D         737            subb    a,r5
0054 8A95       738            mov     _SBRL1,r2
0056 8B96       739            mov     (_SBRL1 >> 8),r3
0058            740   ;        EFM8UART1lib.h:18: TI1 = 1; // indicate ready for TX
0058 D2C9       741            setb    _TI1
005A            742   ;        EFM8UART1lib.h:19: SBCON1 |= 0x40;   // enable baud rate generator
005A 439440     743            orl     _SBCON1,#0x40
005D            744   ;        EFM8UART1lib.h:20: SFRPAGE = 0x00;
005D 75A700     745            mov     _SFRPAGE,#0x00
0060 22         746            ret
0061            747   ;------------------------------------------------------------
0061            748   ;Allocation info for local variables in function 'putchar1'
0061            749   ;------------------------------------------------------------
0061            750   ;c                         Allocated to registers r2 
0061            751   ;------------------------------------------------------------
0061            752   ;        EFM8UART1lib.h:23: void putchar1 (char c) 
0061            753   ;        -----------------------------------------
0061            754   ;         function putchar1
0061            755   ;        -----------------------------------------
0061            756   _putchar1:
0061 AA82       757            mov     r2,dpl
0063            758   ;        EFM8UART1lib.h:25: SFRPAGE = 0x20;
0063 75A720     759            mov     _SFRPAGE,#0x20
0066            760   ;        EFM8UART1lib.h:26: if (c == '\n') 
0066 BA0AB0     761            cjne    r2,#0x0A,L003006?
0069            762   ;        EFM8UART1lib.h:28: while (!TI1);
0069            763   L003001?:
0069            764   ;        EFM8UART1lib.h:29: TI1=0;
0069 10C930     765            jbc     _TI1,L003017?
006C 8001       766            sjmp    L003001?
006E            767   L003017?:
006E            768   ;        EFM8UART1lib.h:30: SBUF1 = '\r';
006E 75920D     769            mov     _SBUF1,#0x0D
0071            770   ;        EFM8UART1lib.h:32: while (!TI1);
0071            771   L003006?:
0071            772   ;        EFM8UART1lib.h:33: TI1=0;
0071 10C970     773            jbc     _TI1,L003018?
0074 8001       774            sjmp    L003006?
0076            775   L003018?:
0076            776   ;        EFM8UART1lib.h:34: SBUF1 = c;
0076 8A92       777            mov     _SBUF1,r2
0078            778   ;        EFM8UART1lib.h:35: SFRPAGE = 0x00;
0078 75A700     779            mov     _SFRPAGE,#0x00
007B 22         780            ret
007C            781   ;------------------------------------------------------------
007C            782   ;Allocation info for local variables in function 'getchar1'
007C            783   ;------------------------------------------------------------
007C            784   ;c                         Allocated to registers 
007C            785   ;------------------------------------------------------------
007C            786   ;        EFM8UART1lib.h:38: char getchar1 (void)
007C            787   ;        -----------------------------------------
007C            788   ;         function getchar1
007C            789   ;        -----------------------------------------
007C            790   _getchar1:
007C            791   ;        EFM8UART1lib.h:41: SFRPAGE = 0x20;
007C 75A720     792            mov     _SFRPAGE,#0x20
007F            793   ;        EFM8UART1lib.h:42: while (!RI1);
007F            794   L004001?:
007F            795   ;        EFM8UART1lib.h:43: RI1=0;
007F 10C8F0     796            jbc     _RI1,L004008?
0082 8001       797            sjmp    L004001?
0084            798   L004008?:
0084            799   ;        EFM8UART1lib.h:45: SCON1&=0b_0011_1111;
0084 53C83F     800            anl     _SCON1,#0x3F
0087            801   ;        EFM8UART1lib.h:46: c = SBUF1;
0087 859282     802            mov     dpl,_SBUF1
008A            803   ;        EFM8UART1lib.h:47: SFRPAGE = 0x00;
008A 75A700     804            mov     _SFRPAGE,#0x00
008D            805   ;        EFM8UART1lib.h:48: return (c);
008D 22         806            ret
008E            807   ;------------------------------------------------------------
008E            808   ;Allocation info for local variables in function 'Timer0_init'
008E            809   ;------------------------------------------------------------
008E            810   ;------------------------------------------------------------
008E            811   ;        Tcom.h:34: void Timer0_init(void){
008E            812   ;        -----------------------------------------
008E            813   ;         function Timer0_init
008E            814   ;        -----------------------------------------
008E            815   _Timer0_init:
008E            816   ;        Tcom.h:37: CKCON0 |= 0b_0000_0100; // Timer0 clock source = SYSCLK/12
008E 438E04     817            orl     _CKCON0,#0x04
0091            818   ;        Tcom.h:38: TMOD &= 0xf0;  // Mask out timer 1 bits
0091 5389F0     819            anl     _TMOD,#0xF0
0094            820   ;        Tcom.h:39: TMOD |= 0x02;  // Timer0 in 8-bit auto-reload mode
0094 438902     821            orl     _TMOD,#0x02
0097            822   ;        Tcom.h:41: TL0 = TH0 = 256-(SYSCLK/SMB_FREQUENCY/3);
0097 758C10     823            mov     _TH0,#0x10
009A 758A10     824            mov     _TL0,#0x10
009D            825   ;        Tcom.h:42: TR0 = 1; // Enable timer 0
009D D28C       826            setb    _TR0
009F 22         827            ret
00A0            828   ;------------------------------------------------------------
00A0            829   ;Allocation info for local variables in function 'Timer0_ISR'
00A0            830   ;------------------------------------------------------------
00A0            831   ;------------------------------------------------------------
00A0            832   ;        Tcom.h:47: void Timer0_ISR (void) interrupt INTERRUPT_TIMER0 {
00A0            833   ;        -----------------------------------------
00A0            834   ;         function Timer0_ISR
00A0            835   ;        -----------------------------------------
00A0            836   _Timer0_ISR:
00A0            837   ;        Tcom.h:48: TF0 = 0;
00A0 C28D       838            clr     _TF0
00A2            839   ;        Tcom.h:49: SI=0;
00A2 C2C0       840            clr     _SI
00A4 32         841            reti
00A5            842   ;        eliminated unneeded push/pop psw
00A5            843   ;        eliminated unneeded push/pop dpl
00A5            844   ;        eliminated unneeded push/pop dph
00A5            845   ;        eliminated unneeded push/pop b
00A5            846   ;        eliminated unneeded push/pop acc
00A5            847   ;------------------------------------------------------------
00A5            848   ;Allocation info for local variables in function 'Timer2_init'
00A5            849   ;------------------------------------------------------------
00A5            850   ;------------------------------------------------------------
00A5            851   ;        Tcom.h:54: void Timer2_init(void) {
00A5            852   ;        -----------------------------------------
00A5            853   ;         function Timer2_init
00A5            854   ;        -----------------------------------------
00A5            855   _Timer2_init:
00A5            856   ;        Tcom.h:55: TMR2CN0=0b_0000_0000;   // Stop Timer2; Clear TF2; T2XCLK uses Sysclk/12
00A5 75C800     857            mov     _TMR2CN0,#0x00
00A8            858   ;        Tcom.h:56: CKCON0|=0b_0000_0000; // Timer 2 uses the system clock; Timer2 uses T2XCLK
00A8 858E8E     859            mov     _CKCON0,_CKCON0
00AB            860   ;        Tcom.h:57: TMR2RL=64936; //Initilizes reload value for 100hz;
00AB 75CAA8     861            mov     _TMR2RL,#0xA8
00AE 75CBFD     862            mov     (_TMR2RL >> 8),#0xFD
00B1            863   ;        Tcom.h:58: TMR2=0xffff;   // Set to reload immediately
00B1 75CEFF     864            mov     _TMR2,#0xFF
00B4 75CFFF     865            mov     (_TMR2 >> 8),#0xFF
00B7            866   ;        Tcom.h:59: ET2=0;         // Enable Timer2 interrupts
00B7 C2AD       867            clr     _ET2
00B9            868   ;        Tcom.h:60: TR2=1;         // Start Timer2 (TMR2CN is bit addressable)
00B9 D2CA       869            setb    _TR2
00BB 22         870            ret
00BC            871   ;------------------------------------------------------------
00BC            872   ;Allocation info for local variables in function 'Timer2_ISR'
00BC            873   ;------------------------------------------------------------
00BC            874   ;------------------------------------------------------------
00BC            875   ;        Tcom.h:63: void Timer2_ISR (void) interrupt 5 {
00BC            876   ;        -----------------------------------------
00BC            877   ;         function Timer2_ISR
00BC            878   ;        -----------------------------------------
00BC            879   _Timer2_ISR:
00BC            880   ;        Tcom.h:64: SFRPAGE=0x00;
00BC 75A700     881            mov     _SFRPAGE,#0x00
00BF            882   ;        Tcom.h:66: TF2H = 0; // Clear Timer2 interrupt flag
00BF C2CF       883            clr     _TF2H
00C1 32         884            reti
00C2            885   ;        eliminated unneeded push/pop psw
00C2            886   ;        eliminated unneeded push/pop dpl
00C2            887   ;        eliminated unneeded push/pop dph
00C2            888   ;        eliminated unneeded push/pop b
00C2            889   ;        eliminated unneeded push/pop acc
00C2            890   ;------------------------------------------------------------
00C2            891   ;Allocation info for local variables in function 'Timer4_init'
00C2            892   ;------------------------------------------------------------
00C2            893   ;------------------------------------------------------------
00C2            894   ;        Tcom.h:88: void Timer4_init(void) {
00C2            895   ;        -----------------------------------------
00C2            896   ;         function Timer4_init
00C2            897   ;        -----------------------------------------
00C2            898   _Timer4_init:
00C2            899   ;        Tcom.h:89: SFRPAGE=0x10;
00C2 75A710     900            mov     _SFRPAGE,#0x10
00C5            901   ;        Tcom.h:90: TMR4CN0=0b_0000_0000;
00C5 759800     902            mov     _TMR4CN0,#0x00
00C8            903   ;        Tcom.h:91: TMR4CN1=0b_0110_0000;
00C8 75FF60     904            mov     _TMR4CN1,#0x60
00CB            905   ;        Tcom.h:93: TMR4RL=reload4; //reload = 2^16 - (SYSCLK/12)/(F*2); 15kHz
00CB 8580A2     906            mov     _TMR4RL,_reload4
00CE 8581A3     907            mov     (_TMR4RL >> 8),(_reload4 + 1)
00D1            908   ;        Tcom.h:94: TMR4=0xffff;
00D1 75A4FF     909            mov     _TMR4,#0xFF
00D4 75A5FF     910            mov     (_TMR4 >> 8),#0xFF
00D7            911   ;        Tcom.h:96: EIE2|=0b_0000_0100;
00D7 43F304     912            orl     _EIE2,#0x04
00DA            913   ;        Tcom.h:97: TR4=1;
00DA D29A       914            setb    _TR4
00DC            915   ;        Tcom.h:98: SFRPAGE=0x00;
00DC 75A700     916            mov     _SFRPAGE,#0x00
00DF 22         917            ret
00E0            918   ;------------------------------------------------------------
00E0            919   ;Allocation info for local variables in function 'Timer4_ISR'
00E0            920   ;------------------------------------------------------------
00E0            921   ;------------------------------------------------------------
00E0            922   ;        Tcom.h:102: void Timer4_ISR(void) interrupt INTERRUPT_TIMER4 {
00E0            923   ;        -----------------------------------------
00E0            924   ;         function Timer4_ISR
00E0            925   ;        -----------------------------------------
00E0            926   _Timer4_ISR:
00E0            927   ;        Tcom.h:103: reload_flag = 1;
00E0 D290       928            setb    _reload_flag
00E2            929   ;        Tcom.h:104: TF4H = 0; //interrupt flag
00E2 C29F       930            clr     _TF4H
00E4            931   ;        Tcom.h:106: OUT0 = !OUT0;
00E4 B2A0       932            cpl     _P2_0
00E6            933   ;        Tcom.h:107: reload_flag = 0;
00E6 C290       934            clr     _reload_flag
00E8 32         935            reti
00E9            936   ;        eliminated unneeded push/pop psw
00E9            937   ;        eliminated unneeded push/pop dpl
00E9            938   ;        eliminated unneeded push/pop dph
00E9            939   ;        eliminated unneeded push/pop b
00E9            940   ;        eliminated unneeded push/pop acc
00E9            941   ;------------------------------------------------------------
00E9            942   ;Allocation info for local variables in function 'sendCommand'
00E9            943   ;------------------------------------------------------------
00E9            944   ;value                     Allocated with name '_sendCommand_PARM_2'
00E9            945   ;op                        Allocated to registers r2 
00E9            946   ;------------------------------------------------------------
00E9            947   ;        Tcom.h:110: void sendCommand(unsigned char op, unsigned char value) {
00E9            948   ;        -----------------------------------------
00E9            949   ;         function sendCommand
00E9            950   ;        -----------------------------------------
00E9            951   _sendCommand:
00E9 AA82       952            mov     r2,dpl
00EB            953   ;        Tcom.h:111: if (op < 0b_1000 && value < 0b_100000) {
00EB BA0830     954            cjne    r2,#0x08,L011009?
00EE            955   L011009?:
00EE 5001       956            jnc     L011002?
00F0 74E0       957            mov     a,#0x100 - 0x20
00F2 2540       958            add     a,_sendCommand_PARM_2
00F4 4001       959            jc      L011002?
00F6            960   ;        Tcom.h:112: putchar1(op*0b_100000 + value); // This code is problematic as it multiplies 32 by our value..... Temporary fix is to subtract 31 from our direction on receiver side. 
00F6 EA         961            mov     a,r2
00F7 C4         962            swap    a
00F8 23         963            rl      a
00F9 54E0       964            anl     a,#0xe0
00FB FB         965            mov     r3,a
00FC E540       966            mov     a,_sendCommand_PARM_2
00FE 2B         967            add     a,r3
00FF F582       968            mov     dpl,a
0101 C002       969            push    ar2
0103 120100     970            lcall   _putchar1
0106 D002       971            pop     ar2
0108            972   ;        Tcom.h:113: printf("Sent: %d\r\n", op*0b_100000 + value);
0108 EA         973            mov     a,r2
0109 75F020     974            mov     b,#0x20
010C A4         975            mul     ab
010D FA         976            mov     r2,a
010E ABF0       977            mov     r3,b
0110 AC40       978            mov     r4,_sendCommand_PARM_2
0112 7D00       979            mov     r5,#0x00
0114 EC         980            mov     a,r4
0115 2A         981            add     a,r2
0116 FA         982            mov     r2,a
0117 ED         983            mov     a,r5
0118 3B         984            addc    a,r3
0119 FB         985            mov     r3,a
011A C002       986            push    ar2
011C C003       987            push    ar3
011E 74B0       988            mov     a,#__str_0
0120 C0E0       989            push    acc
0122 74C8       990            mov     a,#(__str_0 >> 8)
0124 C0E0       991            push    acc
0126 7480       992            mov     a,#0x80
0128 C0E0       993            push    acc
012A 120100     994            lcall   _printf
012D E581       995            mov     a,sp
012F 24FB       996            add     a,#0xfb
0131 F581       997            mov     sp,a
0133 22         998            ret
0134            999   L011002?:
0134           1000   ;        Tcom.h:115: printf("c err\r\n");
0134 74B0      1001            mov     a,#__str_1
0136 C0E0      1002            push    acc
0138 74C9      1003            mov     a,#(__str_1 >> 8)
013A C0E0      1004            push    acc
013C 7480      1005            mov     a,#0x80
013E C0E0      1006            push    acc
0140 120100    1007            lcall   _printf
0143 1581      1008            dec     sp
0145 1581      1009            dec     sp
0147 1581      1010            dec     sp
0149 22        1011            ret
014A           1012   ;------------------------------------------------------------
014A           1013   ;Allocation info for local variables in function 'sendCommandS'
014A           1014   ;------------------------------------------------------------
014A           1015   ;input                     Allocated to registers r2 r3 r4 
014A           1016   ;op                        Allocated with name '_sendCommandS_op_1_88'
014A           1017   ;d                         Allocated with name '_sendCommandS_d_1_88'
014A           1018   ;------------------------------------------------------------
014A           1019   ;        Tcom.h:119: void sendCommandS(char* input) {
014A           1020   ;        -----------------------------------------
014A           1021   ;         function sendCommandS
014A           1022   ;        -----------------------------------------
014A           1023   _sendCommandS:
014A AA82      1024            mov     r2,dpl
014C AB83      1025            mov     r3,dph
014E ACF0      1026            mov     r4,b
0150           1027   ;        Tcom.h:123: sscanf(input, "%*s %c %c", &op, &d);
0150 7420      1028            mov     a,#_sendCommandS_d_1_88
0152 C0E0      1029            push    acc
0154 74C1      1030            mov     a,#(_sendCommandS_d_1_88 >> 8)
0156 C0E0      1031            push    acc
0158 7440      1032            mov     a,#0x40
015A C0E0      1033            push    acc
015C 74D0      1034            mov     a,#_sendCommandS_op_1_88
015E C0E0      1035            push    acc
0160 74C0      1036            mov     a,#(_sendCommandS_op_1_88 >> 8)
0162 C0E0      1037            push    acc
0164 7440      1038            mov     a,#0x40
0166 C0E0      1039            push    acc
0168 74F0      1040            mov     a,#__str_2
016A C0E0      1041            push    acc
016C 74C9      1042            mov     a,#(__str_2 >> 8)
016E C0E0      1043            push    acc
0170 7480      1044            mov     a,#0x80
0172 C0E0      1045            push    acc
0174 C002      1046            push    ar2
0176 C003      1047            push    ar3
0178 C004      1048            push    ar4
017A 120100    1049            lcall   _sscanf
017D E581      1050            mov     a,sp
017F 24F4      1051            add     a,#0xf4
0181 F581      1052            mov     sp,a
0183           1053   ;        Tcom.h:125: switch(op) {
0183 AAD0      1054            mov     r2,_sendCommandS_op_1_88
0185 BA6670    1055            cjne    r2,#0x66,L012011?
0188 8001      1056            sjmp    L012002?
018A           1057   L012011?:
018A 8A03      1058            mov     ar3,r2
018C BB72F0    1059            cjne    r3,#0x72,L012012?
018F 8001      1060            sjmp    L012003?
0191           1061   L012012?:
0191 BA7370    1062            cjne    r2,#0x73,L012004?
0194           1063   ;        Tcom.h:127: op = 0;
0194 75D000    1064            mov     _sendCommandS_op_1_88,#0x00
0197           1065   ;        Tcom.h:128: break;
0197           1066   ;        Tcom.h:129: case 'f':
0197 8001      1067            sjmp    L012005?
0199           1068   L012002?:
0199           1069   ;        Tcom.h:130: op = 0b_001;
0199 75D001    1070            mov     _sendCommandS_op_1_88,#0x01
019C           1071   ;        Tcom.h:131: break;
019C           1072   ;        Tcom.h:132: case 'r':
019C 8001      1073            sjmp    L012005?
019E           1074   L012003?:
019E           1075   ;        Tcom.h:133: op = 0b_010;
019E 75D002    1076            mov     _sendCommandS_op_1_88,#0x02
01A1           1077   ;        Tcom.h:134: break;
01A1           1078   ;        Tcom.h:135: default:
01A1 8001      1079            sjmp    L012005?
01A3           1080   L012004?:
01A3           1081   ;        Tcom.h:136: return;
01A3           1082   ;        Tcom.h:137: }
01A3 22        1083            ret
01A4           1084   L012005?:
01A4           1085   ;        Tcom.h:138: sendCommand(op, d);
01A4 852040    1086            mov     _sendCommand_PARM_2,_sendCommandS_d_1_88
01A7 85D082    1087            mov     dpl,_sendCommandS_op_1_88
01AA 020100    1088            ljmp    _sendCommand
01AD           1089   ;------------------------------------------------------------
01AD           1090   ;Allocation info for local variables in function 'frequencyToReload'
01AD           1091   ;------------------------------------------------------------
01AD           1092   ;freq                      Allocated to registers r2 r3 
01AD           1093   ;------------------------------------------------------------
01AD           1094   ;        Tcom.h:157: unsigned int frequencyToReload(unsigned int freq) {
01AD           1095   ;        -----------------------------------------
01AD           1096   ;         function frequencyToReload
01AD           1097   ;        -----------------------------------------
01AD           1098   _frequencyToReload:
01AD AA82      1099            mov     r2,dpl
01AF           1100   ;        Tcom.h:158: return 65536 - ((SYSCLK/12)/(freq*2));
01AF E583      1101            mov     a,dph
01B1 CA        1102            xch     a,r2
01B2 25E0      1103            add     a,acc
01B4 CA        1104            xch     a,r2
01B5 33        1105            rlc     a
01B6 FB        1106            mov     r3,a
01B7 8A00      1107            mov     __divslong_PARM_2,r2
01B9 8B01      1108            mov     (__divslong_PARM_2 + 1),r3
01BB 750200    1109            mov     (__divslong_PARM_2 + 2),#0x00
01BE 750300    1110            mov     (__divslong_PARM_2 + 3),#0x00
01C1 908D80    1111            mov     dptr,#0x8D80
01C4 75F05B    1112            mov     b,#0x5B
01C7 E4        1113            clr     a
01C8 120100    1114            lcall   __divslong
01CB AA82      1115            mov     r2,dpl
01CD AB83      1116            mov     r3,dph
01CF ACF0      1117            mov     r4,b
01D1 FD        1118            mov     r5,a
01D2 E4        1119            clr     a
01D3 C3        1120            clr     c
01D4 9A        1121            subb    a,r2
01D5 FA        1122            mov     r2,a
01D6 E4        1123            clr     a
01D7 9B        1124            subb    a,r3
01D8 FB        1125            mov     r3,a
01D9 7401      1126            mov     a,#0x01
01DB 9C        1127            subb    a,r4
01DC E4        1128            clr     a
01DD 9D        1129            subb    a,r5
01DE 8A82      1130            mov     dpl,r2
01E0 8B83      1131            mov     dph,r3
01E2 22        1132            ret
01E3           1133   ;------------------------------------------------------------
01E3           1134   ;Allocation info for local variables in function 'reloadToFrequency'
01E3           1135   ;------------------------------------------------------------
01E3           1136   ;reload                    Allocated to registers r2 r3 
01E3           1137   ;------------------------------------------------------------
01E3           1138   ;        Tcom.h:161: unsigned int reloadToFrequency(unsigned int reload) {
01E3           1139   ;        -----------------------------------------
01E3           1140   ;         function reloadToFrequency
01E3           1141   ;        -----------------------------------------
01E3           1142   _reloadToFrequency:
01E3 AA82      1143            mov     r2,dpl
01E5 AB83      1144            mov     r3,dph
01E7           1145   ;        Tcom.h:162: return ((SYSCLK/12)/(65536 - reload))/2;
01E7 7C00      1146            mov     r4,#0x00
01E9 E4        1147            clr     a
01EA FD        1148            mov     r5,a
01EB C3        1149            clr     c
01EC 9A        1150            subb    a,r2
01ED F500      1151            mov     __divslong_PARM_2,a
01EF E4        1152            clr     a
01F0 9B        1153            subb    a,r3
01F1 F501      1154            mov     (__divslong_PARM_2 + 1),a
01F3 7401      1155            mov     a,#0x01
01F5 9C        1156            subb    a,r4
01F6 F502      1157            mov     (__divslong_PARM_2 + 2),a
01F8 E4        1158            clr     a
01F9 9D        1159            subb    a,r5
01FA F503      1160            mov     (__divslong_PARM_2 + 3),a
01FC 908D80    1161            mov     dptr,#0x8D80
01FF 75F05B    1162            mov     b,#0x5B
0202 E4        1163            clr     a
0203 120100    1164            lcall   __divslong
0206 AA82      1165            mov     r2,dpl
0208 AB83      1166            mov     r3,dph
020A ACF0      1167            mov     r4,b
020C FD        1168            mov     r5,a
020D 750002    1169            mov     __divslong_PARM_2,#0x02
0210 E4        1170            clr     a
0211 F501      1171            mov     (__divslong_PARM_2 + 1),a
0213 F502      1172            mov     (__divslong_PARM_2 + 2),a
0215 F503      1173            mov     (__divslong_PARM_2 + 3),a
0217 8A82      1174            mov     dpl,r2
0219 8B83      1175            mov     dph,r3
021B 8CF0      1176            mov     b,r4
021D ED        1177            mov     a,r5
021E 020100    1178            ljmp    __divslong
0221           1179   ;------------------------------------------------------------
0221           1180   ;Allocation info for local variables in function 'setFrequency'
0221           1181   ;------------------------------------------------------------
0221           1182   ;input                     Allocated to registers r2 r3 r4 
0221           1183   ;------------------------------------------------------------
0221           1184   ;        Tcom.h:165: void setFrequency(char* input) {
0221           1185   ;        -----------------------------------------
0221           1186   ;         function setFrequency
0221           1187   ;        -----------------------------------------
0221           1188   _setFrequency:
0221 AA82      1189            mov     r2,dpl
0223 AB83      1190            mov     r3,dph
0225 ACF0      1191            mov     r4,b
0227           1192   ;        Tcom.h:166: sscanf(input, "%*s %u", &freq4);
0227 74C0      1193            mov     a,#_freq4
0229 C0E0      1194            push    acc
022B 7453      1195            mov     a,#(_freq4 >> 8)
022D C0E0      1196            push    acc
022F 7440      1197            mov     a,#0x40
0231 C0E0      1198            push    acc
0233 7480      1199            mov     a,#__str_3
0235 C0E0      1200            push    acc
0237 74CC      1201            mov     a,#(__str_3 >> 8)
0239 C0E0      1202            push    acc
023B 7480      1203            mov     a,#0x80
023D C0E0      1204            push    acc
023F C002      1205            push    ar2
0241 C003      1206            push    ar3
0243 C004      1207            push    ar4
0245 120100    1208            lcall   _sscanf
0248 E581      1209            mov     a,sp
024A 24F7      1210            add     a,#0xf7
024C F581      1211            mov     sp,a
024E           1212   ;        Tcom.h:167: while(reload_flag != 0);
024E           1213   L015001?:
024E 2090C0    1214            jb      _reload_flag,L015001?
0251           1215   ;        Tcom.h:168: reload4 = frequencyToReload(freq4);
0251 85C082    1216            mov     dpl,_freq4
0254 85C183    1217            mov     dph,(_freq4 + 1)
0257 120100    1218            lcall   _frequencyToReload
025A 858280    1219            mov     _reload4,dpl
025D 858381    1220            mov     (_reload4 + 1),dph
0260           1221   ;        Tcom.h:169: SFRPAGE = 0x10;
0260 75A710    1222            mov     _SFRPAGE,#0x10
0263           1223   ;        Tcom.h:170: TMR4RL = reload4;
0263 8580A2    1224            mov     _TMR4RL,_reload4
0266 8581A3    1225            mov     (_TMR4RL >> 8),(_reload4 + 1)
0269           1226   ;        Tcom.h:171: SFRPAGE = 0x00;
0269 75A700    1227            mov     _SFRPAGE,#0x00
026C           1228   ;        Tcom.h:172: printf("Set timer4 freq to: %d\r\n", freq4);
026C C0C0      1229            push    _freq4
026E C0C1      1230            push    (_freq4 + 1)
0270 7400      1231            mov     a,#__str_4
0272 C0E0      1232            push    acc
0274 74CD      1233            mov     a,#(__str_4 >> 8)
0276 C0E0      1234            push    acc
0278 7480      1235            mov     a,#0x80
027A C0E0      1236            push    acc
027C 120100    1237            lcall   _printf
027F E581      1238            mov     a,sp
0281 24FB      1239            add     a,#0xfb
0283 F581      1240            mov     sp,a
0285 22        1241            ret
0286           1242   ;------------------------------------------------------------
0286           1243   ;Allocation info for local variables in function 'setReload'
0286           1244   ;------------------------------------------------------------
0286           1245   ;input                     Allocated to registers r2 r3 r4 
0286           1246   ;------------------------------------------------------------
0286           1247   ;        Tcom.h:175: void setReload(char* input) {
0286           1248   ;        -----------------------------------------
0286           1249   ;         function setReload
0286           1250   ;        -----------------------------------------
0286           1251   _setReload:
0286 AA82      1252            mov     r2,dpl
0288 AB83      1253            mov     r3,dph
028A ACF0      1254            mov     r4,b
028C           1255   ;        Tcom.h:176: sscanf(input, "%*s %u", &reload4);
028C 7480      1256            mov     a,#_reload4
028E C0E0      1257            push    acc
0290 7453      1258            mov     a,#(_reload4 >> 8)
0292 C0E0      1259            push    acc
0294 7440      1260            mov     a,#0x40
0296 C0E0      1261            push    acc
0298 7480      1262            mov     a,#__str_3
029A C0E0      1263            push    acc
029C 74CC      1264            mov     a,#(__str_3 >> 8)
029E C0E0      1265            push    acc
02A0 7480      1266            mov     a,#0x80
02A2 C0E0      1267            push    acc
02A4 C002      1268            push    ar2
02A6 C003      1269            push    ar3
02A8 C004      1270            push    ar4
02AA 120100    1271            lcall   _sscanf
02AD E581      1272            mov     a,sp
02AF 24F7      1273            add     a,#0xf7
02B1 F581      1274            mov     sp,a
02B3           1275   ;        Tcom.h:177: while(reload_flag != 0);
02B3           1276   L016001?:
02B3 209040    1277            jb      _reload_flag,L016001?
02B6           1278   ;        Tcom.h:178: freq4 = reloadToFrequency(reload4);
02B6 858082    1279            mov     dpl,_reload4
02B9 858183    1280            mov     dph,(_reload4 + 1)
02BC 120100    1281            lcall   _reloadToFrequency
02BF 8582C0    1282            mov     _freq4,dpl
02C2 8583C1    1283            mov     (_freq4 + 1),dph
02C5           1284   ;        Tcom.h:179: SFRPAGE = 0x10;
02C5 75A710    1285            mov     _SFRPAGE,#0x10
02C8           1286   ;        Tcom.h:180: TMR4RL = reload4;
02C8 8580A2    1287            mov     _TMR4RL,_reload4
02CB 8581A3    1288            mov     (_TMR4RL >> 8),(_reload4 + 1)
02CE           1289   ;        Tcom.h:181: SFRPAGE = 0x00;
02CE 75A700    1290            mov     _SFRPAGE,#0x00
02D1           1291   ;        Tcom.h:182: printf("Set timer4 reload to: %d\r\n", reload4);
02D1 C080      1292            push    _reload4
02D3 C081      1293            push    (_reload4 + 1)
02D5 7480      1294            mov     a,#__str_5
02D7 C0E0      1295            push    acc
02D9 74CD      1296            mov     a,#(__str_5 >> 8)
02DB C0E0      1297            push    acc
02DD 7480      1298            mov     a,#0x80
02DF C0E0      1299            push    acc
02E1 120100    1300            lcall   _printf
02E4 E581      1301            mov     a,sp
02E6 24FB      1302            add     a,#0xfb
02E8 F581      1303            mov     sp,a
02EA 22        1304            ret
02EB           1305   ;------------------------------------------------------------
02EB           1306   ;Allocation info for local variables in function 'PWMoff'
02EB           1307   ;------------------------------------------------------------
02EB           1308   ;------------------------------------------------------------
02EB           1309   ;        Tcom.h:200: void PWMoff() {
02EB           1310   ;        -----------------------------------------
02EB           1311   ;         function PWMoff
02EB           1312   ;        -----------------------------------------
02EB           1313   _PWMoff:
02EB           1314   ;        Tcom.h:201: OUT0 = 0;
02EB C2A0      1315            clr     _P2_0
02ED           1316   ;        Tcom.h:202: OUT1 = 0;
02ED C296      1317            clr     _P1_6
02EF           1318   ;        Tcom.h:203: TR2 = 0;
02EF C2CA      1319            clr     _TR2
02F1 22        1320            ret
02F2           1321   ;------------------------------------------------------------
02F2           1322   ;Allocation info for local variables in function 'PWMon'
02F2           1323   ;------------------------------------------------------------
02F2           1324   ;------------------------------------------------------------
02F2           1325   ;        Tcom.h:206: void PWMon() {
02F2           1326   ;        -----------------------------------------
02F2           1327   ;         function PWMon
02F2           1328   ;        -----------------------------------------
02F2           1329   _PWMon:
02F2           1330   ;        Tcom.h:207: TR2 = 1;
02F2 D2CA      1331            setb    _TR2
02F4 22        1332            ret
02F5           1333   ;------------------------------------------------------------
02F5           1334   ;Allocation info for local variables in function 'getCommand'
02F5           1335   ;------------------------------------------------------------
02F5           1336   ;input                     Allocated to registers r2 r3 r4 
02F5           1337   ;------------------------------------------------------------
02F5           1338   ;        Tcom.h:210: void getCommand(char* input) {
02F5           1339   ;        -----------------------------------------
02F5           1340   ;         function getCommand
02F5           1341   ;        -----------------------------------------
02F5           1342   _getCommand:
02F5           1343   ;        Tcom.h:212: if (input[0] == '-') {
02F5 AA82      1344            mov     r2,dpl
02F7 AB83      1345            mov     r3,dph
02F9 ACF0      1346            mov     r4,b
02FB 120100    1347            lcall   __gptrget
02FE FD        1348            mov     r5,a
02FF BD2D00    1349            cjne    r5,#0x2D,L019031?
0302 8001      1350            sjmp    L019032?
0304           1351   L019031?:
0304 020100    1352            ljmp    L019016?
0307           1353   L019032?:
0307           1354   ;        Tcom.h:213: switch(input[1]) {
0307 7401      1355            mov     a,#0x01
0309 2A        1356            add     a,r2
030A FD        1357            mov     r5,a
030B E4        1358            clr     a
030C 3B        1359            addc    a,r3
030D FE        1360            mov     r6,a
030E 8C07      1361            mov     ar7,r4
0310 8D82      1362            mov     dpl,r5
0312 8E83      1363            mov     dph,r6
0314 8FF0      1364            mov     b,r7
0316 120100    1365            lcall   __gptrget
0319 FD        1366            mov     r5,a
031A BD2FC0    1367            cjne    r5,#0x2F,L019033?
031D 8001      1368            sjmp    L019001?
031F           1369   L019033?:
031F BD6640    1370            cjne    r5,#0x66,L019034?
0322 8001      1371            sjmp    L019002?
0324           1372   L019034?:
0324 BD68C0    1373            cjne    r5,#0x68,L019035?
0327 8001      1374            sjmp    L019003?
0329           1375   L019035?:
0329 BD6940    1376            cjne    r5,#0x69,L019036?
032C 8001      1377            sjmp    L019004?
032E           1378   L019036?:
032E BD6FC0    1379            cjne    r5,#0x6F,L019037?
0331 8001      1380            sjmp    L019005?
0333           1381   L019037?:
0333 BD7240    1382            cjne    r5,#0x72,L019038?
0336 8001      1383            sjmp    L019008?
0338           1384   L019038?:
0338 BD73C0    1385            cjne    r5,#0x73,L019039?
033B 020100    1386            ljmp    L019009?
033E           1387   L019039?:
033E BD7440    1388            cjne    r5,#0x74,L019040?
0341 020100    1389            ljmp    L019012?
0344           1390   L019040?:
0344 020100    1391            ljmp    L019013?
0347           1392   ;        Tcom.h:214: case '/':
0347           1393   L019001?:
0347           1394   ;        Tcom.h:215: sendCommandS(input);
0347 8A82      1395            mov     dpl,r2
0349 8B83      1396            mov     dph,r3
034B 8CF0      1397            mov     b,r4
034D 120100    1398            lcall   _sendCommandS
0350           1399   ;        Tcom.h:216: break;
0350 020100    1400            ljmp    L019017?
0353           1401   ;        Tcom.h:217: case 'f':
0353           1402   L019002?:
0353           1403   ;        Tcom.h:218: setFrequency(input);
0353 8A82      1404            mov     dpl,r2
0355 8B83      1405            mov     dph,r3
0357 8CF0      1406            mov     b,r4
0359 120100    1407            lcall   _setFrequency
035C           1408   ;        Tcom.h:219: break;
035C 020100    1409            ljmp    L019017?
035F           1410   ;        Tcom.h:220: case 'h':
035F           1411   L019003?:
035F           1412   ;        Tcom.h:221: printf("Help Menu\r\nList of Commands: \r\n-cw [duty value]\r\n-ccw [duty value]\r\n-f [freq value]\r\n-r [reload value]\r\n-o\r\n-s\r\n-i\r\n\n");
035F 7440      1413            mov     a,#__str_6
0361 C0E0      1414            push    acc
0363 74D3      1415            mov     a,#(__str_6 >> 8)
0365 C0E0      1416            push    acc
0367 7480      1417            mov     a,#0x80
0369 C0E0      1418            push    acc
036B 120100    1419            lcall   _printf
036E 1581      1420            dec     sp
0370 1581      1421            dec     sp
0372 1581      1422            dec     sp
0374           1423   ;        Tcom.h:222: break;
0374 020100    1424            ljmp    L019017?
0377           1425   ;        Tcom.h:223: case 'i':
0377           1426   L019004?:
0377           1427   ;        Tcom.h:224: printf("Reload: %u, Freq: %d \r\n", reload4, freq4);
0377 C0C0      1428            push    _freq4
0379 C0C1      1429            push    (_freq4 + 1)
037B C080      1430            push    _reload4
037D C081      1431            push    (_reload4 + 1)
037F 7480      1432            mov     a,#__str_7
0381 C0E0      1433            push    acc
0383 74D3      1434            mov     a,#(__str_7 >> 8)
0385 C0E0      1435            push    acc
0387 7480      1436            mov     a,#0x80
0389 C0E0      1437            push    acc
038B 120100    1438            lcall   _printf
038E E581      1439            mov     a,sp
0390 24F9      1440            add     a,#0xf9
0392 F581      1441            mov     sp,a
0394           1442   ;        Tcom.h:225: break;
0394 020100    1443            ljmp    L019017?
0397           1444   ;        Tcom.h:226: case 'o':
0397           1445   L019005?:
0397           1446   ;        Tcom.h:227: if (input[2] == 0)
0397 7402      1447            mov     a,#0x02
0399 2A        1448            add     a,r2
039A FD        1449            mov     r5,a
039B E4        1450            clr     a
039C 3B        1451            addc    a,r3
039D FE        1452            mov     r6,a
039E 8C07      1453            mov     ar7,r4
03A0 8D82      1454            mov     dpl,r5
03A2 8E83      1455            mov     dph,r6
03A4 8FF0      1456            mov     b,r7
03A6 120100    1457            lcall   __gptrget
03A9 7001      1458            jnz     L019017?
03AB           1459   ;        Tcom.h:228: PWMoff();
03AB 120100    1460            lcall   _PWMoff
03AE           1461   ;        Tcom.h:229: break;      
03AE           1462   ;        Tcom.h:230: case 'r':
03AE 8001      1463            sjmp    L019017?
03B0           1464   L019008?:
03B0           1465   ;        Tcom.h:231: setReload(input);
03B0 8A82      1466            mov     dpl,r2
03B2 8B83      1467            mov     dph,r3
03B4 8CF0      1468            mov     b,r4
03B6 120100    1469            lcall   _setReload
03B9           1470   ;        Tcom.h:232: break;
03B9           1471   ;        Tcom.h:233: case 's':
03B9 8001      1472            sjmp    L019017?
03BB           1473   L019009?:
03BB           1474   ;        Tcom.h:234: if (input[2] == 0)
03BB 7402      1475            mov     a,#0x02
03BD 2A        1476            add     a,r2
03BE FD        1477            mov     r5,a
03BF E4        1478            clr     a
03C0 3B        1479            addc    a,r3
03C1 FE        1480            mov     r6,a
03C2 8C07      1481            mov     ar7,r4
03C4 8D82      1482            mov     dpl,r5
03C6 8E83      1483            mov     dph,r6
03C8 8FF0      1484            mov     b,r7
03CA 120100    1485            lcall   __gptrget
03CD 7001      1486            jnz     L019017?
03CF           1487   ;        Tcom.h:235: PWMon();
03CF 120100    1488            lcall   _PWMon
03D2           1489   ;        Tcom.h:236: break;
03D2           1490   ;        Tcom.h:237: case 't':
03D2 8001      1491            sjmp    L019017?
03D4           1492   L019012?:
03D4           1493   ;        Tcom.h:238: putchar1(0b_1010_1010);
03D4 7582AA    1494            mov     dpl,#0xAA
03D7 120100    1495            lcall   _putchar1
03DA           1496   ;        Tcom.h:239: break;
03DA           1497   ;        Tcom.h:240: default:
03DA 8001      1498            sjmp    L019017?
03DC           1499   L019013?:
03DC           1500   ;        Tcom.h:241: printf("\"%s\" invalid command\r\n", input);
03DC C002      1501            push    ar2
03DE C003      1502            push    ar3
03E0 C004      1503            push    ar4
03E2 74C0      1504            mov     a,#__str_8
03E4 C0E0      1505            push    acc
03E6 74D3      1506            mov     a,#(__str_8 >> 8)
03E8 C0E0      1507            push    acc
03EA 7480      1508            mov     a,#0x80
03EC C0E0      1509            push    acc
03EE 120100    1510            lcall   _printf
03F1 E581      1511            mov     a,sp
03F3 24FA      1512            add     a,#0xfa
03F5 F581      1513            mov     sp,a
03F7           1514   ;        Tcom.h:243: }
03F7 8001      1515            sjmp    L019017?
03F9           1516   L019016?:
03F9           1517   ;        Tcom.h:245: printf("Not Valid input\r\n");
03F9 7400      1518            mov     a,#__str_9
03FB C0E0      1519            push    acc
03FD 74D4      1520            mov     a,#(__str_9 >> 8)
03FF C0E0      1521            push    acc
0401 7480      1522            mov     a,#0x80
0403 C0E0      1523            push    acc
0405 120100    1524            lcall   _printf
0408 1581      1525            dec     sp
040A 1581      1526            dec     sp
040C 1581      1527            dec     sp
040E           1528   L019017?:
040E           1529   ;        Tcom.h:247: return;
040E 22        1530            ret
040F           1531   ;------------------------------------------------------------
040F           1532   ;Allocation info for local variables in function 'Tcom_init'
040F           1533   ;------------------------------------------------------------
040F           1534   ;baudrate                  Allocated to registers r2 r3 r4 r5 
040F           1535   ;------------------------------------------------------------
040F           1536   ;        Tcom.h:250: void Tcom_init(unsigned long baudrate) {
040F           1537   ;        -----------------------------------------
040F           1538   ;         function Tcom_init
040F           1539   ;        -----------------------------------------
040F           1540   _Tcom_init:
040F AA82      1541            mov     r2,dpl
0411 AB83      1542            mov     r3,dph
0413 ACF0      1543            mov     r4,b
0415 FD        1544            mov     r5,a
0416           1545   ;        Tcom.h:256: Timer4_init(); //used for frequency-resolution interrupts
0416 C002      1546            push    ar2
0418 C003      1547            push    ar3
041A C004      1548            push    ar4
041C C005      1549            push    ar5
041E 120100    1550            lcall   _Timer4_init
0421 D005      1551            pop     ar5
0423 D004      1552            pop     ar4
0425 D003      1553            pop     ar3
0427 D002      1554            pop     ar2
0429           1555   ;        Tcom.h:259: UART1_Init(baudrate);
0429 8A82      1556            mov     dpl,r2
042B 8B83      1557            mov     dph,r3
042D 8CF0      1558            mov     b,r4
042F ED        1559            mov     a,r5
0430 020100    1560            ljmp    _UART1_Init
0433           1561   ;------------------------------------------------------------
0433           1562   ;Allocation info for local variables in function 'Timer2us'
0433           1563   ;------------------------------------------------------------
0433           1564   ;us                        Allocated to registers r2 
0433           1565   ;i                         Allocated to registers r3 
0433           1566   ;------------------------------------------------------------
0433           1567   ;        EFM8core.h:9: void Timer2us(unsigned char us)
0433           1568   ;        -----------------------------------------
0433           1569   ;         function Timer2us
0433           1570   ;        -----------------------------------------
0433           1571   _Timer2us:
0433 AA82      1572            mov     r2,dpl
0435           1573   ;        EFM8core.h:13: SFRPAGE=0x00;
0435 75A700    1574            mov     _SFRPAGE,#0x00
0438           1575   ;        EFM8core.h:15: CKCON0|=0b_0001_0000;
0438 438E10    1576            orl     _CKCON0,#0x10
043B           1577   ;        EFM8core.h:17: TMR2RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
043B 75CAB8    1578            mov     _TMR2RL,#0xB8
043E 75CBFF    1579            mov     (_TMR2RL >> 8),#0xFF
0441           1580   ;        EFM8core.h:18: TMR2 = TMR2RL;                 // Initialize Timer3 for first overflow
0441 85CACE    1581            mov     _TMR2,_TMR2RL
0444 85CBCF    1582            mov     (_TMR2 >> 8),(_TMR2RL >> 8)
0447           1583   ;        EFM8core.h:20: TMR2CN0 = 0x04;                 // Start Timer3 and clear overflow flag
0447 75C804    1584            mov     _TMR2CN0,#0x04
044A           1585   ;        EFM8core.h:22: for (i = 0; i < us; i++)       // Count <us> overflows
044A 7B00      1586            mov     r3,#0x00
044C           1587   L021004?:
044C C3        1588            clr     c
044D EB        1589            mov     a,r3
044E 9A        1590            subb    a,r2
044F 5001      1591            jnc     L021007?
0451           1592   ;        EFM8core.h:24: while (!(TMR2CN0 & 0x80));  // Wait for overflow
0451           1593   L021001?:
0451 E5C8      1594            mov     a,_TMR2CN0
0453 30E7C0    1595            jnb     acc.7,L021001?
0456           1596   ;        EFM8core.h:26: TMR2CN0 &= ~(0x80);         // Clear overflow indicator
0456 53C87F    1597            anl     _TMR2CN0,#0x7F
0459           1598   ;        EFM8core.h:22: for (i = 0; i < us; i++)       // Count <us> overflows
0459 0B        1599            inc     r3
045A 8001      1600            sjmp    L021004?
045C           1601   L021007?:
045C           1602   ;        EFM8core.h:29: TMR2CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
045C 75C800    1603            mov     _TMR2CN0,#0x00
045F 22        1604            ret
0460           1605   ;------------------------------------------------------------
0460           1606   ;Allocation info for local variables in function 'waitms'
0460           1607   ;------------------------------------------------------------
0460           1608   ;ms                        Allocated to registers r2 r3 
0460           1609   ;j                         Allocated to registers r2 r3 
0460           1610   ;------------------------------------------------------------
0460           1611   ;        EFM8core.h:32: void waitms (unsigned int ms)
0460           1612   ;        -----------------------------------------
0460           1613   ;         function waitms
0460           1614   ;        -----------------------------------------
0460           1615   _waitms:
0460 AA82      1616            mov     r2,dpl
0462 AB83      1617            mov     r3,dph
0464           1618   ;        EFM8core.h:35: for(j=ms; j!=0; j--)
0464           1619   L022001?:
0464 BA0040    1620            cjne    r2,#0x00,L022010?
0467 BB0040    1621            cjne    r3,#0x00,L022010?
046A 22        1622            ret
046B           1623   L022010?:
046B           1624   ;        EFM8core.h:37: Timer2us(249);
046B 7582F9    1625            mov     dpl,#0xF9
046E C002      1626            push    ar2
0470 C003      1627            push    ar3
0472 120100    1628            lcall   _Timer2us
0475           1629   ;        EFM8core.h:38: Timer2us(249);
0475 7582F9    1630            mov     dpl,#0xF9
0478 120100    1631            lcall   _Timer2us
047B           1632   ;        EFM8core.h:39: Timer2us(249);
047B 7582F9    1633            mov     dpl,#0xF9
047E 120100    1634            lcall   _Timer2us
0481           1635   ;        EFM8core.h:40: Timer2us(250);
0481 7582FA    1636            mov     dpl,#0xFA
0484 120100    1637            lcall   _Timer2us
0487 D003      1638            pop     ar3
0489 D002      1639            pop     ar2
048B           1640   ;        EFM8core.h:35: for(j=ms; j!=0; j--)
048B 1A        1641            dec     r2
048C BAFF80    1642            cjne    r2,#0xff,L022011?
048F 1B        1643            dec     r3
0490           1644   L022011?:
0490 8001      1645            sjmp    L022001?
0492           1646   ;------------------------------------------------------------
0492           1647   ;Allocation info for local variables in function 'LCD_pulse'
0492           1648   ;------------------------------------------------------------
0492           1649   ;------------------------------------------------------------
0492           1650   ;        EFM8LCDlib.h:15: void LCD_pulse (void)
0492           1651   ;        -----------------------------------------
0492           1652   ;         function LCD_pulse
0492           1653   ;        -----------------------------------------
0492           1654   _LCD_pulse:
0492           1655   ;        EFM8LCDlib.h:17: LCD_E=1;
0492 D2A5      1656            setb    _P2_5
0494           1657   ;        EFM8LCDlib.h:18: Timer2us(40);
0494 758228    1658            mov     dpl,#0x28
0497 120100    1659            lcall   _Timer2us
049A           1660   ;        EFM8LCDlib.h:19: LCD_E=0;
049A C2A5      1661            clr     _P2_5
049C 22        1662            ret
049D           1663   ;------------------------------------------------------------
049D           1664   ;Allocation info for local variables in function 'LCD_byte'
049D           1665   ;------------------------------------------------------------
049D           1666   ;x                         Allocated to registers r2 
049D           1667   ;------------------------------------------------------------
049D           1668   ;        EFM8LCDlib.h:22: void LCD_byte (unsigned char x)
049D           1669   ;        -----------------------------------------
049D           1670   ;         function LCD_byte
049D           1671   ;        -----------------------------------------
049D           1672   _LCD_byte:
049D AA82      1673            mov     r2,dpl
049F           1674   ;        EFM8LCDlib.h:25: ACC=x; //Send high nible
049F 8AE0      1675            mov     _ACC,r2
04A1           1676   ;        EFM8LCDlib.h:26: LCD_D7=ACC_7;
04A1 A2E7      1677            mov     c,_ACC_7
04A3 92A1      1678            mov     _P2_1,c
04A5           1679   ;        EFM8LCDlib.h:27: LCD_D6=ACC_6;
04A5 A2E6      1680            mov     c,_ACC_6
04A7 92A2      1681            mov     _P2_2,c
04A9           1682   ;        EFM8LCDlib.h:28: LCD_D5=ACC_5;
04A9 A2E5      1683            mov     c,_ACC_5
04AB 92A3      1684            mov     _P2_3,c
04AD           1685   ;        EFM8LCDlib.h:29: LCD_D4=ACC_4;
04AD A2E4      1686            mov     c,_ACC_4
04AF 92A4      1687            mov     _P2_4,c
04B1           1688   ;        EFM8LCDlib.h:30: LCD_pulse();
04B1 C002      1689            push    ar2
04B3 120100    1690            lcall   _LCD_pulse
04B6           1691   ;        EFM8LCDlib.h:31: Timer2us(40);
04B6 758228    1692            mov     dpl,#0x28
04B9 120100    1693            lcall   _Timer2us
04BC D002      1694            pop     ar2
04BE           1695   ;        EFM8LCDlib.h:32: ACC=x; //Send low nible
04BE 8AE0      1696            mov     _ACC,r2
04C0           1697   ;        EFM8LCDlib.h:33: LCD_D7=ACC_3;
04C0 A2E3      1698            mov     c,_ACC_3
04C2 92A1      1699            mov     _P2_1,c
04C4           1700   ;        EFM8LCDlib.h:34: LCD_D6=ACC_2;
04C4 A2E2      1701            mov     c,_ACC_2
04C6 92A2      1702            mov     _P2_2,c
04C8           1703   ;        EFM8LCDlib.h:35: LCD_D5=ACC_1;
04C8 A2E1      1704            mov     c,_ACC_1
04CA 92A3      1705            mov     _P2_3,c
04CC           1706   ;        EFM8LCDlib.h:36: LCD_D4=ACC_0;
04CC A2E0      1707            mov     c,_ACC_0
04CE 92A4      1708            mov     _P2_4,c
04D0           1709   ;        EFM8LCDlib.h:37: LCD_pulse();
04D0 020100    1710            ljmp    _LCD_pulse
04D3           1711   ;------------------------------------------------------------
04D3           1712   ;Allocation info for local variables in function 'WriteData'
04D3           1713   ;------------------------------------------------------------
04D3           1714   ;x                         Allocated to registers r2 
04D3           1715   ;------------------------------------------------------------
04D3           1716   ;        EFM8LCDlib.h:40: void WriteData (unsigned char x)
04D3           1717   ;        -----------------------------------------
04D3           1718   ;         function WriteData
04D3           1719   ;        -----------------------------------------
04D3           1720   _WriteData:
04D3 AA82      1721            mov     r2,dpl
04D5           1722   ;        EFM8LCDlib.h:42: LCD_RS=1;
04D5 D2A6      1723            setb    _P2_6
04D7           1724   ;        EFM8LCDlib.h:43: LCD_byte(x);
04D7 8A82      1725            mov     dpl,r2
04D9 120100    1726            lcall   _LCD_byte
04DC           1727   ;        EFM8LCDlib.h:44: waitms(2);
04DC 900002    1728            mov     dptr,#0x0002
04DF 020100    1729            ljmp    _waitms
04E2           1730   ;------------------------------------------------------------
04E2           1731   ;Allocation info for local variables in function 'WriteCommand'
04E2           1732   ;------------------------------------------------------------
04E2           1733   ;x                         Allocated to registers r2 
04E2           1734   ;------------------------------------------------------------
04E2           1735   ;        EFM8LCDlib.h:47: void WriteCommand (unsigned char x)
04E2           1736   ;        -----------------------------------------
04E2           1737   ;         function WriteCommand
04E2           1738   ;        -----------------------------------------
04E2           1739   _WriteCommand:
04E2 AA82      1740            mov     r2,dpl
04E4           1741   ;        EFM8LCDlib.h:49: LCD_RS=0;
04E4 C2A6      1742            clr     _P2_6
04E6           1743   ;        EFM8LCDlib.h:50: LCD_byte(x);
04E6 8A82      1744            mov     dpl,r2
04E8 120100    1745            lcall   _LCD_byte
04EB           1746   ;        EFM8LCDlib.h:51: waitms(5);
04EB 900005    1747            mov     dptr,#0x0005
04EE 020100    1748            ljmp    _waitms
04F1           1749   ;------------------------------------------------------------
04F1           1750   ;Allocation info for local variables in function 'LCD_4BIT'
04F1           1751   ;------------------------------------------------------------
04F1           1752   ;------------------------------------------------------------
04F1           1753   ;        EFM8LCDlib.h:54: void LCD_4BIT (void)
04F1           1754   ;        -----------------------------------------
04F1           1755   ;         function LCD_4BIT
04F1           1756   ;        -----------------------------------------
04F1           1757   _LCD_4BIT:
04F1           1758   ;        EFM8LCDlib.h:56: LCD_E=0; // Resting state of LCD's enable is zero
04F1 C2A5      1759            clr     _P2_5
04F3           1760   ;        EFM8LCDlib.h:58: waitms(20);
04F3 900014    1761            mov     dptr,#0x0014
04F6 120100    1762            lcall   _waitms
04F9           1763   ;        EFM8LCDlib.h:60: WriteCommand(0x33);
04F9 758233    1764            mov     dpl,#0x33
04FC 120100    1765            lcall   _WriteCommand
04FF           1766   ;        EFM8LCDlib.h:61: WriteCommand(0x33);
04FF 758233    1767            mov     dpl,#0x33
0502 120100    1768            lcall   _WriteCommand
0505           1769   ;        EFM8LCDlib.h:62: WriteCommand(0x32); // Change to 4-bit mode
0505 758232    1770            mov     dpl,#0x32
0508 120100    1771            lcall   _WriteCommand
050B           1772   ;        EFM8LCDlib.h:65: WriteCommand(0x28);
050B 758228    1773            mov     dpl,#0x28
050E 120100    1774            lcall   _WriteCommand
0511           1775   ;        EFM8LCDlib.h:66: WriteCommand(0x0c);
0511 75820C    1776            mov     dpl,#0x0C
0514 120100    1777            lcall   _WriteCommand
0517           1778   ;        EFM8LCDlib.h:67: WriteCommand(0x01); // Clear screen command (takes some time)
0517 758201    1779            mov     dpl,#0x01
051A 120100    1780            lcall   _WriteCommand
051D           1781   ;        EFM8LCDlib.h:68: waitms(20); // Wait for clear screen command to finsih.
051D 900014    1782            mov     dptr,#0x0014
0520 020100    1783            ljmp    _waitms
0523           1784   ;------------------------------------------------------------
0523           1785   ;Allocation info for local variables in function 'LCDprint'
0523           1786   ;------------------------------------------------------------
0523           1787   ;line                      Allocated with name '_LCDprint_PARM_2'
0523           1788   ;string                    Allocated to registers r2 r3 r4 
0523           1789   ;j                         Allocated to registers r5 r6 
0523           1790   ;------------------------------------------------------------
0523           1791   ;        EFM8LCDlib.h:71: void LCDprint(char * string, unsigned char line, bit clear)
0523           1792   ;        -----------------------------------------
0523           1793   ;         function LCDprint
0523           1794   ;        -----------------------------------------
0523           1795   _LCDprint:
0523 AA82      1796            mov     r2,dpl
0525 AB83      1797            mov     r3,dph
0527 ACF0      1798            mov     r4,b
0529           1799   ;        EFM8LCDlib.h:75: WriteCommand(line==2?0xc0:0x80);
0529 7402      1800            mov     a,#0x02
052B B5F0C0    1801            cjne    a,_LCDprint_PARM_2,L028013?
052E 7DC0      1802            mov     r5,#0xC0
0530 8001      1803            sjmp    L028014?
0532           1804   L028013?:
0532 7D80      1805            mov     r5,#0x80
0534           1806   L028014?:
0534 8D82      1807            mov     dpl,r5
0536 C002      1808            push    ar2
0538 C003      1809            push    ar3
053A C004      1810            push    ar4
053C 120100    1811            lcall   _WriteCommand
053F           1812   ;        EFM8LCDlib.h:76: waitms(5);
053F 900005    1813            mov     dptr,#0x0005
0542 120100    1814            lcall   _waitms
0545 D004      1815            pop     ar4
0547 D003      1816            pop     ar3
0549 D002      1817            pop     ar2
054B           1818   ;        EFM8LCDlib.h:77: for(j=0; string[j]!=0; j++)    WriteData(string[j]);// Write the message
054B 7D00      1819            mov     r5,#0x00
054D 7E00      1820            mov     r6,#0x00
054F           1821   L028003?:
054F ED        1822            mov     a,r5
0550 2A        1823            add     a,r2
0551 FF        1824            mov     r7,a
0552 EE        1825            mov     a,r6
0553 3B        1826            addc    a,r3
0554 F8        1827            mov     r0,a
0555 8C01      1828            mov     ar1,r4
0557 8F82      1829            mov     dpl,r7
0559 8883      1830            mov     dph,r0
055B 89F0      1831            mov     b,r1
055D 120100    1832            lcall   __gptrget
0560 FF        1833            mov     r7,a
0561 6001      1834            jz      L028006?
0563 8F82      1835            mov     dpl,r7
0565 C002      1836            push    ar2
0567 C003      1837            push    ar3
0569 C004      1838            push    ar4
056B C005      1839            push    ar5
056D C006      1840            push    ar6
056F 120100    1841            lcall   _WriteData
0572 D006      1842            pop     ar6
0574 D005      1843            pop     ar5
0576 D004      1844            pop     ar4
0578 D003      1845            pop     ar3
057A D002      1846            pop     ar2
057C 0D        1847            inc     r5
057D BD0040    1848            cjne    r5,#0x00,L028003?
0580 0E        1849            inc     r6
0581 8001      1850            sjmp    L028003?
0583           1851   L028006?:
0583           1852   ;        EFM8LCDlib.h:78: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0583 3050C0    1853            jnb     _LCDprint_PARM_3,L028011?
0586 8D02      1854            mov     ar2,r5
0588 8E03      1855            mov     ar3,r6
058A           1856   L028007?:
058A C3        1857            clr     c
058B EA        1858            mov     a,r2
058C 9410      1859            subb    a,#0x10
058E EB        1860            mov     a,r3
058F 6480      1861            xrl     a,#0x80
0591 9480      1862            subb    a,#0x80
0593 5001      1863            jnc     L028011?
0595 758220    1864            mov     dpl,#0x20
0598 C002      1865            push    ar2
059A C003      1866            push    ar3
059C 120100    1867            lcall   _WriteData
059F D003      1868            pop     ar3
05A1 D002      1869            pop     ar2
05A3 0A        1870            inc     r2
05A4 BA0000    1871            cjne    r2,#0x00,L028007?
05A7 0B        1872            inc     r3
05A8 8001      1873            sjmp    L028007?
05AA           1874   L028011?:
05AA 22        1875            ret
05AB           1876   ;------------------------------------------------------------
05AB           1877   ;Allocation info for local variables in function 'I2C_write'
05AB           1878   ;------------------------------------------------------------
05AB           1879   ;output_data               Allocated to registers 
05AB           1880   ;------------------------------------------------------------
05AB           1881   ;        Nunchuck_reader.h:83: void I2C_write (unsigned char output_data)
05AB           1882   ;        -----------------------------------------
05AB           1883   ;         function I2C_write
05AB           1884   ;        -----------------------------------------
05AB           1885   _I2C_write:
05AB 8582C2    1886            mov     _SMB0DAT,dpl
05AE           1887   ;        Nunchuck_reader.h:87: SI = 0;
05AE C2C0      1888            clr     _SI
05B0           1889   ;        Nunchuck_reader.h:88: while (!SI); // Wait until done with send
05B0           1890   L029001?:
05B0 30C040    1891            jnb     _SI,L029001?
05B3 22        1892            ret
05B4           1893   ;------------------------------------------------------------
05B4           1894   ;Allocation info for local variables in function 'I2C_read'
05B4           1895   ;------------------------------------------------------------
05B4           1896   ;input_data                Allocated to registers 
05B4           1897   ;------------------------------------------------------------
05B4           1898   ;        Nunchuck_reader.h:91: unsigned char I2C_read (void)
05B4           1899   ;        -----------------------------------------
05B4           1900   ;         function I2C_read
05B4           1901   ;        -----------------------------------------
05B4           1902   _I2C_read:
05B4           1903   ;        Nunchuck_reader.h:94: SI = 0;
05B4 C2C0      1904            clr     _SI
05B6           1905   ;        Nunchuck_reader.h:95: while (!SI); // Wait until we have data to read
05B6           1906   L030001?:
05B6 30C080    1907            jnb     _SI,L030001?
05B9           1908   ;        Nunchuck_reader.h:96: input_data = SMB0DAT; // Read the data
05B9 85C282    1909            mov     dpl,_SMB0DAT
05BC           1910   ;        Nunchuck_reader.h:98: return input_data;
05BC 22        1911            ret
05BD           1912   ;------------------------------------------------------------
05BD           1913   ;Allocation info for local variables in function 'I2C_start'
05BD           1914   ;------------------------------------------------------------
05BD           1915   ;------------------------------------------------------------
05BD           1916   ;        Nunchuck_reader.h:101: void I2C_start (void)
05BD           1917   ;        -----------------------------------------
05BD           1918   ;         function I2C_start
05BD           1919   ;        -----------------------------------------
05BD           1920   _I2C_start:
05BD           1921   ;        Nunchuck_reader.h:103: ACK = 1;
05BD D2C1      1922            setb    _ACK
05BF           1923   ;        Nunchuck_reader.h:104: STA = 1;     // Send I2C start
05BF D2C5      1924            setb    _STA
05C1           1925   ;        Nunchuck_reader.h:105: STO = 0;
05C1 C2C4      1926            clr     _STO
05C3           1927   ;        Nunchuck_reader.h:106: SI = 0;
05C3 C2C0      1928            clr     _SI
05C5           1929   ;        Nunchuck_reader.h:107: while (!SI); // Wait until start sent
05C5           1930   L031001?:
05C5 30C0C0    1931            jnb     _SI,L031001?
05C8           1932   ;        Nunchuck_reader.h:108: STA = 0;     // Reset I2C start
05C8 C2C5      1933            clr     _STA
05CA 22        1934            ret
05CB           1935   ;------------------------------------------------------------
05CB           1936   ;Allocation info for local variables in function 'I2C_stop'
05CB           1937   ;------------------------------------------------------------
05CB           1938   ;------------------------------------------------------------
05CB           1939   ;        Nunchuck_reader.h:111: void I2C_stop(void)
05CB           1940   ;        -----------------------------------------
05CB           1941   ;         function I2C_stop
05CB           1942   ;        -----------------------------------------
05CB           1943   _I2C_stop:
05CB           1944   ;        Nunchuck_reader.h:113: STO = 1;         // Perform I2C stop
05CB D2C4      1945            setb    _STO
05CD           1946   ;        Nunchuck_reader.h:114: SI = 0;  // Clear SI
05CD C2C0      1947            clr     _SI
05CF 22        1948            ret
05D0           1949   ;------------------------------------------------------------
05D0           1950   ;Allocation info for local variables in function 'nunchuck_init'
05D0           1951   ;------------------------------------------------------------
05D0           1952   ;i                         Allocated to registers r2 
05D0           1953   ;buf                       Allocated with name '_nunchuck_init_buf_1_134'
05D0           1954   ;sloc0                     Allocated with name '_nunchuck_init_sloc0_1_0'
05D0           1955   ;sloc1                     Allocated with name '_nunchuck_init_sloc1_1_0'
05D0           1956   ;sloc2                     Allocated with name '_nunchuck_init_sloc2_1_0'
05D0           1957   ;------------------------------------------------------------
05D0           1958   ;        Nunchuck_reader.h:118: void nunchuck_init(bit print_extension_type)
05D0           1959   ;        -----------------------------------------
05D0           1960   ;         function nunchuck_init
05D0           1961   ;        -----------------------------------------
05D0           1962   _nunchuck_init:
05D0           1963   ;        Nunchuck_reader.h:124: I2C_start();
05D0 120100    1964            lcall   _I2C_start
05D3           1965   ;        Nunchuck_reader.h:125: I2C_write(0xA4);
05D3 7582A4    1966            mov     dpl,#0xA4
05D6 120100    1967            lcall   _I2C_write
05D9           1968   ;        Nunchuck_reader.h:126: I2C_write(0xF0);
05D9 7582F0    1969            mov     dpl,#0xF0
05DC 120100    1970            lcall   _I2C_write
05DF           1971   ;        Nunchuck_reader.h:127: I2C_write(0x55);
05DF 758255    1972            mov     dpl,#0x55
05E2 120100    1973            lcall   _I2C_write
05E5           1974   ;        Nunchuck_reader.h:128: I2C_stop();
05E5 120100    1975            lcall   _I2C_stop
05E8           1976   ;        Nunchuck_reader.h:129: waitms(1);
05E8 900001    1977            mov     dptr,#0x0001
05EB 120100    1978            lcall   _waitms
05EE           1979   ;        Nunchuck_reader.h:131: I2C_start();
05EE 120100    1980            lcall   _I2C_start
05F1           1981   ;        Nunchuck_reader.h:132: I2C_write(0xA4);
05F1 7582A4    1982            mov     dpl,#0xA4
05F4 120100    1983            lcall   _I2C_write
05F7           1984   ;        Nunchuck_reader.h:133: I2C_write(0xFB);
05F7 7582FB    1985            mov     dpl,#0xFB
05FA 120100    1986            lcall   _I2C_write
05FD           1987   ;        Nunchuck_reader.h:134: I2C_write(0x00);
05FD 758200    1988            mov     dpl,#0x00
0600 120100    1989            lcall   _I2C_write
0603           1990   ;        Nunchuck_reader.h:135: I2C_stop();
0603 120100    1991            lcall   _I2C_stop
0606           1992   ;        Nunchuck_reader.h:136: waitms(1);
0606 900001    1993            mov     dptr,#0x0001
0609 120100    1994            lcall   _waitms
060C           1995   ;        Nunchuck_reader.h:140: I2C_start();
060C 120100    1996            lcall   _I2C_start
060F           1997   ;        Nunchuck_reader.h:141: I2C_write(0xA4);
060F 7582A4    1998            mov     dpl,#0xA4
0612 120100    1999            lcall   _I2C_write
0615           2000   ;        Nunchuck_reader.h:142: I2C_write(0xFA); // extension type register
0615 7582FA    2001            mov     dpl,#0xFA
0618 120100    2002            lcall   _I2C_write
061B           2003   ;        Nunchuck_reader.h:143: I2C_stop();
061B 120100    2004            lcall   _I2C_stop
061E           2005   ;        Nunchuck_reader.h:144: waitms(3); // 3 ms required to complete acquisition
061E 900003    2006            mov     dptr,#0x0003
0621 120100    2007            lcall   _waitms
0624           2008   ;        Nunchuck_reader.h:146: I2C_start();
0624 120100    2009            lcall   _I2C_start
0627           2010   ;        Nunchuck_reader.h:147: I2C_write(0xA5);
0627 7582A5    2011            mov     dpl,#0xA5
062A 120100    2012            lcall   _I2C_write
062D           2013   ;        Nunchuck_reader.h:150: for(i=0; i<CHARS_PER_LINE; i++)
062D 7A00      2014            mov     r2,#0x00
062F           2015   L033003?:
062F BA1040    2016            cjne    r2,#0x10,L033013?
0632           2017   L033013?:
0632 5001      2018            jnc     L033006?
0634           2019   ;        Nunchuck_reader.h:152: buf[i]=I2C_read();
0634 EA        2020            mov     a,r2
0635 2470      2021            add     a,#_nunchuck_init_buf_1_134
0637 F8        2022            mov     r0,a
0638 C002      2023            push    ar2
063A C000      2024            push    ar0
063C 120100    2025            lcall   _I2C_read
063F E582      2026            mov     a,dpl
0641 D000      2027            pop     ar0
0643 D002      2028            pop     ar2
0645 F6        2029            mov     @r0,a
0646           2030   ;        Nunchuck_reader.h:150: for(i=0; i<CHARS_PER_LINE; i++)
0646 0A        2031            inc     r2
0647 8001      2032            sjmp    L033003?
0649           2033   L033006?:
0649           2034   ;        Nunchuck_reader.h:154: ACK=0;
0649 C2C1      2035            clr     _ACK
064B           2036   ;        Nunchuck_reader.h:155: I2C_stop();
064B 120100    2037            lcall   _I2C_stop
064E           2038   ;        Nunchuck_reader.h:156: waitms(3);
064E 900003    2039            mov     dptr,#0x0003
0651 120100    2040            lcall   _waitms
0654           2041   ;        Nunchuck_reader.h:158: if(print_extension_type)
0654 3000C0    2042            jnb     _nunchuck_init_PARM_1,L033002?
0657           2043   ;        Nunchuck_reader.h:161: buf[0],  buf[1], buf[2], buf[3], buf[4], buf[5]);
0657 AA75      2044            mov     r2,(_nunchuck_init_buf_1_134 + 0x0005)
0659 7B00      2045            mov     r3,#0x00
065B AC74      2046            mov     r4,(_nunchuck_init_buf_1_134 + 0x0004)
065D 7D00      2047            mov     r5,#0x00
065F 8573C0    2048            mov     _nunchuck_init_sloc0_1_0,(_nunchuck_init_buf_1_134 + 0x0003)
0662 75C100    2049            mov     (_nunchuck_init_sloc0_1_0 + 1),#0x00
0665 857210    2050            mov     _nunchuck_init_sloc1_1_0,(_nunchuck_init_buf_1_134 + 0x0002)
0668 751100    2051            mov     (_nunchuck_init_sloc1_1_0 + 1),#0x00
066B 857160    2052            mov     _nunchuck_init_sloc2_1_0,(_nunchuck_init_buf_1_134 + 0x0001)
066E 756100    2053            mov     (_nunchuck_init_sloc2_1_0 + 1),#0x00
0671 AE70      2054            mov     r6,_nunchuck_init_buf_1_134
0673 7F00      2055            mov     r7,#0x00
0675           2056   ;        Nunchuck_reader.h:160: printf("Extension type: %02x  %02x  %02x  %02x  %02x  %02x\n", 
0675 C002      2057            push    ar2
0677 C003      2058            push    ar3
0679 C004      2059            push    ar4
067B C005      2060            push    ar5
067D C0C0      2061            push    _nunchuck_init_sloc0_1_0
067F C0C1      2062            push    (_nunchuck_init_sloc0_1_0 + 1)
0681 C010      2063            push    _nunchuck_init_sloc1_1_0
0683 C011      2064            push    (_nunchuck_init_sloc1_1_0 + 1)
0685 C060      2065            push    _nunchuck_init_sloc2_1_0
0687 C061      2066            push    (_nunchuck_init_sloc2_1_0 + 1)
0689 C006      2067            push    ar6
068B C007      2068            push    ar7
068D 7400      2069            mov     a,#__str_10
068F C0E0      2070            push    acc
0691 74D9      2071            mov     a,#(__str_10 >> 8)
0693 C0E0      2072            push    acc
0695 7480      2073            mov     a,#0x80
0697 C0E0      2074            push    acc
0699 120100    2075            lcall   _printf
069C E581      2076            mov     a,sp
069E 24F1      2077            add     a,#0xf1
06A0 F581      2078            mov     sp,a
06A2           2079   L033002?:
06A2           2080   ;        Nunchuck_reader.h:166: I2C_start();
06A2 120100    2081            lcall   _I2C_start
06A5           2082   ;        Nunchuck_reader.h:167: I2C_write(0xA4);
06A5 7582A4    2083            mov     dpl,#0xA4
06A8 120100    2084            lcall   _I2C_write
06AB           2085   ;        Nunchuck_reader.h:168: I2C_write(0xF0);
06AB 7582F0    2086            mov     dpl,#0xF0
06AE 120100    2087            lcall   _I2C_write
06B1           2088   ;        Nunchuck_reader.h:169: I2C_write(0xAA);
06B1 7582AA    2089            mov     dpl,#0xAA
06B4 120100    2090            lcall   _I2C_write
06B7           2091   ;        Nunchuck_reader.h:170: I2C_stop();
06B7 120100    2092            lcall   _I2C_stop
06BA           2093   ;        Nunchuck_reader.h:171: waitms(1);
06BA 900001    2094            mov     dptr,#0x0001
06BD 120100    2095            lcall   _waitms
06C0           2096   ;        Nunchuck_reader.h:173: I2C_start();
06C0 120100    2097            lcall   _I2C_start
06C3           2098   ;        Nunchuck_reader.h:174: I2C_write(0xA4);
06C3 7582A4    2099            mov     dpl,#0xA4
06C6 120100    2100            lcall   _I2C_write
06C9           2101   ;        Nunchuck_reader.h:175: I2C_write(0x40);
06C9 758240    2102            mov     dpl,#0x40
06CC 120100    2103            lcall   _I2C_write
06CF           2104   ;        Nunchuck_reader.h:176: I2C_write(0x00);
06CF 758200    2105            mov     dpl,#0x00
06D2 120100    2106            lcall   _I2C_write
06D5           2107   ;        Nunchuck_reader.h:177: I2C_write(0x00);
06D5 758200    2108            mov     dpl,#0x00
06D8 120100    2109            lcall   _I2C_write
06DB           2110   ;        Nunchuck_reader.h:178: I2C_write(0x00);
06DB 758200    2111            mov     dpl,#0x00
06DE 120100    2112            lcall   _I2C_write
06E1           2113   ;        Nunchuck_reader.h:179: I2C_write(0x00);
06E1 758200    2114            mov     dpl,#0x00
06E4 120100    2115            lcall   _I2C_write
06E7           2116   ;        Nunchuck_reader.h:180: I2C_write(0x00);
06E7 758200    2117            mov     dpl,#0x00
06EA 120100    2118            lcall   _I2C_write
06ED           2119   ;        Nunchuck_reader.h:181: I2C_write(0x00);
06ED 758200    2120            mov     dpl,#0x00
06F0 120100    2121            lcall   _I2C_write
06F3           2122   ;        Nunchuck_reader.h:182: I2C_stop();
06F3 120100    2123            lcall   _I2C_stop
06F6           2124   ;        Nunchuck_reader.h:183: waitms(1);
06F6 900001    2125            mov     dptr,#0x0001
06F9 120100    2126            lcall   _waitms
06FC           2127   ;        Nunchuck_reader.h:185: I2C_start();
06FC 120100    2128            lcall   _I2C_start
06FF           2129   ;        Nunchuck_reader.h:186: I2C_write(0xA4);
06FF 7582A4    2130            mov     dpl,#0xA4
0702 120100    2131            lcall   _I2C_write
0705           2132   ;        Nunchuck_reader.h:187: I2C_write(0x40);
0705 758240    2133            mov     dpl,#0x40
0708 120100    2134            lcall   _I2C_write
070B           2135   ;        Nunchuck_reader.h:188: I2C_write(0x00);
070B 758200    2136            mov     dpl,#0x00
070E 120100    2137            lcall   _I2C_write
0711           2138   ;        Nunchuck_reader.h:189: I2C_write(0x00);
0711 758200    2139            mov     dpl,#0x00
0714 120100    2140            lcall   _I2C_write
0717           2141   ;        Nunchuck_reader.h:190: I2C_write(0x00);
0717 758200    2142            mov     dpl,#0x00
071A 120100    2143            lcall   _I2C_write
071D           2144   ;        Nunchuck_reader.h:191: I2C_write(0x00);
071D 758200    2145            mov     dpl,#0x00
0720 120100    2146            lcall   _I2C_write
0723           2147   ;        Nunchuck_reader.h:192: I2C_write(0x00);
0723 758200    2148            mov     dpl,#0x00
0726 120100    2149            lcall   _I2C_write
0729           2150   ;        Nunchuck_reader.h:193: I2C_write(0x00);
0729 758200    2151            mov     dpl,#0x00
072C 120100    2152            lcall   _I2C_write
072F           2153   ;        Nunchuck_reader.h:194: I2C_stop();
072F 120100    2154            lcall   _I2C_stop
0732           2155   ;        Nunchuck_reader.h:195: waitms(1);
0732 900001    2156            mov     dptr,#0x0001
0735 120100    2157            lcall   _waitms
0738           2158   ;        Nunchuck_reader.h:197: I2C_start();
0738 120100    2159            lcall   _I2C_start
073B           2160   ;        Nunchuck_reader.h:198: I2C_write(0xA4);
073B 7582A4    2161            mov     dpl,#0xA4
073E 120100    2162            lcall   _I2C_write
0741           2163   ;        Nunchuck_reader.h:199: I2C_write(0x40);
0741 758240    2164            mov     dpl,#0x40
0744 120100    2165            lcall   _I2C_write
0747           2166   ;        Nunchuck_reader.h:200: I2C_write(0x00);
0747 758200    2167            mov     dpl,#0x00
074A 120100    2168            lcall   _I2C_write
074D           2169   ;        Nunchuck_reader.h:201: I2C_write(0x00);
074D 758200    2170            mov     dpl,#0x00
0750 120100    2171            lcall   _I2C_write
0753           2172   ;        Nunchuck_reader.h:202: I2C_write(0x00);
0753 758200    2173            mov     dpl,#0x00
0756 120100    2174            lcall   _I2C_write
0759           2175   ;        Nunchuck_reader.h:203: I2C_write(0x00);
0759 758200    2176            mov     dpl,#0x00
075C 120100    2177            lcall   _I2C_write
075F           2178   ;        Nunchuck_reader.h:204: I2C_stop();
075F 120100    2179            lcall   _I2C_stop
0762           2180   ;        Nunchuck_reader.h:205: waitms(1);
0762 900001    2181            mov     dptr,#0x0001
0765 020100    2182            ljmp    _waitms
0768           2183   ;------------------------------------------------------------
0768           2184   ;Allocation info for local variables in function 'nunchuck_getdata'
0768           2185   ;------------------------------------------------------------
0768           2186   ;s                         Allocated to registers r2 r3 r4 
0768           2187   ;i                         Allocated to registers r5 
0768           2188   ;------------------------------------------------------------
0768           2189   ;        Nunchuck_reader.h:208: void nunchuck_getdata(unsigned char * s)
0768           2190   ;        -----------------------------------------
0768           2191   ;         function nunchuck_getdata
0768           2192   ;        -----------------------------------------
0768           2193   _nunchuck_getdata:
0768 AA82      2194            mov     r2,dpl
076A AB83      2195            mov     r3,dph
076C ACF0      2196            mov     r4,b
076E           2197   ;        Nunchuck_reader.h:213: I2C_start();
076E C002      2198            push    ar2
0770 C003      2199            push    ar3
0772 C004      2200            push    ar4
0774 120100    2201            lcall   _I2C_start
0777           2202   ;        Nunchuck_reader.h:214: I2C_write(0xA4);
0777 7582A4    2203            mov     dpl,#0xA4
077A 120100    2204            lcall   _I2C_write
077D           2205   ;        Nunchuck_reader.h:215: I2C_write(0x00);
077D 758200    2206            mov     dpl,#0x00
0780 120100    2207            lcall   _I2C_write
0783           2208   ;        Nunchuck_reader.h:216: I2C_stop();
0783 120100    2209            lcall   _I2C_stop
0786           2210   ;        Nunchuck_reader.h:217: waitms(3);       // 3 ms required to complete acquisition
0786 900003    2211            mov     dptr,#0x0003
0789 120100    2212            lcall   _waitms
078C           2213   ;        Nunchuck_reader.h:220: I2C_start();
078C 120100    2214            lcall   _I2C_start
078F           2215   ;        Nunchuck_reader.h:221: I2C_write(0xA5);
078F 7582A5    2216            mov     dpl,#0xA5
0792 120100    2217            lcall   _I2C_write
0795 D004      2218            pop     ar4
0797 D003      2219            pop     ar3
0799 D002      2220            pop     ar2
079B           2221   ;        Nunchuck_reader.h:224: for(i=0; i<CHARS_PER_LINE; i++)
079B 7D00      2222            mov     r5,#0x00
079D           2223   L034001?:
079D BD1080    2224            cjne    r5,#0x10,L034010?
07A0           2225   L034010?:
07A0 5001      2226            jnc     L034004?
07A2           2227   ;        Nunchuck_reader.h:226: s[i]=(I2C_read()^0x17)+0x17; // Read and decrypt
07A2 ED        2228            mov     a,r5
07A3 2A        2229            add     a,r2
07A4 FE        2230            mov     r6,a
07A5 E4        2231            clr     a
07A6 3B        2232            addc    a,r3
07A7 FF        2233            mov     r7,a
07A8 8C00      2234            mov     ar0,r4
07AA C002      2235            push    ar2
07AC C003      2236            push    ar3
07AE C004      2237            push    ar4
07B0 C005      2238            push    ar5
07B2 C006      2239            push    ar6
07B4 C007      2240            push    ar7
07B6 C000      2241            push    ar0
07B8 120100    2242            lcall   _I2C_read
07BB E582      2243            mov     a,dpl
07BD D000      2244            pop     ar0
07BF D007      2245            pop     ar7
07C1 D006      2246            pop     ar6
07C3 D005      2247            pop     ar5
07C5 D004      2248            pop     ar4
07C7 D003      2249            pop     ar3
07C9 D002      2250            pop     ar2
07CB 6417      2251            xrl     a,#0x17
07CD 2417      2252            add     a,#0x17
07CF F9        2253            mov     r1,a
07D0 8E82      2254            mov     dpl,r6
07D2 8F83      2255            mov     dph,r7
07D4 88F0      2256            mov     b,r0
07D6 120100    2257            lcall   __gptrput
07D9           2258   ;        Nunchuck_reader.h:224: for(i=0; i<CHARS_PER_LINE; i++)
07D9 0D        2259            inc     r5
07DA 8001      2260            sjmp    L034001?
07DC           2261   L034004?:
07DC           2262   ;        Nunchuck_reader.h:228: ACK=0;
07DC C2C1      2263            clr     _ACK
07DE           2264   ;        Nunchuck_reader.h:229: I2C_stop();
07DE 020100    2265            ljmp    _I2C_stop
07E1           2266   ;------------------------------------------------------------
07E1           2267   ;Allocation info for local variables in function 'get_speed'
07E1           2268   ;------------------------------------------------------------
07E1           2269   ;y_ax                      Allocated with name '_get_speed_PARM_2'
07E1           2270   ;x_ax                      Allocated to registers r2 
07E1           2271   ;spd                       Allocated to registers r4 
07E1           2272   ;------------------------------------------------------------
07E1           2273   ;        Nunchuck_reader.h:235: char get_speed(char x_ax, char y_ax){
07E1           2274   ;        -----------------------------------------
07E1           2275   ;         function get_speed
07E1           2276   ;        -----------------------------------------
07E1           2277   _get_speed:
07E1 AA82      2278            mov     r2,dpl
07E3           2279   ;        Nunchuck_reader.h:237: y_ax=abs(y_ax);
07E3 E5A0      2280            mov     a,_get_speed_PARM_2
07E5 FB        2281            mov     r3,a
07E6 33        2282            rlc     a
07E7 95E0      2283            subb    a,acc
07E9 FC        2284            mov     r4,a
07EA 8B82      2285            mov     dpl,r3
07EC 8C83      2286            mov     dph,r4
07EE C002      2287            push    ar2
07F0 120100    2288            lcall   _abs
07F3 AB82      2289            mov     r3,dpl
07F5 D002      2290            pop     ar2
07F7           2291   ;        Nunchuck_reader.h:238: x_ax=abs(x_ax);
07F7 EA        2292            mov     a,r2
07F8 FC        2293            mov     r4,a
07F9 33        2294            rlc     a
07FA 95E0      2295            subb    a,acc
07FC FD        2296            mov     r5,a
07FD 8C82      2297            mov     dpl,r4
07FF 8D83      2298            mov     dph,r5
0801 C003      2299            push    ar3
0803 120100    2300            lcall   _abs
0806 AC82      2301            mov     r4,dpl
0808 AD83      2302            mov     r5,dph
080A D003      2303            pop     ar3
080C 8C02      2304            mov     ar2,r4
080E           2305   ;        Nunchuck_reader.h:240: if(y_ax>x_ax){
080E C3        2306            clr     c
080F EA        2307            mov     a,r2
0810 6480      2308            xrl     a,#0x80
0812 8BF0      2309            mov     b,r3
0814 63F080    2310            xrl     b,#0x80
0817 95F0      2311            subb    a,b
0819 5001      2312            jnc     L035004?
081B           2313   ;        Nunchuck_reader.h:241: spd=y_ax;
081B 8B04      2314            mov     ar4,r3
081D           2315   ;        Nunchuck_reader.h:242: if(y_ax>85)
081D C3        2316            clr     c
081E 74D5      2317            mov     a,#(0x55 ^ 0x80)
0820 8BF0      2318            mov     b,r3
0822 63F080    2319            xrl     b,#0x80
0825 95F0      2320            subb    a,b
0827 5001      2321            jnc     L035005?
0829           2322   ;        Nunchuck_reader.h:243: spd=100;
0829 7C64      2323            mov     r4,#0x64
082B 8001      2324            sjmp    L035005?
082D           2325   L035004?:
082D           2326   ;        Nunchuck_reader.h:245: else spd=x_ax;
082D 8A04      2327            mov     ar4,r2
082F           2328   L035005?:
082F           2329   ;        Nunchuck_reader.h:247: return spd/TRANSMISSION_SIZE;
082F C2D5      2330            clr     F0
0831 75F004    2331            mov     b,#0x04
0834 EC        2332            mov     a,r4
0835 30E740    2333            jnb     acc.7,L035012?
0838 B2D5      2334            cpl     F0
083A F4        2335            cpl     a
083B 04        2336            inc     a
083C           2337   L035012?:
083C 84        2338            div     ab
083D 30D580    2339            jnb     F0,L035013?
0840 F4        2340            cpl     a
0841 04        2341            inc     a
0842           2342   L035013?:
0842 F582      2343            mov     dpl,a
0844 22        2344            ret
0845           2345   ;------------------------------------------------------------
0845           2346   ;Allocation info for local variables in function 'get_direction'
0845           2347   ;------------------------------------------------------------
0845           2348   ;y_axis                    Allocated with name '_get_direction_PARM_2'
0845           2349   ;x_axis                    Allocated to registers r2 
0845           2350   ;direction                 Allocated to registers r3 
0845           2351   ;------------------------------------------------------------
0845           2352   ;        Nunchuck_reader.h:250: char get_direction(char x_axis, char y_axis){
0845           2353   ;        -----------------------------------------
0845           2354   ;         function get_direction
0845           2355   ;        -----------------------------------------
0845           2356   _get_direction:
0845 AA82      2357            mov     r2,dpl
0847           2358   ;        Nunchuck_reader.h:252: char direction=north;
0847 7B00      2359            mov     r3,#0x00
0849           2360   ;        Nunchuck_reader.h:255: if(y_axis>0){
0849 C3        2361            clr     c
084A E4        2362            clr     a
084B 6480      2363            xrl     a,#0x80
084D 8550F0    2364            mov     b,_get_direction_PARM_2
0850 63F080    2365            xrl     b,#0x80
0853 95F0      2366            subb    a,b
0855 4001      2367            jc      L036130?
0857 020100    2368            ljmp    L036084?
085A           2369   L036130?:
085A           2370   ;        Nunchuck_reader.h:257: if ((x_axis<10)&&(x_axis>-10)){
085A C3        2371            clr     c
085B EA        2372            mov     a,r2
085C 6480      2373            xrl     a,#0x80
085E 948A      2374            subb    a,#0x8a
0860 5001      2375            jnc     L036038?
0862 C3        2376            clr     c
0863 7476      2377            mov     a,#(0xF6 ^ 0x80)
0865 8AF0      2378            mov     b,r2
0867 63F080    2379            xrl     b,#0x80
086A 95F0      2380            subb    a,b
086C 5001      2381            jnc     L036038?
086E           2382   ;        Nunchuck_reader.h:260: if(y_axis>5&&y_axis>-5){
086E C3        2383            clr     c
086F 7485      2384            mov     a,#(0x05 ^ 0x80)
0871 8550F0    2385            mov     b,_get_direction_PARM_2
0874 63F080    2386            xrl     b,#0x80
0877 95F0      2387            subb    a,b
0879 5001      2388            jnc     L036002?
087B C3        2389            clr     c
087C 747B      2390            mov     a,#(0xFB ^ 0x80)
087E 8550F0    2391            mov     b,_get_direction_PARM_2
0881 63F080    2392            xrl     b,#0x80
0884 95F0      2393            subb    a,b
0886 5001      2394            jnc     L036002?
0888           2395   ;        Nunchuck_reader.h:261: direction=north;
0888 7B00      2396            mov     r3,#0x00
088A 020100    2397            ljmp    L036085?
088D           2398   L036002?:
088D           2399   ;        Nunchuck_reader.h:263: else direction=north;
088D 7B00      2400            mov     r3,#0x00
088F 020100    2401            ljmp    L036085?
0892           2402   L036038?:
0892           2403   ;        Nunchuck_reader.h:267: else if(x_axis>10&&x_axis<=30){
0892 C3        2404            clr     c
0893 748A      2405            mov     a,#(0x0A ^ 0x80)
0895 8AF0      2406            mov     b,r2
0897 63F080    2407            xrl     b,#0x80
089A 95F0      2408            subb    a,b
089C 5001      2409            jnc     L036034?
089E C3        2410            clr     c
089F 749E      2411            mov     a,#(0x1E ^ 0x80)
08A1 8AF0      2412            mov     b,r2
08A3 63F080    2413            xrl     b,#0x80
08A6 95F0      2414            subb    a,b
08A8 4001      2415            jc      L036034?
08AA           2416   ;        Nunchuck_reader.h:268: direction=NNE;
08AA 7B02      2417            mov     r3,#0x02
08AC 020100    2418            ljmp    L036085?
08AF           2419   L036034?:
08AF           2420   ;        Nunchuck_reader.h:270: else if(x_axis>30&&x_axis<=50){
08AF C3        2421            clr     c
08B0 749E      2422            mov     a,#(0x1E ^ 0x80)
08B2 8AF0      2423            mov     b,r2
08B4 63F080    2424            xrl     b,#0x80
08B7 95F0      2425            subb    a,b
08B9 5001      2426            jnc     L036030?
08BB C3        2427            clr     c
08BC 74B2      2428            mov     a,#(0x32 ^ 0x80)
08BE 8AF0      2429            mov     b,r2
08C0 63F080    2430            xrl     b,#0x80
08C3 95F0      2431            subb    a,b
08C5 4001      2432            jc      L036030?
08C7           2433   ;        Nunchuck_reader.h:271: direction=NE;
08C7 7B04      2434            mov     r3,#0x04
08C9 020100    2435            ljmp    L036085?
08CC           2436   L036030?:
08CC           2437   ;        Nunchuck_reader.h:273: else if(x_axis>50&&x_axis<=70){
08CC C3        2438            clr     c
08CD 74B2      2439            mov     a,#(0x32 ^ 0x80)
08CF 8AF0      2440            mov     b,r2
08D1 63F080    2441            xrl     b,#0x80
08D4 95F0      2442            subb    a,b
08D6 5001      2443            jnc     L036026?
08D8 C3        2444            clr     c
08D9 74C6      2445            mov     a,#(0x46 ^ 0x80)
08DB 8AF0      2446            mov     b,r2
08DD 63F080    2447            xrl     b,#0x80
08E0 95F0      2448            subb    a,b
08E2 4001      2449            jc      L036026?
08E4           2450   ;        Nunchuck_reader.h:274: direction=NEE;
08E4 7B06      2451            mov     r3,#0x06
08E6 020100    2452            ljmp    L036085?
08E9           2453   L036026?:
08E9           2454   ;        Nunchuck_reader.h:276: else if(x_axis>70&&x_axis<=100){
08E9 C3        2455            clr     c
08EA 74C6      2456            mov     a,#(0x46 ^ 0x80)
08EC 8AF0      2457            mov     b,r2
08EE 63F080    2458            xrl     b,#0x80
08F1 95F0      2459            subb    a,b
08F3 5001      2460            jnc     L036022?
08F5 C3        2461            clr     c
08F6 74E4      2462            mov     a,#(0x64 ^ 0x80)
08F8 8AF0      2463            mov     b,r2
08FA 63F080    2464            xrl     b,#0x80
08FD 95F0      2465            subb    a,b
08FF 4001      2466            jc      L036022?
0901           2467   ;        Nunchuck_reader.h:277: direction=east;
0901 7B08      2468            mov     r3,#0x08
0903 020100    2469            ljmp    L036085?
0906           2470   L036022?:
0906           2471   ;        Nunchuck_reader.h:280: else if(x_axis<-10&&x_axis>=-30){
0906 C3        2472            clr     c
0907 EA        2473            mov     a,r2
0908 6480      2474            xrl     a,#0x80
090A 9476      2475            subb    a,#0x76
090C 5001      2476            jnc     L036018?
090E C3        2477            clr     c
090F EA        2478            mov     a,r2
0910 6480      2479            xrl     a,#0x80
0912 9462      2480            subb    a,#0x62
0914 4001      2481            jc      L036018?
0916           2482   ;        Nunchuck_reader.h:281: direction=NNW;
0916 7B03      2483            mov     r3,#0x03
0918 020100    2484            ljmp    L036085?
091B           2485   L036018?:
091B           2486   ;        Nunchuck_reader.h:283: else if(x_axis<-30&&x_axis>=-50){
091B C3        2487            clr     c
091C EA        2488            mov     a,r2
091D 6480      2489            xrl     a,#0x80
091F 9462      2490            subb    a,#0x62
0921 5001      2491            jnc     L036014?
0923 C3        2492            clr     c
0924 EA        2493            mov     a,r2
0925 6480      2494            xrl     a,#0x80
0927 944E      2495            subb    a,#0x4e
0929 4001      2496            jc      L036014?
092B           2497   ;        Nunchuck_reader.h:284: direction=NW;
092B 7B05      2498            mov     r3,#0x05
092D 020100    2499            ljmp    L036085?
0930           2500   L036014?:
0930           2501   ;        Nunchuck_reader.h:286: else if(x_axis<-50&&x_axis>=-70){
0930 C3        2502            clr     c
0931 EA        2503            mov     a,r2
0932 6480      2504            xrl     a,#0x80
0934 944E      2505            subb    a,#0x4e
0936 5001      2506            jnc     L036010?
0938 C3        2507            clr     c
0939 EA        2508            mov     a,r2
093A 6480      2509            xrl     a,#0x80
093C 943A      2510            subb    a,#0x3a
093E 4001      2511            jc      L036010?
0940           2512   ;        Nunchuck_reader.h:287: direction=NWW;
0940 7B07      2513            mov     r3,#0x07
0942 020100    2514            ljmp    L036085?
0945           2515   L036010?:
0945           2516   ;        Nunchuck_reader.h:289: else if(x_axis<-70&&x_axis>=-110){
0945 C3        2517            clr     c
0946 EA        2518            mov     a,r2
0947 6480      2519            xrl     a,#0x80
0949 943A      2520            subb    a,#0x3a
094B 5001      2521            jnc     L036006?
094D C3        2522            clr     c
094E EA        2523            mov     a,r2
094F 6480      2524            xrl     a,#0x80
0951 9412      2525            subb    a,#0x12
0953 4001      2526            jc      L036006?
0955           2527   ;        Nunchuck_reader.h:290: direction=west;
0955 7B09      2528            mov     r3,#0x09
0957 020100    2529            ljmp    L036085?
095A           2530   L036006?:
095A           2531   ;        Nunchuck_reader.h:293: direction=north;
095A 7B00      2532            mov     r3,#0x00
095C 020100    2533            ljmp    L036085?
095F           2534   L036084?:
095F           2535   ;        Nunchuck_reader.h:297: else if (y_axis<0){
095F E550      2536            mov     a,_get_direction_PARM_2
0961 20E700    2537            jb      acc.7,L036151?
0964 020100    2538            ljmp    L036085?
0967           2539   L036151?:
0967           2540   ;        Nunchuck_reader.h:299: if ((x_axis<10)&&(x_axis>-10)){
0967 C3        2541            clr     c
0968 EA        2542            mov     a,r2
0969 6480      2543            xrl     a,#0x80
096B 948A      2544            subb    a,#0x8a
096D 5001      2545            jnc     L036078?
096F C3        2546            clr     c
0970 7476      2547            mov     a,#(0xF6 ^ 0x80)
0972 8AF0      2548            mov     b,r2
0974 63F080    2549            xrl     b,#0x80
0977 95F0      2550            subb    a,b
0979 5001      2551            jnc     L036078?
097B           2552   ;        Nunchuck_reader.h:302: if(y_axis>5&&y_axis>-5){
097B C3        2553            clr     c
097C 7485      2554            mov     a,#(0x05 ^ 0x80)
097E 8550F0    2555            mov     b,_get_direction_PARM_2
0981 63F080    2556            xrl     b,#0x80
0984 95F0      2557            subb    a,b
0986 5001      2558            jnc     L036042?
0988 C3        2559            clr     c
0989 747B      2560            mov     a,#(0xFB ^ 0x80)
098B 8550F0    2561            mov     b,_get_direction_PARM_2
098E 63F080    2562            xrl     b,#0x80
0991 95F0      2563            subb    a,b
0993 5001      2564            jnc     L036042?
0995           2565   ;        Nunchuck_reader.h:303: direction=south;
0995 7B01      2566            mov     r3,#0x01
0997 020100    2567            ljmp    L036085?
099A           2568   L036042?:
099A           2569   ;        Nunchuck_reader.h:305: else direction=south;
099A 7B01      2570            mov     r3,#0x01
099C 020100    2571            ljmp    L036085?
099F           2572   L036078?:
099F           2573   ;        Nunchuck_reader.h:309: else if(x_axis>10&&x_axis<=30){
099F C3        2574            clr     c
09A0 748A      2575            mov     a,#(0x0A ^ 0x80)
09A2 8AF0      2576            mov     b,r2
09A4 63F080    2577            xrl     b,#0x80
09A7 95F0      2578            subb    a,b
09A9 5001      2579            jnc     L036074?
09AB C3        2580            clr     c
09AC 749E      2581            mov     a,#(0x1E ^ 0x80)
09AE 8AF0      2582            mov     b,r2
09B0 63F080    2583            xrl     b,#0x80
09B3 95F0      2584            subb    a,b
09B5 4001      2585            jc      L036074?
09B7           2586   ;        Nunchuck_reader.h:310: direction=SSE;
09B7 7B0A      2587            mov     r3,#0x0A
09B9 020100    2588            ljmp    L036085?
09BC           2589   L036074?:
09BC           2590   ;        Nunchuck_reader.h:312: else if(x_axis>30&&x_axis<=50){
09BC C3        2591            clr     c
09BD 749E      2592            mov     a,#(0x1E ^ 0x80)
09BF 8AF0      2593            mov     b,r2
09C1 63F080    2594            xrl     b,#0x80
09C4 95F0      2595            subb    a,b
09C6 5001      2596            jnc     L036070?
09C8 C3        2597            clr     c
09C9 74B2      2598            mov     a,#(0x32 ^ 0x80)
09CB 8AF0      2599            mov     b,r2
09CD 63F080    2600            xrl     b,#0x80
09D0 95F0      2601            subb    a,b
09D2 4001      2602            jc      L036070?
09D4           2603   ;        Nunchuck_reader.h:313: direction=SE;
09D4 7B0C      2604            mov     r3,#0x0C
09D6 020100    2605            ljmp    L036085?
09D9           2606   L036070?:
09D9           2607   ;        Nunchuck_reader.h:315: else if(x_axis>50&&x_axis<=70){
09D9 C3        2608            clr     c
09DA 74B2      2609            mov     a,#(0x32 ^ 0x80)
09DC 8AF0      2610            mov     b,r2
09DE 63F080    2611            xrl     b,#0x80
09E1 95F0      2612            subb    a,b
09E3 5001      2613            jnc     L036066?
09E5 C3        2614            clr     c
09E6 74C6      2615            mov     a,#(0x46 ^ 0x80)
09E8 8AF0      2616            mov     b,r2
09EA 63F080    2617            xrl     b,#0x80
09ED 95F0      2618            subb    a,b
09EF 4001      2619            jc      L036066?
09F1           2620   ;        Nunchuck_reader.h:316: direction=SEE;
09F1 7B0E      2621            mov     r3,#0x0E
09F3 020100    2622            ljmp    L036085?
09F6           2623   L036066?:
09F6           2624   ;        Nunchuck_reader.h:318: else if(x_axis>70&&x_axis<=100){
09F6 C3        2625            clr     c
09F7 74C6      2626            mov     a,#(0x46 ^ 0x80)
09F9 8AF0      2627            mov     b,r2
09FB 63F080    2628            xrl     b,#0x80
09FE 95F0      2629            subb    a,b
0A00 5001      2630            jnc     L036062?
0A02 C3        2631            clr     c
0A03 74E4      2632            mov     a,#(0x64 ^ 0x80)
0A05 8AF0      2633            mov     b,r2
0A07 63F080    2634            xrl     b,#0x80
0A0A 95F0      2635            subb    a,b
0A0C 4001      2636            jc      L036062?
0A0E           2637   ;        Nunchuck_reader.h:319: direction=east;
0A0E 7B08      2638            mov     r3,#0x08
0A10 8001      2639            sjmp    L036085?
0A12           2640   L036062?:
0A12           2641   ;        Nunchuck_reader.h:322: else if(x_axis<-10&&x_axis>=-30){
0A12 C3        2642            clr     c
0A13 EA        2643            mov     a,r2
0A14 6480      2644            xrl     a,#0x80
0A16 9476      2645            subb    a,#0x76
0A18 5001      2646            jnc     L036058?
0A1A C3        2647            clr     c
0A1B EA        2648            mov     a,r2
0A1C 6480      2649            xrl     a,#0x80
0A1E 9462      2650            subb    a,#0x62
0A20 4001      2651            jc      L036058?
0A22           2652   ;        Nunchuck_reader.h:323: direction=SSW;
0A22 7B0B      2653            mov     r3,#0x0B
0A24 8001      2654            sjmp    L036085?
0A26           2655   L036058?:
0A26           2656   ;        Nunchuck_reader.h:325: else if(x_axis<-30&&x_axis>=-50){
0A26 C3        2657            clr     c
0A27 EA        2658            mov     a,r2
0A28 6480      2659            xrl     a,#0x80
0A2A 9462      2660            subb    a,#0x62
0A2C 5001      2661            jnc     L036054?
0A2E C3        2662            clr     c
0A2F EA        2663            mov     a,r2
0A30 6480      2664            xrl     a,#0x80
0A32 944E      2665            subb    a,#0x4e
0A34 4001      2666            jc      L036054?
0A36           2667   ;        Nunchuck_reader.h:326: direction=SW;
0A36 7B0C      2668            mov     r3,#0x0C
0A38 8001      2669            sjmp    L036085?
0A3A           2670   L036054?:
0A3A           2671   ;        Nunchuck_reader.h:328: else if(x_axis<-50&&x_axis>=-80){
0A3A C3        2672            clr     c
0A3B EA        2673            mov     a,r2
0A3C 6480      2674            xrl     a,#0x80
0A3E 944E      2675            subb    a,#0x4e
0A40 5001      2676            jnc     L036050?
0A42 C3        2677            clr     c
0A43 EA        2678            mov     a,r2
0A44 6480      2679            xrl     a,#0x80
0A46 9430      2680            subb    a,#0x30
0A48 4001      2681            jc      L036050?
0A4A           2682   ;        Nunchuck_reader.h:329: direction=SWW;
0A4A 7B0F      2683            mov     r3,#0x0F
0A4C 8001      2684            sjmp    L036085?
0A4E           2685   L036050?:
0A4E           2686   ;        Nunchuck_reader.h:331: else if(x_axis<-80&&x_axis>=-110){
0A4E C3        2687            clr     c
0A4F EA        2688            mov     a,r2
0A50 6480      2689            xrl     a,#0x80
0A52 9430      2690            subb    a,#0x30
0A54 5001      2691            jnc     L036046?
0A56 C3        2692            clr     c
0A57 EA        2693            mov     a,r2
0A58 6480      2694            xrl     a,#0x80
0A5A 9412      2695            subb    a,#0x12
0A5C 4001      2696            jc      L036046?
0A5E           2697   ;        Nunchuck_reader.h:332: direction=west;
0A5E 7B09      2698            mov     r3,#0x09
0A60 8001      2699            sjmp    L036085?
0A62           2700   L036046?:
0A62           2701   ;        Nunchuck_reader.h:335: direction=north;
0A62 7B00      2702            mov     r3,#0x00
0A64           2703   L036085?:
0A64           2704   ;        Nunchuck_reader.h:341: return direction;
0A64 8B82      2705            mov     dpl,r3
0A66 22        2706            ret
0A67           2707   ;------------------------------------------------------------
0A67           2708   ;Allocation info for local variables in function 'read_nunchuck'
0A67           2709   ;------------------------------------------------------------
0A67           2710   ;speed                     Allocated with name '_read_nunchuck_PARM_2'
0A67           2711   ;rbuf                      Allocated with name '_read_nunchuck_PARM_3'
0A67           2712   ;off_x                     Allocated with name '_read_nunchuck_PARM_4'
0A67           2713   ;off_y                     Allocated with name '_read_nunchuck_PARM_5'
0A67           2714   ;direction                 Allocated with name '_read_nunchuck_direction_1_167'
0A67           2715   ;joy_x                     Allocated to registers r0 
0A67           2716   ;joy_y                     Allocated to registers r1 
0A67           2717   ;------------------------------------------------------------
0A67           2718   ;        Nunchuck_reader.h:346: bit read_nunchuck(char * direction, char * speed, char * rbuf, int off_x, int off_y)
0A67           2719   ;        -----------------------------------------
0A67           2720   ;         function read_nunchuck
0A67           2721   ;        -----------------------------------------
0A67           2722   _read_nunchuck:
0A67 8582B0    2723            mov     _read_nunchuck_direction_1_167,dpl
0A6A 8583B1    2724            mov     (_read_nunchuck_direction_1_167 + 1),dph
0A6D 85F0B2    2725            mov     (_read_nunchuck_direction_1_167 + 2),b
0A70           2726   ;        Nunchuck_reader.h:366: nunchuck_getdata(rbuf);
0A70 AD00      2727            mov     r5,_read_nunchuck_PARM_3
0A72 AE01      2728            mov     r6,(_read_nunchuck_PARM_3 + 1)
0A74 AF02      2729            mov     r7,(_read_nunchuck_PARM_3 + 2)
0A76 8D82      2730            mov     dpl,r5
0A78 8E83      2731            mov     dph,r6
0A7A 8FF0      2732            mov     b,r7
0A7C 120100    2733            lcall   _nunchuck_getdata
0A7F           2734   ;        Nunchuck_reader.h:371: joy_x=(int)rbuf[0]-128-off_x;
0A7F AD00      2735            mov     r5,_read_nunchuck_PARM_3
0A81 AE01      2736            mov     r6,(_read_nunchuck_PARM_3 + 1)
0A83 AF02      2737            mov     r7,(_read_nunchuck_PARM_3 + 2)
0A85 8D82      2738            mov     dpl,r5
0A87 8E83      2739            mov     dph,r6
0A89 8FF0      2740            mov     b,r7
0A8B 120100    2741            lcall   __gptrget
0A8E F8        2742            mov     r0,a
0A8F 33        2743            rlc     a
0A90 95E0      2744            subb    a,acc
0A92 E8        2745            mov     a,r0
0A93 2480      2746            add     a,#0x80
0A95 A9B0      2747            mov     r1,_read_nunchuck_PARM_4
0A97 C3        2748            clr     c
0A98 99        2749            subb    a,r1
0A99 F8        2750            mov     r0,a
0A9A           2751   ;        Nunchuck_reader.h:372: joy_y=(int)rbuf[1]-128-off_y;
0A9A 7401      2752            mov     a,#0x01
0A9C 2D        2753            add     a,r5
0A9D F9        2754            mov     r1,a
0A9E E4        2755            clr     a
0A9F 3E        2756            addc    a,r6
0AA0 FA        2757            mov     r2,a
0AA1 8F03      2758            mov     ar3,r7
0AA3 8982      2759            mov     dpl,r1
0AA5 8A83      2760            mov     dph,r2
0AA7 8BF0      2761            mov     b,r3
0AA9 120100    2762            lcall   __gptrget
0AAC F9        2763            mov     r1,a
0AAD 33        2764            rlc     a
0AAE 95E0      2765            subb    a,acc
0AB0 E9        2766            mov     a,r1
0AB1 2480      2767            add     a,#0x80
0AB3 AA60      2768            mov     r2,_read_nunchuck_PARM_5
0AB5 C3        2769            clr     c
0AB6 9A        2770            subb    a,r2
0AB7 F9        2771            mov     r1,a
0AB8           2772   ;        Nunchuck_reader.h:377: Z_but=(rbuf[5] & 0x01)?1:0;
0AB8 7405      2773            mov     a,#0x05
0ABA 2D        2774            add     a,r5
0ABB FD        2775            mov     r5,a
0ABC E4        2776            clr     a
0ABD 3E        2777            addc    a,r6
0ABE FE        2778            mov     r6,a
0ABF 8D82      2779            mov     dpl,r5
0AC1 8E83      2780            mov     dph,r6
0AC3 8FF0      2781            mov     b,r7
0AC5 120100    2782            lcall   __gptrget
0AC8 13        2783            rrc     a
0AC9 92E0      2784            mov     _read_nunchuck_Z_but_1_168,c
0ACB           2785   ;        Nunchuck_reader.h:388: waitms(100); //determine if we want to change this length
0ACB 900064    2786            mov     dptr,#0x0064
0ACE C000      2787            push    ar0
0AD0 C001      2788            push    ar1
0AD2 120100    2789            lcall   _waitms
0AD5 D001      2790            pop     ar1
0AD7 D000      2791            pop     ar0
0AD9           2792   ;        Nunchuck_reader.h:393: *direction=get_direction(joy_x, joy_y);
0AD9 8950      2793            mov     _get_direction_PARM_2,r1
0ADB 8882      2794            mov     dpl,r0
0ADD C000      2795            push    ar0
0ADF C001      2796            push    ar1
0AE1 120100    2797            lcall   _get_direction
0AE4 AA82      2798            mov     r2,dpl
0AE6 D001      2799            pop     ar1
0AE8 D000      2800            pop     ar0
0AEA 85B082    2801            mov     dpl,_read_nunchuck_direction_1_167
0AED 85B183    2802            mov     dph,(_read_nunchuck_direction_1_167 + 1)
0AF0 85B2F0    2803            mov     b,(_read_nunchuck_direction_1_167 + 2)
0AF3 EA        2804            mov     a,r2
0AF4 120100    2805            lcall   __gptrput
0AF7           2806   ;        Nunchuck_reader.h:394: *speed = get_speed(joy_x, joy_y);
0AF7 AA50      2807            mov     r2,_read_nunchuck_PARM_2
0AF9 AB51      2808            mov     r3,(_read_nunchuck_PARM_2 + 1)
0AFB AC52      2809            mov     r4,(_read_nunchuck_PARM_2 + 2)
0AFD 89A0      2810            mov     _get_speed_PARM_2,r1
0AFF 8882      2811            mov     dpl,r0
0B01 C002      2812            push    ar2
0B03 C003      2813            push    ar3
0B05 C004      2814            push    ar4
0B07 120100    2815            lcall   _get_speed
0B0A AD82      2816            mov     r5,dpl
0B0C D004      2817            pop     ar4
0B0E D003      2818            pop     ar3
0B10 D002      2819            pop     ar2
0B12 8A82      2820            mov     dpl,r2
0B14 8B83      2821            mov     dph,r3
0B16 8CF0      2822            mov     b,r4
0B18 ED        2823            mov     a,r5
0B19 120100    2824            lcall   __gptrput
0B1C           2825   ;        Nunchuck_reader.h:396: return Z_but;
0B1C A2E0      2826            mov     c,_read_nunchuck_Z_but_1_168
0B1E 22        2827            ret
0B1F           2828   ;------------------------------------------------------------
0B1F           2829   ;Allocation info for local variables in function '_c51_external_startup'
0B1F           2830   ;------------------------------------------------------------
0B1F           2831   ;------------------------------------------------------------
0B1F           2832   ;        Transmitter_src.c:19: char _c51_external_startup (void)
0B1F           2833   ;        -----------------------------------------
0B1F           2834   ;         function _c51_external_startup
0B1F           2835   ;        -----------------------------------------
0B1F           2836   __c51_external_startup:
0B1F           2837   ;        Transmitter_src.c:23: SFRPAGE = 0x00;
0B1F 75A700    2838            mov     _SFRPAGE,#0x00
0B22           2839   ;        Transmitter_src.c:24: WDTCN = 0xDE; //First key
0B22 7597DE    2840            mov     _WDTCN,#0xDE
0B25           2841   ;        Transmitter_src.c:25: WDTCN = 0xAD; //Second key
0B25 7597AD    2842            mov     _WDTCN,#0xAD
0B28           2843   ;        Transmitter_src.c:27: VDM0CN |= 0x80;  // enable VDD mon
0B28 43FF80    2844            orl     _VDM0CN,#0x80
0B2B           2845   ;        Transmitter_src.c:28: RSTSRC = 0x02;
0B2B 75EF02    2846            mov     _RSTSRC,#0x02
0B2E           2847   ;        Transmitter_src.c:35: SFRPAGE = 0x10;
0B2E 75A710    2848            mov     _SFRPAGE,#0x10
0B31           2849   ;        Transmitter_src.c:36: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0B31 75C120    2850            mov     _PFE0CN,#0x20
0B34           2851   ;        Transmitter_src.c:37: SFRPAGE = 0x00;
0B34 75A700    2852            mov     _SFRPAGE,#0x00
0B37           2853   ;        Transmitter_src.c:58: CLKSEL = 0x00;
0B37 75A900    2854            mov     _CLKSEL,#0x00
0B3A           2855   ;        Transmitter_src.c:59: CLKSEL = 0x00;
0B3A 75A900    2856            mov     _CLKSEL,#0x00
0B3D           2857   ;        Transmitter_src.c:60: while ((CLKSEL & 0x80) == 0);
0B3D           2858   L038001?:
0B3D E5A9      2859            mov     a,_CLKSEL
0B3F 30E7C0    2860            jnb     acc.7,L038001?
0B42           2861   ;        Transmitter_src.c:61: CLKSEL = 0x03;
0B42 75A903    2862            mov     _CLKSEL,#0x03
0B45           2863   ;        Transmitter_src.c:62: CLKSEL = 0x03;
0B45 75A903    2864            mov     _CLKSEL,#0x03
0B48           2865   ;        Transmitter_src.c:63: while ((CLKSEL & 0x80) == 0);
0B48           2866   L038004?:
0B48 E5A9      2867            mov     a,_CLKSEL
0B4A 30E700    2868            jnb     acc.7,L038004?
0B4D           2869   ;        Transmitter_src.c:74: SCON0 = 0x10;
0B4D 759810    2870            mov     _SCON0,#0x10
0B50           2871   ;        Transmitter_src.c:75: CKCON0 |= 0b_0000_0000 ; // Timer 1 uses the system clock divided by 12.
0B50 858E8E    2872            mov     _CKCON0,_CKCON0
0B53           2873   ;        Transmitter_src.c:76: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0B53 758DE6    2874            mov     _TH1,#0xE6
0B56           2875   ;        Transmitter_src.c:77: TL1 = TH1;      // Init Timer1
0B56 858D8B    2876            mov     _TL1,_TH1
0B59           2877   ;        Transmitter_src.c:78: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0B59 53890F    2878            anl     _TMOD,#0x0F
0B5C           2879   ;        Transmitter_src.c:79: TMOD |=  0x20;                       
0B5C 438920    2880            orl     _TMOD,#0x20
0B5F           2881   ;        Transmitter_src.c:80: TR1 = 1; // START Timer1
0B5F D28E      2882            setb    _TR1
0B61           2883   ;        Transmitter_src.c:81: TI = 1;  // Indicate TX0 ready
0B61 D299      2884            setb    _TI
0B63           2885   ;        Transmitter_src.c:83: P0MDOUT |= 0x14; // Enable UART0 TX as push-pull output and UART1 Tx (pin 0.2)
0B63 43A414    2886            orl     _P0MDOUT,#0x14
0B66           2887   ;        Transmitter_src.c:84: P1MDOUT |= 0xff; // Enable Push/Pull on port 1
0B66 E5A5      2888            mov     a,_P1MDOUT
0B68 75A5FF    2889            mov     _P1MDOUT,#0xFF
0B6B           2890   ;        Transmitter_src.c:86: XBR0     = 0b_0000_0101; // Enable UART0 on P0.4(TX) and P0.5(RX) and SMB0 I/O on (0.0 SDA) and (0.1 SCL)               
0B6B 75E105    2891            mov     _XBR0,#0x05
0B6E           2892   ;        Transmitter_src.c:87: XBR1     = 0x00; // Enable T0 on P0.0
0B6E 75E200    2893            mov     _XBR1,#0x00
0B71           2894   ;        Transmitter_src.c:88: XBR2     = 0x41; // Enable crossbar and weak pull-ups .... (page 110) may need to set BIT0 to enable UART1 IO (0.2 Tx) and 0.3 RX
0B71 75E341    2895            mov     _XBR2,#0x41
0B74           2896   ;        Transmitter_src.c:90: Timer0_init();
0B74 120100    2897            lcall   _Timer0_init
0B77           2898   ;        Transmitter_src.c:92: EA = 1;
0B77 D2AF      2899            setb    _EA
0B79           2900   ;        Transmitter_src.c:95: SMB0CF = 0b_0101_1100; //INH | EXTHOLD | SMBTOE | SMBFTE ;
0B79 75C15C    2901            mov     _SMB0CF,#0x5C
0B7C           2902   ;        Transmitter_src.c:96: SMB0CF |= 0b_1000_0000;  // Enable SMBus
0B7C 43C180    2903            orl     _SMB0CF,#0x80
0B7F           2904   ;        Transmitter_src.c:99: return 0;
0B7F 758200    2905            mov     dpl,#0x00
0B82 22        2906            ret
0B83           2907   ;------------------------------------------------------------
0B83           2908   ;Allocation info for local variables in function 'getsn'
0B83           2909   ;------------------------------------------------------------
0B83           2910   ;len                       Allocated with name '_getsn_PARM_2'
0B83           2911   ;buff                      Allocated with name '_getsn_buff_1_171'
0B83           2912   ;j                         Allocated with name '_getsn_sloc0_1_0'
0B83           2913   ;c                         Allocated to registers r3 
0B83           2914   ;sloc0                     Allocated with name '_getsn_sloc0_1_0'
0B83           2915   ;------------------------------------------------------------
0B83           2916   ;        Transmitter_src.c:103: int getsn (char * buff, int len){
0B83           2917   ;        -----------------------------------------
0B83           2918   ;         function getsn
0B83           2919   ;        -----------------------------------------
0B83           2920   _getsn:
0B83 858200    2921            mov     _getsn_buff_1_171,dpl
0B86 858301    2922            mov     (_getsn_buff_1_171 + 1),dph
0B89 85F002    2923            mov     (_getsn_buff_1_171 + 2),b
0B8C           2924   ;        Transmitter_src.c:108: for(j=0; j<(len-1); j++)
0B8C E4        2925            clr     a
0B8D F550      2926            mov     _getsn_sloc0_1_0,a
0B8F F551      2927            mov     (_getsn_sloc0_1_0 + 1),a
0B91 E5D0      2928            mov     a,_getsn_PARM_2
0B93 24FF      2929            add     a,#0xff
0B95 FF        2930            mov     r7,a
0B96 E5D1      2931            mov     a,(_getsn_PARM_2 + 1)
0B98 34FF      2932            addc    a,#0xff
0B9A F8        2933            mov     r0,a
0B9B 7900      2934            mov     r1,#0x00
0B9D 7A00      2935            mov     r2,#0x00
0B9F           2936   L039005?:
0B9F C3        2937            clr     c
0BA0 E9        2938            mov     a,r1
0BA1 9F        2939            subb    a,r7
0BA2 EA        2940            mov     a,r2
0BA3 6480      2941            xrl     a,#0x80
0BA5 88F0      2942            mov     b,r0
0BA7 63F080    2943            xrl     b,#0x80
0BAA 95F0      2944            subb    a,b
0BAC 5001      2945            jnc     L039008?
0BAE           2946   ;        Transmitter_src.c:110: c=getchar();
0BAE C002      2947            push    ar2
0BB0 C007      2948            push    ar7
0BB2 C000      2949            push    ar0
0BB4 C001      2950            push    ar1
0BB6 120100    2951            lcall   _getchar
0BB9 AB82      2952            mov     r3,dpl
0BBB D001      2953            pop     ar1
0BBD D000      2954            pop     ar0
0BBF D007      2955            pop     ar7
0BC1 D002      2956            pop     ar2
0BC3           2957   ;        Transmitter_src.c:111: if ( (c=='\n') || (c=='\r') )
0BC3 BB0A00    2958            cjne    r3,#0x0A,L039015?
0BC6 8001      2959            sjmp    L039001?
0BC8           2960   L039015?:
0BC8 BB0D80    2961            cjne    r3,#0x0D,L039002?
0BCB           2962   L039001?:
0BCB           2963   ;        Transmitter_src.c:113: buff[j]=0;
0BCB E550      2964            mov     a,_getsn_sloc0_1_0
0BCD 2500      2965            add     a,_getsn_buff_1_171
0BCF FC        2966            mov     r4,a
0BD0 E551      2967            mov     a,(_getsn_sloc0_1_0 + 1)
0BD2 3501      2968            addc    a,(_getsn_buff_1_171 + 1)
0BD4 FD        2969            mov     r5,a
0BD5 AE02      2970            mov     r6,(_getsn_buff_1_171 + 2)
0BD7 8C82      2971            mov     dpl,r4
0BD9 8D83      2972            mov     dph,r5
0BDB 8EF0      2973            mov     b,r6
0BDD E4        2974            clr     a
0BDE 120100    2975            lcall   __gptrput
0BE1           2976   ;        Transmitter_src.c:114: return j;
0BE1 855082    2977            mov     dpl,_getsn_sloc0_1_0
0BE4 855183    2978            mov     dph,(_getsn_sloc0_1_0 + 1)
0BE7 22        2979            ret
0BE8           2980   L039002?:
0BE8           2981   ;        Transmitter_src.c:118: buff[j]=c;
0BE8 E9        2982            mov     a,r1
0BE9 2500      2983            add     a,_getsn_buff_1_171
0BEB FC        2984            mov     r4,a
0BEC EA        2985            mov     a,r2
0BED 3501      2986            addc    a,(_getsn_buff_1_171 + 1)
0BEF FD        2987            mov     r5,a
0BF0 AE02      2988            mov     r6,(_getsn_buff_1_171 + 2)
0BF2 8C82      2989            mov     dpl,r4
0BF4 8D83      2990            mov     dph,r5
0BF6 8EF0      2991            mov     b,r6
0BF8 EB        2992            mov     a,r3
0BF9 120100    2993            lcall   __gptrput
0BFC           2994   ;        Transmitter_src.c:108: for(j=0; j<(len-1); j++)
0BFC 09        2995            inc     r1
0BFD B900C0    2996            cjne    r1,#0x00,L039018?
0C00 0A        2997            inc     r2
0C01           2998   L039018?:
0C01 8950      2999            mov     _getsn_sloc0_1_0,r1
0C03 8A51      3000            mov     (_getsn_sloc0_1_0 + 1),r2
0C05 8001      3001            sjmp    L039005?
0C07           3002   L039008?:
0C07           3003   ;        Transmitter_src.c:121: buff[j]=0;
0C07 E550      3004            mov     a,_getsn_sloc0_1_0
0C09 2500      3005            add     a,_getsn_buff_1_171
0C0B FA        3006            mov     r2,a
0C0C E551      3007            mov     a,(_getsn_sloc0_1_0 + 1)
0C0E 3501      3008            addc    a,(_getsn_buff_1_171 + 1)
0C10 FB        3009            mov     r3,a
0C11 AC02      3010            mov     r4,(_getsn_buff_1_171 + 2)
0C13 8A82      3011            mov     dpl,r2
0C15 8B83      3012            mov     dph,r3
0C17 8CF0      3013            mov     b,r4
0C19 E4        3014            clr     a
0C1A 120100    3015            lcall   __gptrput
0C1D           3016   ;        Transmitter_src.c:122: return len;
0C1D 85D082    3017            mov     dpl,_getsn_PARM_2
0C20 85D183    3018            mov     dph,(_getsn_PARM_2 + 1)
0C23 22        3019            ret
0C24           3020   ;------------------------------------------------------------
0C24           3021   ;Allocation info for local variables in function 'main'
0C24           3022   ;------------------------------------------------------------
0C24           3023   ;buffer                    Allocated with name '_main_buffer_1_177'
0C24           3024   ;speed                     Allocated with name '_main_speed_1_177'
0C24           3025   ;direction                 Allocated with name '_main_direction_1_177'
0C24           3026   ;off_x                     Allocated to registers r2 r3 
0C24           3027   ;off_y                     Allocated with name '_main_off_y_1_177'
0C24           3028   ;------------------------------------------------------------
0C24           3029   ;        Transmitter_src.c:125: void main(void) {
0C24           3030   ;        -----------------------------------------
0C24           3031   ;         function main
0C24           3032   ;        -----------------------------------------
0C24           3033   _main:
0C24           3034   ;        Transmitter_src.c:129: int off_x=0;
0C24           3035   ;        Transmitter_src.c:130: int off_y=0;
0C24 E4        3036            clr     a
0C25 FA        3037            mov     r2,a
0C26 FB        3038            mov     r3,a
0C27 F590      3039            mov     _main_off_y_1_177,a
0C29 F591      3040            mov     (_main_off_y_1_177 + 1),a
0C2B           3041   ;        Transmitter_src.c:131: offset_flag=1;
0C2B D2B0      3042            setb    _offset_flag
0C2D           3043   ;        Transmitter_src.c:134: Tcom_init(110L); //enter baudrate for UART1
0C2D 90006E    3044            mov     dptr,#(0x6E&0x00ff)
0C30 E4        3045            clr     a
0C31 F5F0      3046            mov     b,a
0C33 C002      3047            push    ar2
0C35 C003      3048            push    ar3
0C37 120100    3049            lcall   _Tcom_init
0C3A           3050   ;        Transmitter_src.c:135: LCD_4BIT();
0C3A 120100    3051            lcall   _LCD_4BIT
0C3D           3052   ;        Transmitter_src.c:137: waitms(200);
0C3D 9000C8    3053            mov     dptr,#0x00C8
0C40 120100    3054            lcall   _waitms
0C43 D003      3055            pop     ar3
0C45 D002      3056            pop     ar2
0C47           3057   ;        Transmitter_src.c:138: if (mode == 1) {
0C47 7401      3058            mov     a,#0x01
0C49 B51000    3059            cjne    a,_mode,L040002?
0C4C           3060   ;        Transmitter_src.c:139: nunchuck_init(1);
0C4C D200      3061            setb    _nunchuck_init_PARM_1
0C4E C002      3062            push    ar2
0C50 C003      3063            push    ar3
0C52 120100    3064            lcall   _nunchuck_init
0C55 D003      3065            pop     ar3
0C57 D002      3066            pop     ar2
0C59           3067   L040002?:
0C59           3068   ;        Transmitter_src.c:141: waitms(100);
0C59 900064    3069            mov     dptr,#0x0064
0C5C C002      3070            push    ar2
0C5E C003      3071            push    ar3
0C60 120100    3072            lcall   _waitms
0C63 D003      3073            pop     ar3
0C65 D002      3074            pop     ar2
0C67           3075   ;        Transmitter_src.c:143: if(offset_flag && mode == 1){
0C67 30B040    3076            jnb     _offset_flag,L040004?
0C6A 7401      3077            mov     a,#0x01
0C6C B51040    3078            cjne    a,_mode,L040004?
0C6F           3079   ;        Transmitter_src.c:144: nunchuck_getdata(buffer);
0C6F 90C3A0    3080            mov     dptr,#_main_buffer_1_177
0C72 75F040    3081            mov     b,#0x40
0C75 120100    3082            lcall   _nunchuck_getdata
0C78           3083   ;        Transmitter_src.c:145: off_x=(int)buffer[0]-128;
0C78 AEA0      3084            mov     r6,_main_buffer_1_177
0C7A 7F00      3085            mov     r7,#0x00
0C7C EE        3086            mov     a,r6
0C7D 2480      3087            add     a,#0x80
0C7F FA        3088            mov     r2,a
0C80 EF        3089            mov     a,r7
0C81 34FF      3090            addc    a,#0xff
0C83 FB        3091            mov     r3,a
0C84           3092   ;        Transmitter_src.c:146: off_y=(int)buffer[1]-128;
0C84 AEA1      3093            mov     r6,(_main_buffer_1_177 + 0x0001)
0C86 7F00      3094            mov     r7,#0x00
0C88 EE        3095            mov     a,r6
0C89 2480      3096            add     a,#0x80
0C8B F590      3097            mov     _main_off_y_1_177,a
0C8D EF        3098            mov     a,r7
0C8E 34FF      3099            addc    a,#0xff
0C90 F591      3100            mov     (_main_off_y_1_177 + 1),a
0C92           3101   ;        Transmitter_src.c:147: printf("Offset_X:%4d Offset_Y:%4d\n\n", off_x, off_y);
0C92 C002      3102            push    ar2
0C94 C003      3103            push    ar3
0C96 C090      3104            push    _main_off_y_1_177
0C98 C091      3105            push    (_main_off_y_1_177 + 1)
0C9A C002      3106            push    ar2
0C9C C003      3107            push    ar3
0C9E 7480      3108            mov     a,#__str_11
0CA0 C0E0      3109            push    acc
0CA2 74E4      3110            mov     a,#(__str_11 >> 8)
0CA4 C0E0      3111            push    acc
0CA6 7480      3112            mov     a,#0x80
0CA8 C0E0      3113            push    acc
0CAA 120100    3114            lcall   _printf
0CAD E581      3115            mov     a,sp
0CAF 24F9      3116            add     a,#0xf9
0CB1 F581      3117            mov     sp,a
0CB3 D003      3118            pop     ar3
0CB5 D002      3119            pop     ar2
0CB7           3120   ;        Transmitter_src.c:148: offset_flag=0; //clear offset flag, so not to re-get offset. 
0CB7 C2B0      3121            clr     _offset_flag
0CB9           3122   L040004?:
0CB9           3123   ;        Transmitter_src.c:151: waitms(500);
0CB9 9001F4    3124            mov     dptr,#0x01F4
0CBC C002      3125            push    ar2
0CBE C003      3126            push    ar3
0CC0 120100    3127            lcall   _waitms
0CC3           3128   ;        Transmitter_src.c:153: printf("LAB 6 Microcontroller\r\nWith extra features\r\n\n");
0CC3 74C0      3129            mov     a,#__str_12
0CC5 C0E0      3130            push    acc
0CC7 74E4      3131            mov     a,#(__str_12 >> 8)
0CC9 C0E0      3132            push    acc
0CCB 7480      3133            mov     a,#0x80
0CCD C0E0      3134            push    acc
0CCF 120100    3135            lcall   _printf
0CD2 1581      3136            dec     sp
0CD4 1581      3137            dec     sp
0CD6 1581      3138            dec     sp
0CD8           3139   ;        Transmitter_src.c:154: waitms(500);     
0CD8 9001F4    3140            mov     dptr,#0x01F4
0CDB 120100    3141            lcall   _waitms
0CDE           3142   ;        Transmitter_src.c:155: LCDprint("Ready", 1, 1);
0CDE 75F001    3143            mov     _LCDprint_PARM_2,#0x01
0CE1 D250      3144            setb    _LCDprint_PARM_3
0CE3 90E500    3145            mov     dptr,#__str_13
0CE6 75F080    3146            mov     b,#0x80
0CE9 120100    3147            lcall   _LCDprint
0CEC D003      3148            pop     ar3
0CEE D002      3149            pop     ar2
0CF0           3150   ;        Transmitter_src.c:160: while(1) {
0CF0           3151   L040017?:
0CF0           3152   ;        Transmitter_src.c:164: if (mode == 0) {
0CF0 E510      3153            mov     a,_mode
0CF2 7001      3154            jnz     L040014?
0CF4           3155   ;        Transmitter_src.c:165: printf("Enter command: \r\n");
0CF4 C002      3156            push    ar2
0CF6 C003      3157            push    ar3
0CF8 74C0      3158            mov     a,#__str_14
0CFA C0E0      3159            push    acc
0CFC 74E5      3160            mov     a,#(__str_14 >> 8)
0CFE C0E0      3161            push    acc
0D00 7480      3162            mov     a,#0x80
0D02 C0E0      3163            push    acc
0D04 120100    3164            lcall   _printf
0D07 1581      3165            dec     sp
0D09 1581      3166            dec     sp
0D0B 1581      3167            dec     sp
0D0D           3168   ;        Transmitter_src.c:166: getsn(buffer, CHARS_PER_LINE);
0D0D 75D010    3169            mov     _getsn_PARM_2,#0x10
0D10 E4        3170            clr     a
0D11 F5D1      3171            mov     (_getsn_PARM_2 + 1),a
0D13 90C3A0    3172            mov     dptr,#_main_buffer_1_177
0D16 75F040    3173            mov     b,#0x40
0D19 120100    3174            lcall   _getsn
0D1C           3175   ;        Transmitter_src.c:167: getCommand(buffer); //after use, is clear, only used within functions
0D1C 90C3A0    3176            mov     dptr,#_main_buffer_1_177
0D1F 75F040    3177            mov     b,#0x40
0D22 120100    3178            lcall   _getCommand
0D25 D003      3179            pop     ar3
0D27 D002      3180            pop     ar2
0D29 8001      3181            sjmp    L040017?
0D2B           3182   L040014?:
0D2B           3183   ;        Transmitter_src.c:169: } else if ((mode == 1)) {
0D2B 7401      3184            mov     a,#0x01
0D2D B51040    3185            cjne    a,_mode,L040017?
0D30           3186   ;        Transmitter_src.c:170: Z_but=read_nunchuck(&direction, &speed, buffer, off_x, off_y);
0D30 7550F0    3187            mov     _read_nunchuck_PARM_2,#_main_speed_1_177
0D33 755100    3188            mov     (_read_nunchuck_PARM_2 + 1),#0x00
0D36 755240    3189            mov     (_read_nunchuck_PARM_2 + 2),#0x40
0D39 7500A0    3190            mov     _read_nunchuck_PARM_3,#_main_buffer_1_177
0D3C 750100    3191            mov     (_read_nunchuck_PARM_3 + 1),#0x00
0D3F 750240    3192            mov     (_read_nunchuck_PARM_3 + 2),#0x40
0D42 8AB0      3193            mov     _read_nunchuck_PARM_4,r2
0D44 8BB1      3194            mov     (_read_nunchuck_PARM_4 + 1),r3
0D46 859060    3195            mov     _read_nunchuck_PARM_5,_main_off_y_1_177
0D49 859161    3196            mov     (_read_nunchuck_PARM_5 + 1),(_main_off_y_1_177 + 1)
0D4C 90C440    3197            mov     dptr,#_main_direction_1_177
0D4F 75F040    3198            mov     b,#0x40
0D52 C002      3199            push    ar2
0D54 C003      3200            push    ar3
0D56 120100    3201            lcall   _read_nunchuck
0D59 9290      3202            mov     _Z_but,c
0D5B           3203   ;        Transmitter_src.c:172: printf("Z_but: %i", Z_but);
0D5B A290      3204            mov     c,_Z_but
0D5D E4        3205            clr     a
0D5E 33        3206            rlc     a
0D5F FE        3207            mov     r6,a
0D60 7F00      3208            mov     r7,#0x00
0D62 C006      3209            push    ar6
0D64 C007      3210            push    ar7
0D66 7400      3211            mov     a,#__str_15
0D68 C0E0      3212            push    acc
0D6A 74E6      3213            mov     a,#(__str_15 >> 8)
0D6C C0E0      3214            push    acc
0D6E 7480      3215            mov     a,#0x80
0D70 C0E0      3216            push    acc
0D72 120100    3217            lcall   _printf
0D75 E581      3218            mov     a,sp
0D77 24FB      3219            add     a,#0xfb
0D79 F581      3220            mov     sp,a
0D7B D003      3221            pop     ar3
0D7D D002      3222            pop     ar2
0D7F           3223   ;        Transmitter_src.c:174: if(Z_but==0){ 
0D7F 209040    3224            jb      _Z_but,L040010?
0D82           3225   ;        Transmitter_src.c:175: if(speedbit){
0D82 307080    3226            jnb     _speedbit,L040007?
0D85           3227   ;        Transmitter_src.c:176: sendCommand(SPEED_OP, speed);
0D85 85F040    3228            mov     _sendCommand_PARM_2,_main_speed_1_177
0D88 758200    3229            mov     dpl,#0x00
0D8B C002      3230            push    ar2
0D8D C003      3231            push    ar3
0D8F 120100    3232            lcall   _sendCommand
0D92           3233   ;        Transmitter_src.c:177: printf("yesssss\n\n");
0D92 74C0      3234            mov     a,#__str_16
0D94 C0E0      3235            push    acc
0D96 74E6      3236            mov     a,#(__str_16 >> 8)
0D98 C0E0      3237            push    acc
0D9A 7480      3238            mov     a,#0x80
0D9C C0E0      3239            push    acc
0D9E 120100    3240            lcall   _printf
0DA1 1581      3241            dec     sp
0DA3 1581      3242            dec     sp
0DA5 1581      3243            dec     sp
0DA7 D003      3244            pop     ar3
0DA9 D002      3245            pop     ar2
0DAB           3246   ;        Transmitter_src.c:178: speedbit=0;
0DAB C270      3247            clr     _speedbit
0DAD 8001      3248            sjmp    L040010?
0DAF           3249   L040007?:
0DAF           3250   ;        Transmitter_src.c:181: printf("dirrrrrrrrr: %i \n\n", direction);
0DAF E540      3251            mov     a,_main_direction_1_177
0DB1 FE        3252            mov     r6,a
0DB2 33        3253            rlc     a
0DB3 95E0      3254            subb    a,acc
0DB5 FF        3255            mov     r7,a
0DB6 C002      3256            push    ar2
0DB8 C003      3257            push    ar3
0DBA C006      3258            push    ar6
0DBC C007      3259            push    ar7
0DBE 7400      3260            mov     a,#__str_17
0DC0 C0E0      3261            push    acc
0DC2 74E7      3262            mov     a,#(__str_17 >> 8)
0DC4 C0E0      3263            push    acc
0DC6 7480      3264            mov     a,#0x80
0DC8 C0E0      3265            push    acc
0DCA 120100    3266            lcall   _printf
0DCD E581      3267            mov     a,sp
0DCF 24FB      3268            add     a,#0xfb
0DD1 F581      3269            mov     sp,a
0DD3           3270   ;        Transmitter_src.c:182: sendCommand(DIRECTION_OP, direction);
0DD3 854040    3271            mov     _sendCommand_PARM_2,_main_direction_1_177
0DD6 758201    3272            mov     dpl,#0x01
0DD9 120100    3273            lcall   _sendCommand
0DDC D003      3274            pop     ar3
0DDE D002      3275            pop     ar2
0DE0           3276   ;        Transmitter_src.c:183: speedbit=1;
0DE0 D270      3277            setb    _speedbit
0DE2           3278   L040010?:
0DE2           3279   ;        Transmitter_src.c:189: printf("direction: %d   speed: %d \n", direction, speed);
0DE2 E5F0      3280            mov     a,_main_speed_1_177
0DE4 FE        3281            mov     r6,a
0DE5 33        3282            rlc     a
0DE6 95E0      3283            subb    a,acc
0DE8 FF        3284            mov     r7,a
0DE9 E540      3285            mov     a,_main_direction_1_177
0DEB FC        3286            mov     r4,a
0DEC 33        3287            rlc     a
0DED 95E0      3288            subb    a,acc
0DEF FD        3289            mov     r5,a
0DF0 C002      3290            push    ar2
0DF2 C003      3291            push    ar3
0DF4 C006      3292            push    ar6
0DF6 C007      3293            push    ar7
0DF8 C004      3294            push    ar4
0DFA C005      3295            push    ar5
0DFC 7440      3296            mov     a,#__str_18
0DFE C0E0      3297            push    acc
0E00 74E7      3298            mov     a,#(__str_18 >> 8)
0E02 C0E0      3299            push    acc
0E04 7480      3300            mov     a,#0x80
0E06 C0E0      3301            push    acc
0E08 120100    3302            lcall   _printf
0E0B E581      3303            mov     a,sp
0E0D 24F9      3304            add     a,#0xf9
0E0F F581      3305            mov     sp,a
0E11 D003      3306            pop     ar3
0E13 D002      3307            pop     ar2
0E15 020100    3308            ljmp    L040017?
0E18           3309            rseg R_CSEG
0E18           3310   
0000           3311            rseg R_XINIT
0000           3312   
0000           3313            rseg R_CONST
0000           3314   __str_0:
0000 53656E74  3315            db 'Sent: %d'
     3A202564
0008 0D        3316            db 0x0D
0009 0A        3317            db 0x0A
000A 00        3318            db 0x00
000B           3319   __str_1:
000B 63206572  3320            db 'c err'
     72
0010 0D        3321            db 0x0D
0011 0A        3322            db 0x0A
0012 00        3323            db 0x00
0013           3324   __str_2:
0013 252A7320  3325            db '%*s %c %c'
     25632025
     63
001C 00        3326            db 0x00
001D           3327   __str_3:
001D 252A7320  3328            db '%*s %u'
     2575
0023 00        3329            db 0x00
0024           3330   __str_4:
0024 53657420  3331            db 'Set timer4 freq to: %d'
     74696D65
     72342066
     72657120
     746F3A20
     2564
003A 0D        3332            db 0x0D
003B 0A        3333            db 0x0A
003C 00        3334            db 0x00
003D           3335   __str_5:
003D 53657420  3336            db 'Set timer4 reload to: %d'
     74696D65
     72342072
     656C6F61
     6420746F
     3A202564
0055 0D        3337            db 0x0D
0056 0A        3338            db 0x0A
0057 00        3339            db 0x00
0058           3340   __str_6:
0058 48656C70  3341            db 'Help Menu'
     204D656E
     75
0061 0D        3342            db 0x0D
0062 0A        3343            db 0x0A
0063 4C697374  3344            db 'List of Commands: '
     206F6620
     436F6D6D
     616E6473
     3A20
0075 0D        3345            db 0x0D
0076 0A        3346            db 0x0A
0077 2D637720  3347            db '-cw [duty value]'
     5B647574
     79207661
     6C75655D
0087 0D        3348            db 0x0D
0088 0A        3349            db 0x0A
0089 2D636377  3350            db '-ccw [duty '
     205B6475
     747920
0094 76616C75  3351            db 'value]'
     655D
009A 0D        3352            db 0x0D
009B 0A        3353            db 0x0A
009C 2D66205B  3354            db '-f [freq value]'
     66726571
     2076616C
     75655D
00AB 0D        3355            db 0x0D
00AC 0A        3356            db 0x0A
00AD 2D72205B  3357            db '-r [reload value]'
     72656C6F
     61642076
     616C7565
     5D
00BE 0D        3358            db 0x0D
00BF 0A        3359            db 0x0A
00C0 2D6F      3360            db '-o'
00C2 0D        3361            db 0x0D
00C3 0A        3362            db 0x0A
00C4 2D73      3363            db '-s'
00C6 0D        3364            db 0x0D
00C7 0A        3365            db 0x0A
00C8 2D69      3366            db '-i'
00CA 0D        3367            db 0x0D
00CB 0A        3368            db 0x0A
00CC 0A        3369            db 0x0A
00CD 00        3370            db 0x00
00CE           3371   __str_7:
00CE 52656C6F  3372            db 'Reload: %u, Freq: %d '
     61643A20
     25752C20
     46726571
     3A202564
     20
00E3 0D        3373            db 0x0D
00E4 0A        3374            db 0x0A
00E5 00        3375            db 0x00
00E6           3376   __str_8:
00E6 22        3377            db 0x22
00E7 2573      3378            db '%s'
00E9 22        3379            db 0x22
00EA 20696E76  3380            db ' invalid command'
     616C6964
     20636F6D
     6D616E64
00FA 0D        3381            db 0x0D
00FB 0A        3382            db 0x0A
00FC 00        3383            db 0x00
00FD           3384   __str_9:
00FD 4E6F7420  3385            db 'Not Valid input'
     56616C69
     6420696E
     707574
010C 0D        3386            db 0x0D
010D 0A        3387            db 0x0A
010E 00        3388            db 0x00
010F           3389   __str_10:
010F 45787465  3390            db 'Extension type: %02x  %02x  %02x  %02x  %02x  %02x'
     6E73696F
     6E207479
     70653A20
     25303278
     20202530
     32782020
     25303278
     20202530
     32782020
     25303278
     20202530
     3278
0141 0A        3391            db 0x0A
0142 00        3392            db 0x00
0143           3393   __str_11:
0143 4F666673  3394            db 'Offset_X:%4d Offset_Y:%4d'
     65745F58
     3A253464
     204F6666
     7365745F
     593A2534
     64
015C 0A        3395            db 0x0A
015D 0A        3396            db 0x0A
015E 00        3397            db 0x00
015F           3398   __str_12:
015F 4C414220  3399            db 'LAB 6 Microcontroller'
     36204D69
     63726F63
     6F6E7472
     6F6C6C65
     72
0174 0D        3400            db 0x0D
0175 0A        3401            db 0x0A
0176 57697468  3402            db 'With extra features'
     20657874
     72612066
     65617475
     726573
0189 0D        3403            db 0x0D
018A 0A        3404            db 0x0A
018B 0A        3405            db 0x0A
018C 00        3406            db 0x00
018D           3407   __str_13:
018D 52656164  3408            db 'Ready'
     79
0192 00        3409            db 0x00
0193           3410   __str_14:
0193 456E7465  3411            db 'Enter command: '
     7220636F
     6D6D616E
     643A20
01A2 0D        3412            db 0x0D
01A3 0A        3413            db 0x0A
01A4 00        3414            db 0x00
01A5           3415   __str_15:
01A5 5A5F6275  3416            db 'Z_but: %i'
     743A2025
     69
01AE 00        3417            db 0x00
01AF           3418   __str_16:
01AF 79657373  3419            db 'yesssss'
     737373
01B6 0A        3420            db 0x0A
01B7 0A        3421            db 0x0A
01B8 00        3422            db 0x00
01B9           3423   __str_17:
01B9 64697272  3424            db 'dirrrrrrrrr: %i '
     72727272
     7272723A
     20256920
01C9 0A        3425            db 0x0A
01CA 0A        3426            db 0x0A
01CB 00        3427            db 0x00
01CC           3428   __str_18:
01CC 64697265  3429            db 'direction: %d   speed: %d '
     6374696F
     6E3A2025
     64202020
     73706565
     643A2025
     6420
01E6 0A        3430            db 0x0A
01E7 00        3431            db 0x00
01E8           3432   
008E           3433            CSEG
008E           3434   
008E           3435   end
