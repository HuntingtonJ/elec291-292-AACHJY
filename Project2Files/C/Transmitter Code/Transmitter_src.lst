0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Wed Mar 28 13:30:05 2018
0000              5   ;--------------------------------------------------------
                  5   $name Transmitter_src
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _get_direction_PARM_2
0000             27            public _main
0000             28            public _getsn
0000             29            public __c51_external_startup
0000             30            public _read_nunchuck
0000             31            public _get_direction
0000             32            public _get_speed
0000             33            public _nunchuck_getdata
0000             34            public _nunchuck_init
0000             35            public _I2C_stop
0000             36            public _I2C_start
0000             37            public _I2C_read
0000             38            public _I2C_write
0000             39            public _LCDprint
0000             40            public _LCD_4BIT
0000             41            public _WriteCommand
0000             42            public _WriteData
0000             43            public _LCD_byte
0000             44            public _LCD_pulse
0000             45            public _waitms
0000             46            public _Timer2us
0000             47            public _Tcom_init
0000             48            public _getCommand
0000             49            public _PWMon
0000             50            public _PWMoff
0000             51            public _setReload
0000             52            public _setFrequency
0000             53            public _reloadToFrequency
0000             54            public _frequencyToReload
0000             55            public _sendCommandS
0000             56            public _sendCommand
0000             57            public _Timer4_ISR
0000             58            public _Timer4_init
0000             59            public _Timer2_ISR
0000             60            public _Timer2_init
0000             61            public _Timer0_ISR
0000             62            public _Timer0_init
0000             63            public _getchar1
0000             64            public _putchar1
0000             65            public _UART1_Init
0000             66            public _speedbit
0000             67            public _offset_flag
0000             68            public _nunchuck_init_PARM_1
0000             69            public _LCDprint_PARM_3
0000             70            public _reload_flag
0000             71            public _getsn_PARM_2
0000             72            public _read_nunchuck_PARM_5
0000             73            public _read_nunchuck_PARM_4
0000             74            public _read_nunchuck_PARM_3
0000             75            public _read_nunchuck_PARM_2
0000             76            public _get_speed_PARM_2
0000             77            public _LCDprint_PARM_2
0000             78            public _sendCommand_PARM_2
0000             79   ;--------------------------------------------------------
0000             80   ; Special Function Registers
0000             81   ;--------------------------------------------------------
0000             82   _ACC            DATA 0xe0
0000             83   _ADC0ASAH       DATA 0xb6
0000             84   _ADC0ASAL       DATA 0xb5
0000             85   _ADC0ASCF       DATA 0xa1
0000             86   _ADC0ASCT       DATA 0xc7
0000             87   _ADC0CF0        DATA 0xbc
0000             88   _ADC0CF1        DATA 0xb9
0000             89   _ADC0CF2        DATA 0xdf
0000             90   _ADC0CN0        DATA 0xe8
0000             91   _ADC0CN1        DATA 0xb2
0000             92   _ADC0CN2        DATA 0xb3
0000             93   _ADC0GTH        DATA 0xc4
0000             94   _ADC0GTL        DATA 0xc3
0000             95   _ADC0H          DATA 0xbe
0000             96   _ADC0L          DATA 0xbd
0000             97   _ADC0LTH        DATA 0xc6
0000             98   _ADC0LTL        DATA 0xc5
0000             99   _ADC0MX         DATA 0xbb
0000            100   _B              DATA 0xf0
0000            101   _CKCON0         DATA 0x8e
0000            102   _CKCON1         DATA 0xa6
0000            103   _CLEN0          DATA 0xc6
0000            104   _CLIE0          DATA 0xc7
0000            105   _CLIF0          DATA 0xe8
0000            106   _CLKSEL         DATA 0xa9
0000            107   _CLOUT0         DATA 0xd1
0000            108   _CLU0CF         DATA 0xb1
0000            109   _CLU0FN         DATA 0xaf
0000            110   _CLU0MX         DATA 0x84
0000            111   _CLU1CF         DATA 0xb3
0000            112   _CLU1FN         DATA 0xb2
0000            113   _CLU1MX         DATA 0x85
0000            114   _CLU2CF         DATA 0xb6
0000            115   _CLU2FN         DATA 0xb5
0000            116   _CLU2MX         DATA 0x91
0000            117   _CLU3CF         DATA 0xbf
0000            118   _CLU3FN         DATA 0xbe
0000            119   _CLU3MX         DATA 0xae
0000            120   _CMP0CN0        DATA 0x9b
0000            121   _CMP0CN1        DATA 0x99
0000            122   _CMP0MD         DATA 0x9d
0000            123   _CMP0MX         DATA 0x9f
0000            124   _CMP1CN0        DATA 0xbf
0000            125   _CMP1CN1        DATA 0xac
0000            126   _CMP1MD         DATA 0xab
0000            127   _CMP1MX         DATA 0xaa
0000            128   _CRC0CN0        DATA 0xce
0000            129   _CRC0CN1        DATA 0x86
0000            130   _CRC0CNT        DATA 0xd3
0000            131   _CRC0DAT        DATA 0xcb
0000            132   _CRC0FLIP       DATA 0xcf
0000            133   _CRC0IN         DATA 0xca
0000            134   _CRC0ST         DATA 0xd2
0000            135   _DAC0CF0        DATA 0x91
0000            136   _DAC0CF1        DATA 0x92
0000            137   _DAC0H          DATA 0x85
0000            138   _DAC0L          DATA 0x84
0000            139   _DAC1CF0        DATA 0x93
0000            140   _DAC1CF1        DATA 0x94
0000            141   _DAC1H          DATA 0x8a
0000            142   _DAC1L          DATA 0x89
0000            143   _DAC2CF0        DATA 0x95
0000            144   _DAC2CF1        DATA 0x96
0000            145   _DAC2H          DATA 0x8c
0000            146   _DAC2L          DATA 0x8b
0000            147   _DAC3CF0        DATA 0x9a
0000            148   _DAC3CF1        DATA 0x9c
0000            149   _DAC3H          DATA 0x8e
0000            150   _DAC3L          DATA 0x8d
0000            151   _DACGCF0        DATA 0x88
0000            152   _DACGCF1        DATA 0x98
0000            153   _DACGCF2        DATA 0xa2
0000            154   _DERIVID        DATA 0xad
0000            155   _DEVICEID       DATA 0xb5
0000            156   _DPH            DATA 0x83
0000            157   _DPL            DATA 0x82
0000            158   _EIE1           DATA 0xe6
0000            159   _EIE2           DATA 0xf3
0000            160   _EIP1           DATA 0xbb
0000            161   _EIP1H          DATA 0xee
0000            162   _EIP2           DATA 0xed
0000            163   _EIP2H          DATA 0xf6
0000            164   _EMI0CN         DATA 0xe7
0000            165   _FLKEY          DATA 0xb7
0000            166   _HFO0CAL        DATA 0xc7
0000            167   _HFO1CAL        DATA 0xd6
0000            168   _HFOCN          DATA 0xef
0000            169   _I2C0ADM        DATA 0xff
0000            170   _I2C0CN0        DATA 0xba
0000            171   _I2C0DIN        DATA 0xbc
0000            172   _I2C0DOUT       DATA 0xbb
0000            173   _I2C0FCN0       DATA 0xad
0000            174   _I2C0FCN1       DATA 0xab
0000            175   _I2C0FCT        DATA 0xf5
0000            176   _I2C0SLAD       DATA 0xbd
0000            177   _I2C0STAT       DATA 0xb9
0000            178   _IE             DATA 0xa8
0000            179   _IP             DATA 0xb8
0000            180   _IPH            DATA 0xf2
0000            181   _IT01CF         DATA 0xe4
0000            182   _LFO0CN         DATA 0xb1
0000            183   _P0             DATA 0x80
0000            184   _P0MASK         DATA 0xfe
0000            185   _P0MAT          DATA 0xfd
0000            186   _P0MDIN         DATA 0xf1
0000            187   _P0MDOUT        DATA 0xa4
0000            188   _P0SKIP         DATA 0xd4
0000            189   _P1             DATA 0x90
0000            190   _P1MASK         DATA 0xee
0000            191   _P1MAT          DATA 0xed
0000            192   _P1MDIN         DATA 0xf2
0000            193   _P1MDOUT        DATA 0xa5
0000            194   _P1SKIP         DATA 0xd5
0000            195   _P2             DATA 0xa0
0000            196   _P2MASK         DATA 0xfc
0000            197   _P2MAT          DATA 0xfb
0000            198   _P2MDIN         DATA 0xf3
0000            199   _P2MDOUT        DATA 0xa6
0000            200   _P2SKIP         DATA 0xcc
0000            201   _P3             DATA 0xb0
0000            202   _P3MDIN         DATA 0xf4
0000            203   _P3MDOUT        DATA 0x9c
0000            204   _PCA0CENT       DATA 0x9e
0000            205   _PCA0CLR        DATA 0x9c
0000            206   _PCA0CN0        DATA 0xd8
0000            207   _PCA0CPH0       DATA 0xfc
0000            208   _PCA0CPH1       DATA 0xea
0000            209   _PCA0CPH2       DATA 0xec
0000            210   _PCA0CPH3       DATA 0xf5
0000            211   _PCA0CPH4       DATA 0x85
0000            212   _PCA0CPH5       DATA 0xde
0000            213   _PCA0CPL0       DATA 0xfb
0000            214   _PCA0CPL1       DATA 0xe9
0000            215   _PCA0CPL2       DATA 0xeb
0000            216   _PCA0CPL3       DATA 0xf4
0000            217   _PCA0CPL4       DATA 0x84
0000            218   _PCA0CPL5       DATA 0xdd
0000            219   _PCA0CPM0       DATA 0xda
0000            220   _PCA0CPM1       DATA 0xdb
0000            221   _PCA0CPM2       DATA 0xdc
0000            222   _PCA0CPM3       DATA 0xae
0000            223   _PCA0CPM4       DATA 0xaf
0000            224   _PCA0CPM5       DATA 0xcc
0000            225   _PCA0H          DATA 0xfa
0000            226   _PCA0L          DATA 0xf9
0000            227   _PCA0MD         DATA 0xd9
0000            228   _PCA0POL        DATA 0x96
0000            229   _PCA0PWM        DATA 0xf7
0000            230   _PCON0          DATA 0x87
0000            231   _PCON1          DATA 0xcd
0000            232   _PFE0CN         DATA 0xc1
0000            233   _PRTDRV         DATA 0xf6
0000            234   _PSCTL          DATA 0x8f
0000            235   _PSTAT0         DATA 0xaa
0000            236   _PSW            DATA 0xd0
0000            237   _REF0CN         DATA 0xd1
0000            238   _REG0CN         DATA 0xc9
0000            239   _REVID          DATA 0xb6
0000            240   _RSTSRC         DATA 0xef
0000            241   _SBCON1         DATA 0x94
0000            242   _SBRLH1         DATA 0x96
0000            243   _SBRLL1         DATA 0x95
0000            244   _SBUF           DATA 0x99
0000            245   _SBUF0          DATA 0x99
0000            246   _SBUF1          DATA 0x92
0000            247   _SCON           DATA 0x98
0000            248   _SCON0          DATA 0x98
0000            249   _SCON1          DATA 0xc8
0000            250   _SFRPAGE        DATA 0xa7
0000            251   _SFRPGCN        DATA 0xbc
0000            252   _SFRSTACK       DATA 0xd7
0000            253   _SMB0ADM        DATA 0xd6
0000            254   _SMB0ADR        DATA 0xd7
0000            255   _SMB0CF         DATA 0xc1
0000            256   _SMB0CN0        DATA 0xc0
0000            257   _SMB0DAT        DATA 0xc2
0000            258   _SMB0FCN0       DATA 0xc3
0000            259   _SMB0FCN1       DATA 0xc4
0000            260   _SMB0FCT        DATA 0xef
0000            261   _SMB0RXLN       DATA 0xc5
0000            262   _SMB0TC         DATA 0xac
0000            263   _SMOD1          DATA 0x93
0000            264   _SP             DATA 0x81
0000            265   _SPI0CFG        DATA 0xa1
0000            266   _SPI0CKR        DATA 0xa2
0000            267   _SPI0CN0        DATA 0xf8
0000            268   _SPI0DAT        DATA 0xa3
0000            269   _SPI0FCN0       DATA 0x9a
0000            270   _SPI0FCN1       DATA 0x9b
0000            271   _SPI0FCT        DATA 0xf7
0000            272   _SPI0PCF        DATA 0xdf
0000            273   _TCON           DATA 0x88
0000            274   _TH0            DATA 0x8c
0000            275   _TH1            DATA 0x8d
0000            276   _TL0            DATA 0x8a
0000            277   _TL1            DATA 0x8b
0000            278   _TMOD           DATA 0x89
0000            279   _TMR2CN0        DATA 0xc8
0000            280   _TMR2CN1        DATA 0xfd
0000            281   _TMR2H          DATA 0xcf
0000            282   _TMR2L          DATA 0xce
0000            283   _TMR2RLH        DATA 0xcb
0000            284   _TMR2RLL        DATA 0xca
0000            285   _TMR3CN0        DATA 0x91
0000            286   _TMR3CN1        DATA 0xfe
0000            287   _TMR3H          DATA 0x95
0000            288   _TMR3L          DATA 0x94
0000            289   _TMR3RLH        DATA 0x93
0000            290   _TMR3RLL        DATA 0x92
0000            291   _TMR4CN0        DATA 0x98
0000            292   _TMR4CN1        DATA 0xff
0000            293   _TMR4H          DATA 0xa5
0000            294   _TMR4L          DATA 0xa4
0000            295   _TMR4RLH        DATA 0xa3
0000            296   _TMR4RLL        DATA 0xa2
0000            297   _TMR5CN0        DATA 0xc0
0000            298   _TMR5CN1        DATA 0xf1
0000            299   _TMR5H          DATA 0xd5
0000            300   _TMR5L          DATA 0xd4
0000            301   _TMR5RLH        DATA 0xd3
0000            302   _TMR5RLL        DATA 0xd2
0000            303   _UART0PCF       DATA 0xd9
0000            304   _UART1FCN0      DATA 0x9d
0000            305   _UART1FCN1      DATA 0xd8
0000            306   _UART1FCT       DATA 0xfa
0000            307   _UART1LIN       DATA 0x9e
0000            308   _UART1PCF       DATA 0xda
0000            309   _VDM0CN         DATA 0xff
0000            310   _WDTCN          DATA 0x97
0000            311   _XBR0           DATA 0xe1
0000            312   _XBR1           DATA 0xe2
0000            313   _XBR2           DATA 0xe3
0000            314   _XOSC0CN        DATA 0x86
0000            315   _DPTR           DATA 0x8382
0000            316   _TMR2RL         DATA 0xcbca
0000            317   _TMR3RL         DATA 0x9392
0000            318   _TMR4RL         DATA 0xa3a2
0000            319   _TMR5RL         DATA 0xd3d2
0000            320   _TMR0           DATA 0x8c8a
0000            321   _TMR1           DATA 0x8d8b
0000            322   _TMR2           DATA 0xcfce
0000            323   _TMR3           DATA 0x9594
0000            324   _TMR4           DATA 0xa5a4
0000            325   _TMR5           DATA 0xd5d4
0000            326   _SBRL1          DATA 0x9695
0000            327   _PCA0           DATA 0xfaf9
0000            328   _PCA0CP0        DATA 0xfcfb
0000            329   _PCA0CP1        DATA 0xeae9
0000            330   _PCA0CP2        DATA 0xeceb
0000            331   _PCA0CP3        DATA 0xf5f4
0000            332   _PCA0CP4        DATA 0x8584
0000            333   _PCA0CP5        DATA 0xdedd
0000            334   _ADC0ASA        DATA 0xb6b5
0000            335   _ADC0GT         DATA 0xc4c3
0000            336   _ADC0           DATA 0xbebd
0000            337   _ADC0LT         DATA 0xc6c5
0000            338   _DAC0           DATA 0x8584
0000            339   _DAC1           DATA 0x8a89
0000            340   _DAC2           DATA 0x8c8b
0000            341   _DAC3           DATA 0x8e8d
0000            342   ;--------------------------------------------------------
0000            343   ; special function bits
0000            344   ;--------------------------------------------------------
0000            345   _ACC_0          BIT 0xe0
0000            346   _ACC_1          BIT 0xe1
0000            347   _ACC_2          BIT 0xe2
0000            348   _ACC_3          BIT 0xe3
0000            349   _ACC_4          BIT 0xe4
0000            350   _ACC_5          BIT 0xe5
0000            351   _ACC_6          BIT 0xe6
0000            352   _ACC_7          BIT 0xe7
0000            353   _TEMPE          BIT 0xe8
0000            354   _ADGN0          BIT 0xe9
0000            355   _ADGN1          BIT 0xea
0000            356   _ADWINT         BIT 0xeb
0000            357   _ADBUSY         BIT 0xec
0000            358   _ADINT          BIT 0xed
0000            359   _IPOEN          BIT 0xee
0000            360   _ADEN           BIT 0xef
0000            361   _B_0            BIT 0xf0
0000            362   _B_1            BIT 0xf1
0000            363   _B_2            BIT 0xf2
0000            364   _B_3            BIT 0xf3
0000            365   _B_4            BIT 0xf4
0000            366   _B_5            BIT 0xf5
0000            367   _B_6            BIT 0xf6
0000            368   _B_7            BIT 0xf7
0000            369   _C0FIF          BIT 0xe8
0000            370   _C0RIF          BIT 0xe9
0000            371   _C1FIF          BIT 0xea
0000            372   _C1RIF          BIT 0xeb
0000            373   _C2FIF          BIT 0xec
0000            374   _C2RIF          BIT 0xed
0000            375   _C3FIF          BIT 0xee
0000            376   _C3RIF          BIT 0xef
0000            377   _D1SRC0         BIT 0x88
0000            378   _D1SRC1         BIT 0x89
0000            379   _D1AMEN         BIT 0x8a
0000            380   _D01REFSL       BIT 0x8b
0000            381   _D3SRC0         BIT 0x8c
0000            382   _D3SRC1         BIT 0x8d
0000            383   _D3AMEN         BIT 0x8e
0000            384   _D23REFSL       BIT 0x8f
0000            385   _D0UDIS         BIT 0x98
0000            386   _D1UDIS         BIT 0x99
0000            387   _D2UDIS         BIT 0x9a
0000            388   _D3UDIS         BIT 0x9b
0000            389   _EX0            BIT 0xa8
0000            390   _ET0            BIT 0xa9
0000            391   _EX1            BIT 0xaa
0000            392   _ET1            BIT 0xab
0000            393   _ES0            BIT 0xac
0000            394   _ET2            BIT 0xad
0000            395   _ESPI0          BIT 0xae
0000            396   _EA             BIT 0xaf
0000            397   _PX0            BIT 0xb8
0000            398   _PT0            BIT 0xb9
0000            399   _PX1            BIT 0xba
0000            400   _PT1            BIT 0xbb
0000            401   _PS0            BIT 0xbc
0000            402   _PT2            BIT 0xbd
0000            403   _PSPI0          BIT 0xbe
0000            404   _P0_0           BIT 0x80
0000            405   _P0_1           BIT 0x81
0000            406   _P0_2           BIT 0x82
0000            407   _P0_3           BIT 0x83
0000            408   _P0_4           BIT 0x84
0000            409   _P0_5           BIT 0x85
0000            410   _P0_6           BIT 0x86
0000            411   _P0_7           BIT 0x87
0000            412   _P1_0           BIT 0x90
0000            413   _P1_1           BIT 0x91
0000            414   _P1_2           BIT 0x92
0000            415   _P1_3           BIT 0x93
0000            416   _P1_4           BIT 0x94
0000            417   _P1_5           BIT 0x95
0000            418   _P1_6           BIT 0x96
0000            419   _P1_7           BIT 0x97
0000            420   _P2_0           BIT 0xa0
0000            421   _P2_1           BIT 0xa1
0000            422   _P2_2           BIT 0xa2
0000            423   _P2_3           BIT 0xa3
0000            424   _P2_4           BIT 0xa4
0000            425   _P2_5           BIT 0xa5
0000            426   _P2_6           BIT 0xa6
0000            427   _P3_0           BIT 0xb0
0000            428   _P3_1           BIT 0xb1
0000            429   _P3_2           BIT 0xb2
0000            430   _P3_3           BIT 0xb3
0000            431   _P3_4           BIT 0xb4
0000            432   _P3_7           BIT 0xb7
0000            433   _CCF0           BIT 0xd8
0000            434   _CCF1           BIT 0xd9
0000            435   _CCF2           BIT 0xda
0000            436   _CCF3           BIT 0xdb
0000            437   _CCF4           BIT 0xdc
0000            438   _CCF5           BIT 0xdd
0000            439   _CR             BIT 0xde
0000            440   _CF             BIT 0xdf
0000            441   _PARITY         BIT 0xd0
0000            442   _F1             BIT 0xd1
0000            443   _OV             BIT 0xd2
0000            444   _RS0            BIT 0xd3
0000            445   _RS1            BIT 0xd4
0000            446   _F0             BIT 0xd5
0000            447   _AC             BIT 0xd6
0000            448   _CY             BIT 0xd7
0000            449   _RI             BIT 0x98
0000            450   _TI             BIT 0x99
0000            451   _RB8            BIT 0x9a
0000            452   _TB8            BIT 0x9b
0000            453   _REN            BIT 0x9c
0000            454   _CE             BIT 0x9d
0000            455   _SMODE          BIT 0x9e
0000            456   _RI1            BIT 0xc8
0000            457   _TI1            BIT 0xc9
0000            458   _RBX1           BIT 0xca
0000            459   _TBX1           BIT 0xcb
0000            460   _REN1           BIT 0xcc
0000            461   _PERR1          BIT 0xcd
0000            462   _OVR1           BIT 0xce
0000            463   _SI             BIT 0xc0
0000            464   _ACK            BIT 0xc1
0000            465   _ARBLOST        BIT 0xc2
0000            466   _ACKRQ          BIT 0xc3
0000            467   _STO            BIT 0xc4
0000            468   _STA            BIT 0xc5
0000            469   _TXMODE         BIT 0xc6
0000            470   _MASTER         BIT 0xc7
0000            471   _SPIEN          BIT 0xf8
0000            472   _TXNF           BIT 0xf9
0000            473   _NSSMD0         BIT 0xfa
0000            474   _NSSMD1         BIT 0xfb
0000            475   _RXOVRN         BIT 0xfc
0000            476   _MODF           BIT 0xfd
0000            477   _WCOL           BIT 0xfe
0000            478   _SPIF           BIT 0xff
0000            479   _IT0            BIT 0x88
0000            480   _IE0            BIT 0x89
0000            481   _IT1            BIT 0x8a
0000            482   _IE1            BIT 0x8b
0000            483   _TR0            BIT 0x8c
0000            484   _TF0            BIT 0x8d
0000            485   _TR1            BIT 0x8e
0000            486   _TF1            BIT 0x8f
0000            487   _T2XCLK0        BIT 0xc8
0000            488   _T2XCLK1        BIT 0xc9
0000            489   _TR2            BIT 0xca
0000            490   _T2SPLIT        BIT 0xcb
0000            491   _TF2CEN         BIT 0xcc
0000            492   _TF2LEN         BIT 0xcd
0000            493   _TF2L           BIT 0xce
0000            494   _TF2H           BIT 0xcf
0000            495   _T4XCLK0        BIT 0x98
0000            496   _T4XCLK1        BIT 0x99
0000            497   _TR4            BIT 0x9a
0000            498   _T4SPLIT        BIT 0x9b
0000            499   _TF4CEN         BIT 0x9c
0000            500   _TF4LEN         BIT 0x9d
0000            501   _TF4L           BIT 0x9e
0000            502   _TF4H           BIT 0x9f
0000            503   _T5XCLK0        BIT 0xc0
0000            504   _T5XCLK1        BIT 0xc1
0000            505   _TR5            BIT 0xc2
0000            506   _T5SPLIT        BIT 0xc3
0000            507   _TF5CEN         BIT 0xc4
0000            508   _TF5LEN         BIT 0xc5
0000            509   _TF5L           BIT 0xc6
0000            510   _TF5H           BIT 0xc7
0000            511   _RIE            BIT 0xd8
0000            512   _RXTO0          BIT 0xd9
0000            513   _RXTO1          BIT 0xda
0000            514   _RFRQ           BIT 0xdb
0000            515   _TIE            BIT 0xdc
0000            516   _TXHOLD         BIT 0xdd
0000            517   _TXNF1          BIT 0xde
0000            518   _TFRQ           BIT 0xdf
0000            519   ;--------------------------------------------------------
0000            520   ; overlayable register banks
0000            521   ;--------------------------------------------------------
0000            522            rbank0 segment data overlay
0000            523   ;--------------------------------------------------------
0000            524   ; internal ram data
0000            525   ;--------------------------------------------------------
0000            526            rseg R_DSEG
0000            527   _sendCommand_PARM_2:
0000            528            ds 1
0001            529   _sendCommandS_op_1_88:
0001            530            ds 1
0002            531   _sendCommandS_d_1_88:
0002            532            ds 1
0003            533   _setFrequency_frequency_1_95:
0003            534            ds 2
0005            535   _setReload_reload_1_97:
0005            536            ds 2
0007            537   _LCDprint_PARM_2:
0007            538            ds 1
0008            539   _nunchuck_init_buf_1_134:
0008            540            ds 6
000E            541   _nunchuck_init_sloc0_1_0:
000E            542            ds 2
0010            543   _nunchuck_init_sloc1_1_0:
0010            544            ds 2
0012            545   _nunchuck_init_sloc2_1_0:
0012            546            ds 2
0014            547   _get_speed_PARM_2:
0014            548            ds 1
0015            549   _read_nunchuck_PARM_2:
0015            550            ds 3
0018            551   _read_nunchuck_PARM_3:
0018            552            ds 3
001B            553   _read_nunchuck_PARM_4:
001B            554            ds 2
001D            555   _read_nunchuck_PARM_5:
001D            556            ds 2
001F            557   _read_nunchuck_direction_1_167:
001F            558            ds 3
0022            559   _read_nunchuck_joy_x_1_168:
0022            560            ds 1
0023            561   _read_nunchuck_joy_y_1_168:
0023            562            ds 1
0024            563   _read_nunchuck_sloc0_1_0:
0024            564            ds 1
0025            565   _getsn_PARM_2:
0025            566            ds 2
0027            567   _getsn_buff_1_171:
0027            568            ds 3
002A            569   _getsn_sloc0_1_0:
002A            570            ds 2
002C            571   _main_buffer_1_177:
002C            572            ds 6
0032            573   _main_speed_1_177:
0032            574            ds 1
0033            575   _main_direction_1_177:
0033            576            ds 1
0034            577   _main_off_y_1_177:
0034            578            ds 2
0036            579   ;--------------------------------------------------------
0036            580   ; overlayable items in internal ram 
0036            581   ;--------------------------------------------------------
0000            582            rseg    R_OSEG
0000            583            rseg    R_OSEG
0000            584            rseg    R_OSEG
0000            585            rseg    R_OSEG
0000            586            rseg    R_OSEG
0000            587            rseg    R_OSEG
0000            588   _get_direction_PARM_2:
0000            589            ds 1
0001            590   ;--------------------------------------------------------
0001            591   ; indirectly addressable internal ram data
0001            592   ;--------------------------------------------------------
0000            593            rseg R_ISEG
0000            594   ;--------------------------------------------------------
0000            595   ; absolute internal ram data
0000            596   ;--------------------------------------------------------
0000            597            DSEG
0000            598   ;--------------------------------------------------------
0000            599   ; bit data
0000            600   ;--------------------------------------------------------
0000            601            rseg R_BSEG
0000            602   _reload_flag:
0000            603            DBIT    1
0001            604   _LCDprint_PARM_3:
0001            605            DBIT    1
0002            606   _nunchuck_init_PARM_1:
0002            607            DBIT    1
0003            608   _read_nunchuck_but1_1_168:
0003            609            DBIT    1
0004            610   _read_nunchuck_but2_1_168:
0004            611            DBIT    1
0005            612   _offset_flag:
0005            613            DBIT    1
0006            614   _speedbit:
0006            615            DBIT    1
0007            616   ;--------------------------------------------------------
0007            617   ; paged external ram data
0007            618   ;--------------------------------------------------------
0000            619            rseg R_PSEG
0000            620   ;--------------------------------------------------------
0000            621   ; external ram data
0000            622   ;--------------------------------------------------------
0000            623            rseg R_XSEG
0000            624   ;--------------------------------------------------------
0000            625   ; absolute external ram data
0000            626   ;--------------------------------------------------------
0000            627            XSEG
0000            628   ;--------------------------------------------------------
0000            629   ; external initialized ram data
0000            630   ;--------------------------------------------------------
0000            631            rseg R_IXSEG
0000            632            rseg R_HOME
0000            633            rseg R_GSINIT
0000            634            rseg R_CSEG
0000            635   ;--------------------------------------------------------
0000            636   ; Reset entry point and interrupt vectors
0000            637   ;--------------------------------------------------------
0000            638            CSEG at 0x0000
0000 020100     639            ljmp    _crt0
000B            640            CSEG at 0x000b
000B 020100     641            ljmp    _Timer0_ISR
002B            642            CSEG at 0x002b
002B 020100     643            ljmp    _Timer2_ISR
008B            644            CSEG at 0x008b
008B 020100     645            ljmp    _Timer4_ISR
008E            646   ;--------------------------------------------------------
008E            647   ; global & static initialisations
008E            648   ;--------------------------------------------------------
0000            649            rseg R_HOME
0000            650            rseg R_GSINIT
0000            651            rseg R_GSINIT
0000            652   ;--------------------------------------------------------
0000            653   ; data variables initialization
0000            654   ;--------------------------------------------------------
0000            655            rseg R_DINIT
0000            656   ;        Tcom.h:27: bit reload_flag = 0;
0000 C250       657            clr     _reload_flag
0002            658   ;        Transmitter_src.c:13: volatile unsigned bit offset_flag=1;
0002 D270       659            setb    _offset_flag
0004            660   ;        Transmitter_src.c:14: volatile unsigned bit speedbit=1;
0004 D290       661            setb    _speedbit
0006            662            ; The linker places a 'ret' at the end of segment R_DINIT.
0006            663   ;--------------------------------------------------------
0006            664   ; code
0006            665   ;--------------------------------------------------------
0000            666            rseg R_CSEG
0000            667   ;------------------------------------------------------------
0000            668   ;Allocation info for local variables in function 'UART1_Init'
0000            669   ;------------------------------------------------------------
0000            670   ;baudrate                  Allocated to registers r2 r3 r4 r5 
0000            671   ;------------------------------------------------------------
0000            672   ;        EFM8UART1lib.h:11: void UART1_Init (unsigned long baudrate)
0000            673   ;        -----------------------------------------
0000            674   ;         function UART1_Init
0000            675   ;        -----------------------------------------
0000            676   _UART1_Init:
0000            677            using   0
0000 AA82       678            mov     r2,dpl
0002 AB83       679            mov     r3,dph
0004 ACF0       680            mov     r4,b
0006 FD         681            mov     r5,a
0007            682   ;        EFM8UART1lib.h:13: SFRPAGE = 0x20;
0007 75A720     683            mov     _SFRPAGE,#0x20
000A            684   ;        EFM8UART1lib.h:14: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
000A 75930C     685            mov     _SMOD1,#0x0C
000D            686   ;        EFM8UART1lib.h:15: SCON1 = 0x10; //Receive fifo overrun flag = 0; Parity Error Flag = 0; 0; Receive enable flag = 1; TBX = 0; RBX = 0; Transmit Interrupt Flag = 0; Receive Interrupt FLag = 0;
000D 75C810     687            mov     _SCON1,#0x10
0010            688   ;        EFM8UART1lib.h:16: SBCON1 =0x00;   // disable baud rate generator
0010 759400     689            mov     _SBCON1,#0x00
0013            690   ;        EFM8UART1lib.h:17: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));  //Baud rate reload
0013 8A00       691            mov     __divulong_PARM_2,r2
0015 8B01       692            mov     (__divulong_PARM_2 + 1),r3
0017 8C02       693            mov     (__divulong_PARM_2 + 2),r4
0019 8D03       694            mov     (__divulong_PARM_2 + 3),r5
001B 90A200     695            mov     dptr,#0xA200
001E 75F04A     696            mov     b,#0x4A
0021 7404       697            mov     a,#0x04
0023 120100     698            lcall   __divulong
0026 AA82       699            mov     r2,dpl
0028 AB83       700            mov     r3,dph
002A ACF0       701            mov     r4,b
002C FD         702            mov     r5,a
002D 750018     703            mov     __divulong_PARM_2,#0x18
0030 E4         704            clr     a
0031 F501       705            mov     (__divulong_PARM_2 + 1),a
0033 F502       706            mov     (__divulong_PARM_2 + 2),a
0035 F503       707            mov     (__divulong_PARM_2 + 3),a
0037 8A82       708            mov     dpl,r2
0039 8B83       709            mov     dph,r3
003B 8CF0       710            mov     b,r4
003D ED         711            mov     a,r5
003E 120100     712            lcall   __divulong
0041 AA82       713            mov     r2,dpl
0043 AB83       714            mov     r3,dph
0045 ACF0       715            mov     r4,b
0047 FD         716            mov     r5,a
0048 E4         717            clr     a
0049 C3         718            clr     c
004A 9A         719            subb    a,r2
004B FA         720            mov     r2,a
004C E4         721            clr     a
004D 9B         722            subb    a,r3
004E FB         723            mov     r3,a
004F 7401       724            mov     a,#0x01
0051 9C         725            subb    a,r4
0052 E4         726            clr     a
0053 9D         727            subb    a,r5
0054 8A95       728            mov     _SBRL1,r2
0056 8B96       729            mov     (_SBRL1 >> 8),r3
0058            730   ;        EFM8UART1lib.h:18: TI1 = 1; // indicate ready for TX
0058 D2C9       731            setb    _TI1
005A            732   ;        EFM8UART1lib.h:19: SBCON1 |= 0x40;   // enable baud rate generator
005A 439440     733            orl     _SBCON1,#0x40
005D            734   ;        EFM8UART1lib.h:20: SFRPAGE = 0x00;
005D 75A700     735            mov     _SFRPAGE,#0x00
0060 22         736            ret
0061            737   ;------------------------------------------------------------
0061            738   ;Allocation info for local variables in function 'putchar1'
0061            739   ;------------------------------------------------------------
0061            740   ;c                         Allocated to registers r2 
0061            741   ;------------------------------------------------------------
0061            742   ;        EFM8UART1lib.h:23: void putchar1 (char c) 
0061            743   ;        -----------------------------------------
0061            744   ;         function putchar1
0061            745   ;        -----------------------------------------
0061            746   _putchar1:
0061 AA82       747            mov     r2,dpl
0063            748   ;        EFM8UART1lib.h:25: SFRPAGE = 0x20;
0063 75A720     749            mov     _SFRPAGE,#0x20
0066            750   ;        EFM8UART1lib.h:26: if (c == '\n') 
0066 BA0A90     751            cjne    r2,#0x0A,L003006?
0069            752   ;        EFM8UART1lib.h:28: while (!TI1);
0069            753   L003001?:
0069            754   ;        EFM8UART1lib.h:29: TI1=0;
0069 10C910     755            jbc     _TI1,L003017?
006C 8001       756            sjmp    L003001?
006E            757   L003017?:
006E            758   ;        EFM8UART1lib.h:30: SBUF1 = '\r';
006E 75920D     759            mov     _SBUF1,#0x0D
0071            760   ;        EFM8UART1lib.h:32: while (!TI1);
0071            761   L003006?:
0071            762   ;        EFM8UART1lib.h:33: TI1=0;
0071 10C950     763            jbc     _TI1,L003018?
0074 8001       764            sjmp    L003006?
0076            765   L003018?:
0076            766   ;        EFM8UART1lib.h:34: SBUF1 = c;
0076 8A92       767            mov     _SBUF1,r2
0078            768   ;        EFM8UART1lib.h:35: SFRPAGE = 0x00;
0078 75A700     769            mov     _SFRPAGE,#0x00
007B 22         770            ret
007C            771   ;------------------------------------------------------------
007C            772   ;Allocation info for local variables in function 'getchar1'
007C            773   ;------------------------------------------------------------
007C            774   ;c                         Allocated to registers 
007C            775   ;------------------------------------------------------------
007C            776   ;        EFM8UART1lib.h:38: char getchar1 (void)
007C            777   ;        -----------------------------------------
007C            778   ;         function getchar1
007C            779   ;        -----------------------------------------
007C            780   _getchar1:
007C            781   ;        EFM8UART1lib.h:41: SFRPAGE = 0x20;
007C 75A720     782            mov     _SFRPAGE,#0x20
007F            783   ;        EFM8UART1lib.h:42: while (!RI1);
007F            784   L004001?:
007F            785   ;        EFM8UART1lib.h:43: RI1=0;
007F 10C8D0     786            jbc     _RI1,L004008?
0082 8001       787            sjmp    L004001?
0084            788   L004008?:
0084            789   ;        EFM8UART1lib.h:45: SCON1&=0b_0011_1111;
0084 53C83F     790            anl     _SCON1,#0x3F
0087            791   ;        EFM8UART1lib.h:46: c = SBUF1;
0087 859282     792            mov     dpl,_SBUF1
008A            793   ;        EFM8UART1lib.h:47: SFRPAGE = 0x00;
008A 75A700     794            mov     _SFRPAGE,#0x00
008D            795   ;        EFM8UART1lib.h:48: return (c);
008D 22         796            ret
008E            797   ;------------------------------------------------------------
008E            798   ;Allocation info for local variables in function 'Timer0_init'
008E            799   ;------------------------------------------------------------
008E            800   ;------------------------------------------------------------
008E            801   ;        Tcom.h:31: void Timer0_init(void){
008E            802   ;        -----------------------------------------
008E            803   ;         function Timer0_init
008E            804   ;        -----------------------------------------
008E            805   _Timer0_init:
008E            806   ;        Tcom.h:34: CKCON0 |= 0b_0000_0100; // Timer0 clock source = SYSCLK/12
008E 438E04     807            orl     _CKCON0,#0x04
0091            808   ;        Tcom.h:35: TMOD &= 0xf0;  // Mask out timer 1 bits
0091 5389F0     809            anl     _TMOD,#0xF0
0094            810   ;        Tcom.h:36: TMOD |= 0x02;  // Timer0 in 8-bit auto-reload mode
0094 438902     811            orl     _TMOD,#0x02
0097            812   ;        Tcom.h:38: TL0 = TH0 = 256-(SYSCLK/SMB_FREQUENCY/3);
0097 758C10     813            mov     _TH0,#0x10
009A 758A10     814            mov     _TL0,#0x10
009D            815   ;        Tcom.h:39: TR0 = 1; // Enable timer 0
009D D28C       816            setb    _TR0
009F 22         817            ret
00A0            818   ;------------------------------------------------------------
00A0            819   ;Allocation info for local variables in function 'Timer0_ISR'
00A0            820   ;------------------------------------------------------------
00A0            821   ;------------------------------------------------------------
00A0            822   ;        Tcom.h:44: void Timer0_ISR (void) interrupt INTERRUPT_TIMER0 {
00A0            823   ;        -----------------------------------------
00A0            824   ;         function Timer0_ISR
00A0            825   ;        -----------------------------------------
00A0            826   _Timer0_ISR:
00A0            827   ;        Tcom.h:45: TF0 = 0;
00A0 C28D       828            clr     _TF0
00A2            829   ;        Tcom.h:46: SI=0;
00A2 C2C0       830            clr     _SI
00A4 32         831            reti
00A5            832   ;        eliminated unneeded push/pop psw
00A5            833   ;        eliminated unneeded push/pop dpl
00A5            834   ;        eliminated unneeded push/pop dph
00A5            835   ;        eliminated unneeded push/pop b
00A5            836   ;        eliminated unneeded push/pop acc
00A5            837   ;------------------------------------------------------------
00A5            838   ;Allocation info for local variables in function 'Timer2_init'
00A5            839   ;------------------------------------------------------------
00A5            840   ;------------------------------------------------------------
00A5            841   ;        Tcom.h:51: void Timer2_init(void) {
00A5            842   ;        -----------------------------------------
00A5            843   ;         function Timer2_init
00A5            844   ;        -----------------------------------------
00A5            845   _Timer2_init:
00A5            846   ;        Tcom.h:52: TMR2CN0=0b_0000_0000;   // Stop Timer2; Clear TF2; T2XCLK uses Sysclk/12
00A5 75C800     847            mov     _TMR2CN0,#0x00
00A8            848   ;        Tcom.h:53: CKCON0|=0b_0000_0000; // Timer 2 uses the system clock; Timer2 uses T2XCLK
00A8 858E8E     849            mov     _CKCON0,_CKCON0
00AB            850   ;        Tcom.h:54: TMR2RL=64936; //Initilizes reload value for 100hz;
00AB 75CAA8     851            mov     _TMR2RL,#0xA8
00AE 75CBFD     852            mov     (_TMR2RL >> 8),#0xFD
00B1            853   ;        Tcom.h:55: TMR2=0xffff;   // Set to reload immediately
00B1 75CEFF     854            mov     _TMR2,#0xFF
00B4 75CFFF     855            mov     (_TMR2 >> 8),#0xFF
00B7            856   ;        Tcom.h:56: ET2=0;         // Enable Timer2 interrupts
00B7 C2AD       857            clr     _ET2
00B9            858   ;        Tcom.h:57: TR2=1;         // Start Timer2 (TMR2CN is bit addressable)
00B9 D2CA       859            setb    _TR2
00BB 22         860            ret
00BC            861   ;------------------------------------------------------------
00BC            862   ;Allocation info for local variables in function 'Timer2_ISR'
00BC            863   ;------------------------------------------------------------
00BC            864   ;------------------------------------------------------------
00BC            865   ;        Tcom.h:60: void Timer2_ISR (void) interrupt 5 {
00BC            866   ;        -----------------------------------------
00BC            867   ;         function Timer2_ISR
00BC            868   ;        -----------------------------------------
00BC            869   _Timer2_ISR:
00BC            870   ;        Tcom.h:61: SFRPAGE=0x00;
00BC 75A700     871            mov     _SFRPAGE,#0x00
00BF            872   ;        Tcom.h:63: TF2H = 0; // Clear Timer2 interrupt flag
00BF C2CF       873            clr     _TF2H
00C1 32         874            reti
00C2            875   ;        eliminated unneeded push/pop psw
00C2            876   ;        eliminated unneeded push/pop dpl
00C2            877   ;        eliminated unneeded push/pop dph
00C2            878   ;        eliminated unneeded push/pop b
00C2            879   ;        eliminated unneeded push/pop acc
00C2            880   ;------------------------------------------------------------
00C2            881   ;Allocation info for local variables in function 'Timer4_init'
00C2            882   ;------------------------------------------------------------
00C2            883   ;------------------------------------------------------------
00C2            884   ;        Tcom.h:85: void Timer4_init(void) {
00C2            885   ;        -----------------------------------------
00C2            886   ;         function Timer4_init
00C2            887   ;        -----------------------------------------
00C2            888   _Timer4_init:
00C2            889   ;        Tcom.h:86: SFRPAGE=0x10;
00C2 75A710     890            mov     _SFRPAGE,#0x10
00C5            891   ;        Tcom.h:87: TMR4CN0=0b_0000_0000;
00C5 759800     892            mov     _TMR4CN0,#0x00
00C8            893   ;        Tcom.h:88: TMR4CN1=0b_0110_0000;
00C8 75FF60     894            mov     _TMR4CN1,#0x60
00CB            895   ;        Tcom.h:90: TMR4RL=65336; //reload = 2^16 - (SYSCLK/12)/(F*2); 15kHz
00CB 75A238     896            mov     _TMR4RL,#0x38
00CE 75A3FF     897            mov     (_TMR4RL >> 8),#0xFF
00D1            898   ;        Tcom.h:91: TMR4=0xffff;
00D1 75A4FF     899            mov     _TMR4,#0xFF
00D4 75A5FF     900            mov     (_TMR4 >> 8),#0xFF
00D7            901   ;        Tcom.h:93: EIE2|=0b_0000_0100;
00D7 43F304     902            orl     _EIE2,#0x04
00DA            903   ;        Tcom.h:94: TR4=1;
00DA D29A       904            setb    _TR4
00DC            905   ;        Tcom.h:95: SFRPAGE=0x00;
00DC 75A700     906            mov     _SFRPAGE,#0x00
00DF 22         907            ret
00E0            908   ;------------------------------------------------------------
00E0            909   ;Allocation info for local variables in function 'Timer4_ISR'
00E0            910   ;------------------------------------------------------------
00E0            911   ;------------------------------------------------------------
00E0            912   ;        Tcom.h:99: void Timer4_ISR(void) interrupt INTERRUPT_TIMER4 {
00E0            913   ;        -----------------------------------------
00E0            914   ;         function Timer4_ISR
00E0            915   ;        -----------------------------------------
00E0            916   _Timer4_ISR:
00E0            917   ;        Tcom.h:100: TF4H = 0; //interrupt flag
00E0 C29F       918            clr     _TF4H
00E2            919   ;        Tcom.h:102: OUT0 = !OUT0;
00E2 B2A0       920            cpl     _P2_0
00E4 32         921            reti
00E5            922   ;        eliminated unneeded push/pop psw
00E5            923   ;        eliminated unneeded push/pop dpl
00E5            924   ;        eliminated unneeded push/pop dph
00E5            925   ;        eliminated unneeded push/pop b
00E5            926   ;        eliminated unneeded push/pop acc
00E5            927   ;------------------------------------------------------------
00E5            928   ;Allocation info for local variables in function 'sendCommand'
00E5            929   ;------------------------------------------------------------
00E5            930   ;value                     Allocated with name '_sendCommand_PARM_2'
00E5            931   ;op                        Allocated to registers r2 
00E5            932   ;------------------------------------------------------------
00E5            933   ;        Tcom.h:105: void sendCommand(unsigned char op, unsigned char value) {
00E5            934   ;        -----------------------------------------
00E5            935   ;         function sendCommand
00E5            936   ;        -----------------------------------------
00E5            937   _sendCommand:
00E5 AA82       938            mov     r2,dpl
00E7            939   ;        Tcom.h:106: if (op < 0b_1000 && value < 0b_100000) {
00E7 BA0810     940            cjne    r2,#0x08,L011009?
00EA            941   L011009?:
00EA 5001       942            jnc     L011002?
00EC 74E0       943            mov     a,#0x100 - 0x20
00EE 25C0       944            add     a,_sendCommand_PARM_2
00F0 4001       945            jc      L011002?
00F2            946   ;        Tcom.h:107: putchar1(op*0b_100000 + value);
00F2 EA         947            mov     a,r2
00F3 C4         948            swap    a
00F4 23         949            rl      a
00F5 54E0       950            anl     a,#0xe0
00F7 FB         951            mov     r3,a
00F8 E5C0       952            mov     a,_sendCommand_PARM_2
00FA 2B         953            add     a,r3
00FB F582       954            mov     dpl,a
00FD C002       955            push    ar2
00FF 120100     956            lcall   _putchar1
0102 D002       957            pop     ar2
0104            958   ;        Tcom.h:108: printf("Sent: %d\r\n", op*0b_100000 + value);
0104 EA         959            mov     a,r2
0105 75F020     960            mov     b,#0x20
0108 A4         961            mul     ab
0109 FA         962            mov     r2,a
010A ABF0       963            mov     r3,b
010C ACC0       964            mov     r4,_sendCommand_PARM_2
010E 7D00       965            mov     r5,#0x00
0110 EC         966            mov     a,r4
0111 2A         967            add     a,r2
0112 FA         968            mov     r2,a
0113 ED         969            mov     a,r5
0114 3B         970            addc    a,r3
0115 FB         971            mov     r3,a
0116 C002       972            push    ar2
0118 C003       973            push    ar3
011A 7490       974            mov     a,#__str_0
011C C0E0       975            push    acc
011E 74C9       976            mov     a,#(__str_0 >> 8)
0120 C0E0       977            push    acc
0122 7480       978            mov     a,#0x80
0124 C0E0       979            push    acc
0126 120100     980            lcall   _printf
0129 E581       981            mov     a,sp
012B 24FB       982            add     a,#0xfb
012D F581       983            mov     sp,a
012F 22         984            ret
0130            985   L011002?:
0130            986   ;        Tcom.h:110: printf("c err\r\n");
0130 7490       987            mov     a,#__str_1
0132 C0E0       988            push    acc
0134 74CA       989            mov     a,#(__str_1 >> 8)
0136 C0E0       990            push    acc
0138 7480       991            mov     a,#0x80
013A C0E0       992            push    acc
013C 120100     993            lcall   _printf
013F 1581       994            dec     sp
0141 1581       995            dec     sp
0143 1581       996            dec     sp
0145 22         997            ret
0146            998   ;------------------------------------------------------------
0146            999   ;Allocation info for local variables in function 'sendCommandS'
0146           1000   ;------------------------------------------------------------
0146           1001   ;input                     Allocated to registers r2 r3 r4 
0146           1002   ;op                        Allocated with name '_sendCommandS_op_1_88'
0146           1003   ;d                         Allocated with name '_sendCommandS_d_1_88'
0146           1004   ;------------------------------------------------------------
0146           1005   ;        Tcom.h:114: void sendCommandS(char* input) {
0146           1006   ;        -----------------------------------------
0146           1007   ;         function sendCommandS
0146           1008   ;        -----------------------------------------
0146           1009   _sendCommandS:
0146 AA82      1010            mov     r2,dpl
0148 AB83      1011            mov     r3,dph
014A ACF0      1012            mov     r4,b
014C           1013   ;        Tcom.h:118: sscanf(input, "%*s %c %c", &op, &d);
014C 7420      1014            mov     a,#_sendCommandS_d_1_88
014E C0E0      1015            push    acc
0150 74C0      1016            mov     a,#(_sendCommandS_d_1_88 >> 8)
0152 C0E0      1017            push    acc
0154 7440      1018            mov     a,#0x40
0156 C0E0      1019            push    acc
0158 74D0      1020            mov     a,#_sendCommandS_op_1_88
015A C0E0      1021            push    acc
015C 74BF      1022            mov     a,#(_sendCommandS_op_1_88 >> 8)
015E C0E0      1023            push    acc
0160 7440      1024            mov     a,#0x40
0162 C0E0      1025            push    acc
0164 74D0      1026            mov     a,#__str_2
0166 C0E0      1027            push    acc
0168 74CA      1028            mov     a,#(__str_2 >> 8)
016A C0E0      1029            push    acc
016C 7480      1030            mov     a,#0x80
016E C0E0      1031            push    acc
0170 C002      1032            push    ar2
0172 C003      1033            push    ar3
0174 C004      1034            push    ar4
0176 120100    1035            lcall   _sscanf
0179 E581      1036            mov     a,sp
017B 24F4      1037            add     a,#0xf4
017D F581      1038            mov     sp,a
017F           1039   ;        Tcom.h:120: switch(op) {
017F AAD0      1040            mov     r2,_sendCommandS_op_1_88
0181 BA6650    1041            cjne    r2,#0x66,L012011?
0184 8001      1042            sjmp    L012002?
0186           1043   L012011?:
0186 8A03      1044            mov     ar3,r2
0188 BB72D0    1045            cjne    r3,#0x72,L012012?
018B 8001      1046            sjmp    L012003?
018D           1047   L012012?:
018D BA7350    1048            cjne    r2,#0x73,L012004?
0190           1049   ;        Tcom.h:122: op = 0;
0190 75D000    1050            mov     _sendCommandS_op_1_88,#0x00
0193           1051   ;        Tcom.h:123: break;
0193           1052   ;        Tcom.h:124: case 'f':
0193 8001      1053            sjmp    L012005?
0195           1054   L012002?:
0195           1055   ;        Tcom.h:125: op = 0b_001;
0195 75D001    1056            mov     _sendCommandS_op_1_88,#0x01
0198           1057   ;        Tcom.h:126: break;
0198           1058   ;        Tcom.h:127: case 'r':
0198 8001      1059            sjmp    L012005?
019A           1060   L012003?:
019A           1061   ;        Tcom.h:128: op = 0b_010;
019A 75D002    1062            mov     _sendCommandS_op_1_88,#0x02
019D           1063   ;        Tcom.h:129: break;
019D           1064   ;        Tcom.h:130: default:
019D 8001      1065            sjmp    L012005?
019F           1066   L012004?:
019F           1067   ;        Tcom.h:131: return;
019F           1068   ;        Tcom.h:132: }
019F 22        1069            ret
01A0           1070   L012005?:
01A0           1071   ;        Tcom.h:133: sendCommand(op, d);
01A0 8520C0    1072            mov     _sendCommand_PARM_2,_sendCommandS_d_1_88
01A3 85D082    1073            mov     dpl,_sendCommandS_op_1_88
01A6 020100    1074            ljmp    _sendCommand
01A9           1075   ;------------------------------------------------------------
01A9           1076   ;Allocation info for local variables in function 'frequencyToReload'
01A9           1077   ;------------------------------------------------------------
01A9           1078   ;freq                      Allocated to registers r2 r3 
01A9           1079   ;------------------------------------------------------------
01A9           1080   ;        Tcom.h:152: unsigned int frequencyToReload(unsigned int freq) {
01A9           1081   ;        -----------------------------------------
01A9           1082   ;         function frequencyToReload
01A9           1083   ;        -----------------------------------------
01A9           1084   _frequencyToReload:
01A9 AA82      1085            mov     r2,dpl
01AB AB83      1086            mov     r3,dph
01AD           1087   ;        Tcom.h:153: return 65536 - (60000/(freq));
01AD 8A00      1088            mov     __divslong_PARM_2,r2
01AF 8B01      1089            mov     (__divslong_PARM_2 + 1),r3
01B1 750200    1090            mov     (__divslong_PARM_2 + 2),#0x00
01B4 750300    1091            mov     (__divslong_PARM_2 + 3),#0x00
01B7 90EA60    1092            mov     dptr,#0xEA60
01BA E4        1093            clr     a
01BB F5F0      1094            mov     b,a
01BD 120100    1095            lcall   __divslong
01C0 AA82      1096            mov     r2,dpl
01C2 AB83      1097            mov     r3,dph
01C4 ACF0      1098            mov     r4,b
01C6 FD        1099            mov     r5,a
01C7 E4        1100            clr     a
01C8 C3        1101            clr     c
01C9 9A        1102            subb    a,r2
01CA FA        1103            mov     r2,a
01CB E4        1104            clr     a
01CC 9B        1105            subb    a,r3
01CD FB        1106            mov     r3,a
01CE 7401      1107            mov     a,#0x01
01D0 9C        1108            subb    a,r4
01D1 E4        1109            clr     a
01D2 9D        1110            subb    a,r5
01D3 8A82      1111            mov     dpl,r2
01D5 8B83      1112            mov     dph,r3
01D7 22        1113            ret
01D8           1114   ;------------------------------------------------------------
01D8           1115   ;Allocation info for local variables in function 'reloadToFrequency'
01D8           1116   ;------------------------------------------------------------
01D8           1117   ;reload                    Allocated to registers r2 r3 
01D8           1118   ;------------------------------------------------------------
01D8           1119   ;        Tcom.h:156: unsigned int reloadToFrequency(unsigned int reload) {
01D8           1120   ;        -----------------------------------------
01D8           1121   ;         function reloadToFrequency
01D8           1122   ;        -----------------------------------------
01D8           1123   _reloadToFrequency:
01D8 AA82      1124            mov     r2,dpl
01DA AB83      1125            mov     r3,dph
01DC           1126   ;        Tcom.h:157: return ((SYSCLK/12)/(65536 - reload))/100;
01DC 7C00      1127            mov     r4,#0x00
01DE E4        1128            clr     a
01DF FD        1129            mov     r5,a
01E0 C3        1130            clr     c
01E1 9A        1131            subb    a,r2
01E2 F500      1132            mov     __divslong_PARM_2,a
01E4 E4        1133            clr     a
01E5 9B        1134            subb    a,r3
01E6 F501      1135            mov     (__divslong_PARM_2 + 1),a
01E8 7401      1136            mov     a,#0x01
01EA 9C        1137            subb    a,r4
01EB F502      1138            mov     (__divslong_PARM_2 + 2),a
01ED E4        1139            clr     a
01EE 9D        1140            subb    a,r5
01EF F503      1141            mov     (__divslong_PARM_2 + 3),a
01F1 908D80    1142            mov     dptr,#0x8D80
01F4 75F05B    1143            mov     b,#0x5B
01F7 E4        1144            clr     a
01F8 120100    1145            lcall   __divslong
01FB AA82      1146            mov     r2,dpl
01FD AB83      1147            mov     r3,dph
01FF ACF0      1148            mov     r4,b
0201 FD        1149            mov     r5,a
0202 750064    1150            mov     __divslong_PARM_2,#0x64
0205 E4        1151            clr     a
0206 F501      1152            mov     (__divslong_PARM_2 + 1),a
0208 F502      1153            mov     (__divslong_PARM_2 + 2),a
020A F503      1154            mov     (__divslong_PARM_2 + 3),a
020C 8A82      1155            mov     dpl,r2
020E 8B83      1156            mov     dph,r3
0210 8CF0      1157            mov     b,r4
0212 ED        1158            mov     a,r5
0213 020100    1159            ljmp    __divslong
0216           1160   ;------------------------------------------------------------
0216           1161   ;Allocation info for local variables in function 'setFrequency'
0216           1162   ;------------------------------------------------------------
0216           1163   ;input                     Allocated to registers r2 r3 r4 
0216           1164   ;frequency                 Allocated with name '_setFrequency_frequency_1_95'
0216           1165   ;------------------------------------------------------------
0216           1166   ;        Tcom.h:160: void setFrequency(char* input) {
0216           1167   ;        -----------------------------------------
0216           1168   ;         function setFrequency
0216           1169   ;        -----------------------------------------
0216           1170   _setFrequency:
0216 AA82      1171            mov     r2,dpl
0218 AB83      1172            mov     r3,dph
021A ACF0      1173            mov     r4,b
021C           1174   ;        Tcom.h:162: sscanf(input, "%*s %u", &frequency);
021C 7470      1175            mov     a,#_setFrequency_frequency_1_95
021E C0E0      1176            push    acc
0220 74C0      1177            mov     a,#(_setFrequency_frequency_1_95 >> 8)
0222 C0E0      1178            push    acc
0224 7440      1179            mov     a,#0x40
0226 C0E0      1180            push    acc
0228 7460      1181            mov     a,#__str_3
022A C0E0      1182            push    acc
022C 74CD      1183            mov     a,#(__str_3 >> 8)
022E C0E0      1184            push    acc
0230 7480      1185            mov     a,#0x80
0232 C0E0      1186            push    acc
0234 C002      1187            push    ar2
0236 C003      1188            push    ar3
0238 C004      1189            push    ar4
023A 120100    1190            lcall   _sscanf
023D E581      1191            mov     a,sp
023F 24F7      1192            add     a,#0xf7
0241 F581      1193            mov     sp,a
0243           1194   ;        Tcom.h:163: while(reload_flag != 0);
0243           1195   L015001?:
0243 2050A0    1196            jb      _reload_flag,L015001?
0246           1197   ;        Tcom.h:164: TMR2RL = frequencyToReload(frequency);
0246 857082    1198            mov     dpl,_setFrequency_frequency_1_95
0249 857183    1199            mov     dph,(_setFrequency_frequency_1_95 + 1)
024C 120100    1200            lcall   _frequencyToReload
024F 8582CA    1201            mov     _TMR2RL,dpl
0252 8583CB    1202            mov     (_TMR2RL >> 8),dph
0255 22        1203            ret
0256           1204   ;------------------------------------------------------------
0256           1205   ;Allocation info for local variables in function 'setReload'
0256           1206   ;------------------------------------------------------------
0256           1207   ;input                     Allocated to registers r2 r3 r4 
0256           1208   ;reload                    Allocated with name '_setReload_reload_1_97'
0256           1209   ;------------------------------------------------------------
0256           1210   ;        Tcom.h:167: void setReload(char* input) {
0256           1211   ;        -----------------------------------------
0256           1212   ;         function setReload
0256           1213   ;        -----------------------------------------
0256           1214   _setReload:
0256 AA82      1215            mov     r2,dpl
0258 AB83      1216            mov     r3,dph
025A ACF0      1217            mov     r4,b
025C           1218   ;        Tcom.h:169: sscanf(input, "%*s %u", &reload);
025C 74C0      1219            mov     a,#_setReload_reload_1_97
025E C0E0      1220            push    acc
0260 74C0      1221            mov     a,#(_setReload_reload_1_97 >> 8)
0262 C0E0      1222            push    acc
0264 7440      1223            mov     a,#0x40
0266 C0E0      1224            push    acc
0268 7460      1225            mov     a,#__str_3
026A C0E0      1226            push    acc
026C 74CD      1227            mov     a,#(__str_3 >> 8)
026E C0E0      1228            push    acc
0270 7480      1229            mov     a,#0x80
0272 C0E0      1230            push    acc
0274 C002      1231            push    ar2
0276 C003      1232            push    ar3
0278 C004      1233            push    ar4
027A 120100    1234            lcall   _sscanf
027D E581      1235            mov     a,sp
027F 24F7      1236            add     a,#0xf7
0281 F581      1237            mov     sp,a
0283           1238   ;        Tcom.h:170: while(reload_flag != 0);
0283           1239   L016001?:
0283 2050E0    1240            jb      _reload_flag,L016001?
0286           1241   ;        Tcom.h:171: TMR2RL = reload;
0286 85C0CA    1242            mov     _TMR2RL,_setReload_reload_1_97
0289 85C1CB    1243            mov     (_TMR2RL >> 8),(_setReload_reload_1_97 + 1)
028C 22        1244            ret
028D           1245   ;------------------------------------------------------------
028D           1246   ;Allocation info for local variables in function 'PWMoff'
028D           1247   ;------------------------------------------------------------
028D           1248   ;------------------------------------------------------------
028D           1249   ;        Tcom.h:189: void PWMoff() {
028D           1250   ;        -----------------------------------------
028D           1251   ;         function PWMoff
028D           1252   ;        -----------------------------------------
028D           1253   _PWMoff:
028D           1254   ;        Tcom.h:190: OUT0 = 0;
028D C2A0      1255            clr     _P2_0
028F           1256   ;        Tcom.h:191: OUT1 = 0;
028F C296      1257            clr     _P1_6
0291           1258   ;        Tcom.h:192: TR2 = 0;
0291 C2CA      1259            clr     _TR2
0293 22        1260            ret
0294           1261   ;------------------------------------------------------------
0294           1262   ;Allocation info for local variables in function 'PWMon'
0294           1263   ;------------------------------------------------------------
0294           1264   ;------------------------------------------------------------
0294           1265   ;        Tcom.h:195: void PWMon() {
0294           1266   ;        -----------------------------------------
0294           1267   ;         function PWMon
0294           1268   ;        -----------------------------------------
0294           1269   _PWMon:
0294           1270   ;        Tcom.h:196: TR2 = 1;
0294 D2CA      1271            setb    _TR2
0296 22        1272            ret
0297           1273   ;------------------------------------------------------------
0297           1274   ;Allocation info for local variables in function 'getCommand'
0297           1275   ;------------------------------------------------------------
0297           1276   ;input                     Allocated to registers r2 r3 r4 
0297           1277   ;------------------------------------------------------------
0297           1278   ;        Tcom.h:199: void getCommand(char* input) {
0297           1279   ;        -----------------------------------------
0297           1280   ;         function getCommand
0297           1281   ;        -----------------------------------------
0297           1282   _getCommand:
0297           1283   ;        Tcom.h:201: if (input[0] == '-') {
0297 AA82      1284            mov     r2,dpl
0299 AB83      1285            mov     r3,dph
029B ACF0      1286            mov     r4,b
029D 120100    1287            lcall   __gptrget
02A0 FD        1288            mov     r5,a
02A1 BD2D60    1289            cjne    r5,#0x2D,L019031?
02A4 8001      1290            sjmp    L019032?
02A6           1291   L019031?:
02A6 020100    1292            ljmp    L019016?
02A9           1293   L019032?:
02A9           1294   ;        Tcom.h:202: switch(input[1]) {
02A9 7401      1295            mov     a,#0x01
02AB 2A        1296            add     a,r2
02AC FD        1297            mov     r5,a
02AD E4        1298            clr     a
02AE 3B        1299            addc    a,r3
02AF FE        1300            mov     r6,a
02B0 8C07      1301            mov     ar7,r4
02B2 8D82      1302            mov     dpl,r5
02B4 8E83      1303            mov     dph,r6
02B6 8FF0      1304            mov     b,r7
02B8 120100    1305            lcall   __gptrget
02BB FD        1306            mov     r5,a
02BC BD2F20    1307            cjne    r5,#0x2F,L019033?
02BF 8001      1308            sjmp    L019001?
02C1           1309   L019033?:
02C1 BD66A0    1310            cjne    r5,#0x66,L019034?
02C4 8001      1311            sjmp    L019002?
02C6           1312   L019034?:
02C6 BD6828    1313            cjne    r5,#0x68,L019035?
02C9 8001      1314            sjmp    L019003?
02CB           1315   L019035?:
02CB BD69A8    1316            cjne    r5,#0x69,L019036?
02CE 8001      1317            sjmp    L019004?
02D0           1318   L019036?:
02D0 BD6F28    1319            cjne    r5,#0x6F,L019037?
02D3 8001      1320            sjmp    L019005?
02D5           1321   L019037?:
02D5 BD72A8    1322            cjne    r5,#0x72,L019038?
02D8 020100    1323            ljmp    L019008?
02DB           1324   L019038?:
02DB BD7328    1325            cjne    r5,#0x73,L019039?
02DE 020100    1326            ljmp    L019009?
02E1           1327   L019039?:
02E1 BD74A8    1328            cjne    r5,#0x74,L019040?
02E4 020100    1329            ljmp    L019012?
02E7           1330   L019040?:
02E7 020100    1331            ljmp    L019013?
02EA           1332   ;        Tcom.h:203: case '/':
02EA           1333   L019001?:
02EA           1334   ;        Tcom.h:204: sendCommandS(input);
02EA 8A82      1335            mov     dpl,r2
02EC 8B83      1336            mov     dph,r3
02EE 8CF0      1337            mov     b,r4
02F0 120100    1338            lcall   _sendCommandS
02F3           1339   ;        Tcom.h:205: break;
02F3 020100    1340            ljmp    L019017?
02F6           1341   ;        Tcom.h:218: case 'f':
02F6           1342   L019002?:
02F6           1343   ;        Tcom.h:219: setFrequency(input);
02F6 8A82      1344            mov     dpl,r2
02F8 8B83      1345            mov     dph,r3
02FA 8CF0      1346            mov     b,r4
02FC 120100    1347            lcall   _setFrequency
02FF           1348   ;        Tcom.h:220: break;
02FF 020100    1349            ljmp    L019017?
0302           1350   ;        Tcom.h:221: case 'h':
0302           1351   L019003?:
0302           1352   ;        Tcom.h:222: printf("Help Menu\r\nList of Commands: \r\n-cw [duty value]\r\n-ccw [duty value]\r\n-f [freq value]\r\n-r [reload value]\r\n-o\r\n-s\r\n-i\r\n\n");
0302 74A8      1353            mov     a,#__str_4
0304 C0E0      1354            push    acc
0306 74D3      1355            mov     a,#(__str_4 >> 8)
0308 C0E0      1356            push    acc
030A 7480      1357            mov     a,#0x80
030C C0E0      1358            push    acc
030E 120100    1359            lcall   _printf
0311 1581      1360            dec     sp
0313 1581      1361            dec     sp
0315 1581      1362            dec     sp
0317           1363   ;        Tcom.h:223: break;
0317 020100    1364            ljmp    L019017?
031A           1365   ;        Tcom.h:224: case 'i':
031A           1366   L019004?:
031A           1367   ;        Tcom.h:225: printf("Reload: %u, Freq: %d \r\n", TMR2RL, reloadToFrequency(TMR2RL));
031A 85CA82    1368            mov     dpl,_TMR2RL
031D 85CB83    1369            mov     dph,(_TMR2RL >> 8)
0320 120100    1370            lcall   _reloadToFrequency
0323 AD82      1371            mov     r5,dpl
0325 AE83      1372            mov     r6,dph
0327 C005      1373            push    ar5
0329 C006      1374            push    ar6
032B C0CA      1375            push    _TMR2RL
032D C0CB      1376            push    (_TMR2RL >> 8)
032F 74E8      1377            mov     a,#__str_5
0331 C0E0      1378            push    acc
0333 74D3      1379            mov     a,#(__str_5 >> 8)
0335 C0E0      1380            push    acc
0337 7480      1381            mov     a,#0x80
0339 C0E0      1382            push    acc
033B 120100    1383            lcall   _printf
033E E581      1384            mov     a,sp
0340 24F9      1385            add     a,#0xf9
0342 F581      1386            mov     sp,a
0344           1387   ;        Tcom.h:227: break;
0344 020100    1388            ljmp    L019017?
0347           1389   ;        Tcom.h:228: case 'o':
0347           1390   L019005?:
0347           1391   ;        Tcom.h:229: if (input[2] == 0)
0347 7402      1392            mov     a,#0x02
0349 2A        1393            add     a,r2
034A FD        1394            mov     r5,a
034B E4        1395            clr     a
034C 3B        1396            addc    a,r3
034D FE        1397            mov     r6,a
034E 8C07      1398            mov     ar7,r4
0350 8D82      1399            mov     dpl,r5
0352 8E83      1400            mov     dph,r6
0354 8FF0      1401            mov     b,r7
0356 120100    1402            lcall   __gptrget
0359 7001      1403            jnz     L019017?
035B           1404   ;        Tcom.h:230: PWMoff();
035B 120100    1405            lcall   _PWMoff
035E           1406   ;        Tcom.h:231: break;      
035E           1407   ;        Tcom.h:232: case 'r':
035E 8001      1408            sjmp    L019017?
0360           1409   L019008?:
0360           1410   ;        Tcom.h:233: setReload(input);
0360 8A82      1411            mov     dpl,r2
0362 8B83      1412            mov     dph,r3
0364 8CF0      1413            mov     b,r4
0366 120100    1414            lcall   _setReload
0369           1415   ;        Tcom.h:234: break;
0369           1416   ;        Tcom.h:235: case 's':
0369 8001      1417            sjmp    L019017?
036B           1418   L019009?:
036B           1419   ;        Tcom.h:236: if (input[2] == 0)
036B 7402      1420            mov     a,#0x02
036D 2A        1421            add     a,r2
036E FD        1422            mov     r5,a
036F E4        1423            clr     a
0370 3B        1424            addc    a,r3
0371 FE        1425            mov     r6,a
0372 8C07      1426            mov     ar7,r4
0374 8D82      1427            mov     dpl,r5
0376 8E83      1428            mov     dph,r6
0378 8FF0      1429            mov     b,r7
037A 120100    1430            lcall   __gptrget
037D 7001      1431            jnz     L019017?
037F           1432   ;        Tcom.h:237: PWMon();
037F 120100    1433            lcall   _PWMon
0382           1434   ;        Tcom.h:238: break;
0382           1435   ;        Tcom.h:239: case 't':
0382 8001      1436            sjmp    L019017?
0384           1437   L019012?:
0384           1438   ;        Tcom.h:240: putchar1(0b_1010_1010);
0384 7582AA    1439            mov     dpl,#0xAA
0387 120100    1440            lcall   _putchar1
038A           1441   ;        Tcom.h:241: break;
038A           1442   ;        Tcom.h:242: default:
038A 8001      1443            sjmp    L019017?
038C           1444   L019013?:
038C           1445   ;        Tcom.h:243: printf("\"%s\" invalid command\r\n", input);
038C C002      1446            push    ar2
038E C003      1447            push    ar3
0390 C004      1448            push    ar4
0392 7428      1449            mov     a,#__str_6
0394 C0E0      1450            push    acc
0396 74D4      1451            mov     a,#(__str_6 >> 8)
0398 C0E0      1452            push    acc
039A 7480      1453            mov     a,#0x80
039C C0E0      1454            push    acc
039E 120100    1455            lcall   _printf
03A1 E581      1456            mov     a,sp
03A3 24FA      1457            add     a,#0xfa
03A5 F581      1458            mov     sp,a
03A7           1459   ;        Tcom.h:245: }
03A7 8001      1460            sjmp    L019017?
03A9           1461   L019016?:
03A9           1462   ;        Tcom.h:247: printf("Not Valid input\r\n");
03A9 7468      1463            mov     a,#__str_7
03AB C0E0      1464            push    acc
03AD 74D4      1465            mov     a,#(__str_7 >> 8)
03AF C0E0      1466            push    acc
03B1 7480      1467            mov     a,#0x80
03B3 C0E0      1468            push    acc
03B5 120100    1469            lcall   _printf
03B8 1581      1470            dec     sp
03BA 1581      1471            dec     sp
03BC 1581      1472            dec     sp
03BE           1473   L019017?:
03BE           1474   ;        Tcom.h:249: return;
03BE 22        1475            ret
03BF           1476   ;------------------------------------------------------------
03BF           1477   ;Allocation info for local variables in function 'Tcom_init'
03BF           1478   ;------------------------------------------------------------
03BF           1479   ;baudrate                  Allocated to registers r2 r3 r4 r5 
03BF           1480   ;------------------------------------------------------------
03BF           1481   ;        Tcom.h:252: void Tcom_init(unsigned long baudrate) {
03BF           1482   ;        -----------------------------------------
03BF           1483   ;         function Tcom_init
03BF           1484   ;        -----------------------------------------
03BF           1485   _Tcom_init:
03BF AA82      1486            mov     r2,dpl
03C1 AB83      1487            mov     r3,dph
03C3 ACF0      1488            mov     r4,b
03C5 FD        1489            mov     r5,a
03C6           1490   ;        Tcom.h:258: Timer4_init(); //used for frequency-resolution interrupts
03C6 C002      1491            push    ar2
03C8 C003      1492            push    ar3
03CA C004      1493            push    ar4
03CC C005      1494            push    ar5
03CE 120100    1495            lcall   _Timer4_init
03D1 D005      1496            pop     ar5
03D3 D004      1497            pop     ar4
03D5 D003      1498            pop     ar3
03D7 D002      1499            pop     ar2
03D9           1500   ;        Tcom.h:261: UART1_Init(baudrate);
03D9 8A82      1501            mov     dpl,r2
03DB 8B83      1502            mov     dph,r3
03DD 8CF0      1503            mov     b,r4
03DF ED        1504            mov     a,r5
03E0 020100    1505            ljmp    _UART1_Init
03E3           1506   ;------------------------------------------------------------
03E3           1507   ;Allocation info for local variables in function 'Timer2us'
03E3           1508   ;------------------------------------------------------------
03E3           1509   ;us                        Allocated to registers r2 
03E3           1510   ;i                         Allocated to registers r3 
03E3           1511   ;------------------------------------------------------------
03E3           1512   ;        EFM8core.h:9: void Timer2us(unsigned char us)
03E3           1513   ;        -----------------------------------------
03E3           1514   ;         function Timer2us
03E3           1515   ;        -----------------------------------------
03E3           1516   _Timer2us:
03E3 AA82      1517            mov     r2,dpl
03E5           1518   ;        EFM8core.h:13: SFRPAGE=0x00;
03E5 75A700    1519            mov     _SFRPAGE,#0x00
03E8           1520   ;        EFM8core.h:15: CKCON0|=0b_0001_0000;
03E8 438E10    1521            orl     _CKCON0,#0x10
03EB           1522   ;        EFM8core.h:17: TMR2RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
03EB 75CAB8    1523            mov     _TMR2RL,#0xB8
03EE 75CBFF    1524            mov     (_TMR2RL >> 8),#0xFF
03F1           1525   ;        EFM8core.h:18: TMR2 = TMR2RL;                 // Initialize Timer3 for first overflow
03F1 85CACE    1526            mov     _TMR2,_TMR2RL
03F4 85CBCF    1527            mov     (_TMR2 >> 8),(_TMR2RL >> 8)
03F7           1528   ;        EFM8core.h:20: TMR2CN0 = 0x04;                 // Start Timer3 and clear overflow flag
03F7 75C804    1529            mov     _TMR2CN0,#0x04
03FA           1530   ;        EFM8core.h:22: for (i = 0; i < us; i++)       // Count <us> overflows
03FA 7B00      1531            mov     r3,#0x00
03FC           1532   L021004?:
03FC C3        1533            clr     c
03FD EB        1534            mov     a,r3
03FE 9A        1535            subb    a,r2
03FF 5001      1536            jnc     L021007?
0401           1537   ;        EFM8core.h:24: while (!(TMR2CN0 & 0x80));  // Wait for overflow
0401           1538   L021001?:
0401 E5C8      1539            mov     a,_TMR2CN0
0403 30E728    1540            jnb     acc.7,L021001?
0406           1541   ;        EFM8core.h:26: TMR2CN0 &= ~(0x80);         // Clear overflow indicator
0406 53C87F    1542            anl     _TMR2CN0,#0x7F
0409           1543   ;        EFM8core.h:22: for (i = 0; i < us; i++)       // Count <us> overflows
0409 0B        1544            inc     r3
040A 8001      1545            sjmp    L021004?
040C           1546   L021007?:
040C           1547   ;        EFM8core.h:29: TMR2CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
040C 75C800    1548            mov     _TMR2CN0,#0x00
040F 22        1549            ret
0410           1550   ;------------------------------------------------------------
0410           1551   ;Allocation info for local variables in function 'waitms'
0410           1552   ;------------------------------------------------------------
0410           1553   ;ms                        Allocated to registers r2 r3 
0410           1554   ;j                         Allocated to registers r2 r3 
0410           1555   ;------------------------------------------------------------
0410           1556   ;        EFM8core.h:32: void waitms (unsigned int ms)
0410           1557   ;        -----------------------------------------
0410           1558   ;         function waitms
0410           1559   ;        -----------------------------------------
0410           1560   _waitms:
0410 AA82      1561            mov     r2,dpl
0412 AB83      1562            mov     r3,dph
0414           1563   ;        EFM8core.h:35: for(j=ms; j!=0; j--)
0414           1564   L022001?:
0414 BA00A8    1565            cjne    r2,#0x00,L022010?
0417 BB00A8    1566            cjne    r3,#0x00,L022010?
041A 22        1567            ret
041B           1568   L022010?:
041B           1569   ;        EFM8core.h:37: Timer2us(249);
041B 7582F9    1570            mov     dpl,#0xF9
041E C002      1571            push    ar2
0420 C003      1572            push    ar3
0422 120100    1573            lcall   _Timer2us
0425           1574   ;        EFM8core.h:38: Timer2us(249);
0425 7582F9    1575            mov     dpl,#0xF9
0428 120100    1576            lcall   _Timer2us
042B           1577   ;        EFM8core.h:39: Timer2us(249);
042B 7582F9    1578            mov     dpl,#0xF9
042E 120100    1579            lcall   _Timer2us
0431           1580   ;        EFM8core.h:40: Timer2us(250);
0431 7582FA    1581            mov     dpl,#0xFA
0434 120100    1582            lcall   _Timer2us
0437 D003      1583            pop     ar3
0439 D002      1584            pop     ar2
043B           1585   ;        EFM8core.h:35: for(j=ms; j!=0; j--)
043B 1A        1586            dec     r2
043C BAFFE8    1587            cjne    r2,#0xff,L022011?
043F 1B        1588            dec     r3
0440           1589   L022011?:
0440 8001      1590            sjmp    L022001?
0442           1591   ;------------------------------------------------------------
0442           1592   ;Allocation info for local variables in function 'LCD_pulse'
0442           1593   ;------------------------------------------------------------
0442           1594   ;------------------------------------------------------------
0442           1595   ;        EFM8LCDlib.h:15: void LCD_pulse (void)
0442           1596   ;        -----------------------------------------
0442           1597   ;         function LCD_pulse
0442           1598   ;        -----------------------------------------
0442           1599   _LCD_pulse:
0442           1600   ;        EFM8LCDlib.h:17: LCD_E=1;
0442 D2A5      1601            setb    _P2_5
0444           1602   ;        EFM8LCDlib.h:18: Timer2us(40);
0444 758228    1603            mov     dpl,#0x28
0447 120100    1604            lcall   _Timer2us
044A           1605   ;        EFM8LCDlib.h:19: LCD_E=0;
044A C2A5      1606            clr     _P2_5
044C 22        1607            ret
044D           1608   ;------------------------------------------------------------
044D           1609   ;Allocation info for local variables in function 'LCD_byte'
044D           1610   ;------------------------------------------------------------
044D           1611   ;x                         Allocated to registers r2 
044D           1612   ;------------------------------------------------------------
044D           1613   ;        EFM8LCDlib.h:22: void LCD_byte (unsigned char x)
044D           1614   ;        -----------------------------------------
044D           1615   ;         function LCD_byte
044D           1616   ;        -----------------------------------------
044D           1617   _LCD_byte:
044D AA82      1618            mov     r2,dpl
044F           1619   ;        EFM8LCDlib.h:25: ACC=x; //Send high nible
044F 8AE0      1620            mov     _ACC,r2
0451           1621   ;        EFM8LCDlib.h:26: LCD_D7=ACC_7;
0451 A2E7      1622            mov     c,_ACC_7
0453 92A1      1623            mov     _P2_1,c
0455           1624   ;        EFM8LCDlib.h:27: LCD_D6=ACC_6;
0455 A2E6      1625            mov     c,_ACC_6
0457 92A2      1626            mov     _P2_2,c
0459           1627   ;        EFM8LCDlib.h:28: LCD_D5=ACC_5;
0459 A2E5      1628            mov     c,_ACC_5
045B 92A3      1629            mov     _P2_3,c
045D           1630   ;        EFM8LCDlib.h:29: LCD_D4=ACC_4;
045D A2E4      1631            mov     c,_ACC_4
045F 92A4      1632            mov     _P2_4,c
0461           1633   ;        EFM8LCDlib.h:30: LCD_pulse();
0461 C002      1634            push    ar2
0463 120100    1635            lcall   _LCD_pulse
0466           1636   ;        EFM8LCDlib.h:31: Timer2us(40);
0466 758228    1637            mov     dpl,#0x28
0469 120100    1638            lcall   _Timer2us
046C D002      1639            pop     ar2
046E           1640   ;        EFM8LCDlib.h:32: ACC=x; //Send low nible
046E 8AE0      1641            mov     _ACC,r2
0470           1642   ;        EFM8LCDlib.h:33: LCD_D7=ACC_3;
0470 A2E3      1643            mov     c,_ACC_3
0472 92A1      1644            mov     _P2_1,c
0474           1645   ;        EFM8LCDlib.h:34: LCD_D6=ACC_2;
0474 A2E2      1646            mov     c,_ACC_2
0476 92A2      1647            mov     _P2_2,c
0478           1648   ;        EFM8LCDlib.h:35: LCD_D5=ACC_1;
0478 A2E1      1649            mov     c,_ACC_1
047A 92A3      1650            mov     _P2_3,c
047C           1651   ;        EFM8LCDlib.h:36: LCD_D4=ACC_0;
047C A2E0      1652            mov     c,_ACC_0
047E 92A4      1653            mov     _P2_4,c
0480           1654   ;        EFM8LCDlib.h:37: LCD_pulse();
0480 020100    1655            ljmp    _LCD_pulse
0483           1656   ;------------------------------------------------------------
0483           1657   ;Allocation info for local variables in function 'WriteData'
0483           1658   ;------------------------------------------------------------
0483           1659   ;x                         Allocated to registers r2 
0483           1660   ;------------------------------------------------------------
0483           1661   ;        EFM8LCDlib.h:40: void WriteData (unsigned char x)
0483           1662   ;        -----------------------------------------
0483           1663   ;         function WriteData
0483           1664   ;        -----------------------------------------
0483           1665   _WriteData:
0483 AA82      1666            mov     r2,dpl
0485           1667   ;        EFM8LCDlib.h:42: LCD_RS=1;
0485 D2A6      1668            setb    _P2_6
0487           1669   ;        EFM8LCDlib.h:43: LCD_byte(x);
0487 8A82      1670            mov     dpl,r2
0489 120100    1671            lcall   _LCD_byte
048C           1672   ;        EFM8LCDlib.h:44: waitms(2);
048C 900002    1673            mov     dptr,#0x0002
048F 020100    1674            ljmp    _waitms
0492           1675   ;------------------------------------------------------------
0492           1676   ;Allocation info for local variables in function 'WriteCommand'
0492           1677   ;------------------------------------------------------------
0492           1678   ;x                         Allocated to registers r2 
0492           1679   ;------------------------------------------------------------
0492           1680   ;        EFM8LCDlib.h:47: void WriteCommand (unsigned char x)
0492           1681   ;        -----------------------------------------
0492           1682   ;         function WriteCommand
0492           1683   ;        -----------------------------------------
0492           1684   _WriteCommand:
0492 AA82      1685            mov     r2,dpl
0494           1686   ;        EFM8LCDlib.h:49: LCD_RS=0;
0494 C2A6      1687            clr     _P2_6
0496           1688   ;        EFM8LCDlib.h:50: LCD_byte(x);
0496 8A82      1689            mov     dpl,r2
0498 120100    1690            lcall   _LCD_byte
049B           1691   ;        EFM8LCDlib.h:51: waitms(5);
049B 900005    1692            mov     dptr,#0x0005
049E 020100    1693            ljmp    _waitms
04A1           1694   ;------------------------------------------------------------
04A1           1695   ;Allocation info for local variables in function 'LCD_4BIT'
04A1           1696   ;------------------------------------------------------------
04A1           1697   ;------------------------------------------------------------
04A1           1698   ;        EFM8LCDlib.h:54: void LCD_4BIT (void)
04A1           1699   ;        -----------------------------------------
04A1           1700   ;         function LCD_4BIT
04A1           1701   ;        -----------------------------------------
04A1           1702   _LCD_4BIT:
04A1           1703   ;        EFM8LCDlib.h:56: LCD_E=0; // Resting state of LCD's enable is zero
04A1 C2A5      1704            clr     _P2_5
04A3           1705   ;        EFM8LCDlib.h:58: waitms(20);
04A3 900014    1706            mov     dptr,#0x0014
04A6 120100    1707            lcall   _waitms
04A9           1708   ;        EFM8LCDlib.h:60: WriteCommand(0x33);
04A9 758233    1709            mov     dpl,#0x33
04AC 120100    1710            lcall   _WriteCommand
04AF           1711   ;        EFM8LCDlib.h:61: WriteCommand(0x33);
04AF 758233    1712            mov     dpl,#0x33
04B2 120100    1713            lcall   _WriteCommand
04B5           1714   ;        EFM8LCDlib.h:62: WriteCommand(0x32); // Change to 4-bit mode
04B5 758232    1715            mov     dpl,#0x32
04B8 120100    1716            lcall   _WriteCommand
04BB           1717   ;        EFM8LCDlib.h:65: WriteCommand(0x28);
04BB 758228    1718            mov     dpl,#0x28
04BE 120100    1719            lcall   _WriteCommand
04C1           1720   ;        EFM8LCDlib.h:66: WriteCommand(0x0c);
04C1 75820C    1721            mov     dpl,#0x0C
04C4 120100    1722            lcall   _WriteCommand
04C7           1723   ;        EFM8LCDlib.h:67: WriteCommand(0x01); // Clear screen command (takes some time)
04C7 758201    1724            mov     dpl,#0x01
04CA 120100    1725            lcall   _WriteCommand
04CD           1726   ;        EFM8LCDlib.h:68: waitms(20); // Wait for clear screen command to finsih.
04CD 900014    1727            mov     dptr,#0x0014
04D0 020100    1728            ljmp    _waitms
04D3           1729   ;------------------------------------------------------------
04D3           1730   ;Allocation info for local variables in function 'LCDprint'
04D3           1731   ;------------------------------------------------------------
04D3           1732   ;line                      Allocated with name '_LCDprint_PARM_2'
04D3           1733   ;string                    Allocated to registers r2 r3 r4 
04D3           1734   ;j                         Allocated to registers r5 r6 
04D3           1735   ;------------------------------------------------------------
04D3           1736   ;        EFM8LCDlib.h:71: void LCDprint(char * string, unsigned char line, bit clear)
04D3           1737   ;        -----------------------------------------
04D3           1738   ;         function LCDprint
04D3           1739   ;        -----------------------------------------
04D3           1740   _LCDprint:
04D3 AA82      1741            mov     r2,dpl
04D5 AB83      1742            mov     r3,dph
04D7 ACF0      1743            mov     r4,b
04D9           1744   ;        EFM8LCDlib.h:75: WriteCommand(line==2?0xc0:0x80);
04D9 7402      1745            mov     a,#0x02
04DB B57028    1746            cjne    a,_LCDprint_PARM_2,L028013?
04DE 7DC0      1747            mov     r5,#0xC0
04E0 8001      1748            sjmp    L028014?
04E2           1749   L028013?:
04E2 7D80      1750            mov     r5,#0x80
04E4           1751   L028014?:
04E4 8D82      1752            mov     dpl,r5
04E6 C002      1753            push    ar2
04E8 C003      1754            push    ar3
04EA C004      1755            push    ar4
04EC 120100    1756            lcall   _WriteCommand
04EF           1757   ;        EFM8LCDlib.h:76: waitms(5);
04EF 900005    1758            mov     dptr,#0x0005
04F2 120100    1759            lcall   _waitms
04F5 D004      1760            pop     ar4
04F7 D003      1761            pop     ar3
04F9 D002      1762            pop     ar2
04FB           1763   ;        EFM8LCDlib.h:77: for(j=0; string[j]!=0; j++)    WriteData(string[j]);// Write the message
04FB 7D00      1764            mov     r5,#0x00
04FD 7E00      1765            mov     r6,#0x00
04FF           1766   L028003?:
04FF ED        1767            mov     a,r5
0500 2A        1768            add     a,r2
0501 FF        1769            mov     r7,a
0502 EE        1770            mov     a,r6
0503 3B        1771            addc    a,r3
0504 F8        1772            mov     r0,a
0505 8C01      1773            mov     ar1,r4
0507 8F82      1774            mov     dpl,r7
0509 8883      1775            mov     dph,r0
050B 89F0      1776            mov     b,r1
050D 120100    1777            lcall   __gptrget
0510 FF        1778            mov     r7,a
0511 6001      1779            jz      L028006?
0513 8F82      1780            mov     dpl,r7
0515 C002      1781            push    ar2
0517 C003      1782            push    ar3
0519 C004      1783            push    ar4
051B C005      1784            push    ar5
051D C006      1785            push    ar6
051F 120100    1786            lcall   _WriteData
0522 D006      1787            pop     ar6
0524 D005      1788            pop     ar5
0526 D004      1789            pop     ar4
0528 D003      1790            pop     ar3
052A D002      1791            pop     ar2
052C 0D        1792            inc     r5
052D BD00A8    1793            cjne    r5,#0x00,L028003?
0530 0E        1794            inc     r6
0531 8001      1795            sjmp    L028003?
0533           1796   L028006?:
0533           1797   ;        EFM8LCDlib.h:78: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0533 301028    1798            jnb     _LCDprint_PARM_3,L028011?
0536 8D02      1799            mov     ar2,r5
0538 8E03      1800            mov     ar3,r6
053A           1801   L028007?:
053A C3        1802            clr     c
053B EA        1803            mov     a,r2
053C 9410      1804            subb    a,#0x10
053E EB        1805            mov     a,r3
053F 6480      1806            xrl     a,#0x80
0541 9480      1807            subb    a,#0x80
0543 5001      1808            jnc     L028011?
0545 758220    1809            mov     dpl,#0x20
0548 C002      1810            push    ar2
054A C003      1811            push    ar3
054C 120100    1812            lcall   _WriteData
054F D003      1813            pop     ar3
0551 D002      1814            pop     ar2
0553 0A        1815            inc     r2
0554 BA0068    1816            cjne    r2,#0x00,L028007?
0557 0B        1817            inc     r3
0558 8001      1818            sjmp    L028007?
055A           1819   L028011?:
055A 22        1820            ret
055B           1821   ;------------------------------------------------------------
055B           1822   ;Allocation info for local variables in function 'I2C_write'
055B           1823   ;------------------------------------------------------------
055B           1824   ;output_data               Allocated to registers 
055B           1825   ;------------------------------------------------------------
055B           1826   ;        Nunchuck_reader.h:83: void I2C_write (unsigned char output_data)
055B           1827   ;        -----------------------------------------
055B           1828   ;         function I2C_write
055B           1829   ;        -----------------------------------------
055B           1830   _I2C_write:
055B 8582C2    1831            mov     _SMB0DAT,dpl
055E           1832   ;        Nunchuck_reader.h:87: SI = 0;
055E C2C0      1833            clr     _SI
0560           1834   ;        Nunchuck_reader.h:88: while (!SI); // Wait until done with send
0560           1835   L029001?:
0560 30C0A8    1836            jnb     _SI,L029001?
0563 22        1837            ret
0564           1838   ;------------------------------------------------------------
0564           1839   ;Allocation info for local variables in function 'I2C_read'
0564           1840   ;------------------------------------------------------------
0564           1841   ;input_data                Allocated to registers 
0564           1842   ;------------------------------------------------------------
0564           1843   ;        Nunchuck_reader.h:91: unsigned char I2C_read (void)
0564           1844   ;        -----------------------------------------
0564           1845   ;         function I2C_read
0564           1846   ;        -----------------------------------------
0564           1847   _I2C_read:
0564           1848   ;        Nunchuck_reader.h:94: SI = 0;
0564 C2C0      1849            clr     _SI
0566           1850   ;        Nunchuck_reader.h:95: while (!SI); // Wait until we have data to read
0566           1851   L030001?:
0566 30C0E8    1852            jnb     _SI,L030001?
0569           1853   ;        Nunchuck_reader.h:96: input_data = SMB0DAT; // Read the data
0569 85C282    1854            mov     dpl,_SMB0DAT
056C           1855   ;        Nunchuck_reader.h:98: return input_data;
056C 22        1856            ret
056D           1857   ;------------------------------------------------------------
056D           1858   ;Allocation info for local variables in function 'I2C_start'
056D           1859   ;------------------------------------------------------------
056D           1860   ;------------------------------------------------------------
056D           1861   ;        Nunchuck_reader.h:101: void I2C_start (void)
056D           1862   ;        -----------------------------------------
056D           1863   ;         function I2C_start
056D           1864   ;        -----------------------------------------
056D           1865   _I2C_start:
056D           1866   ;        Nunchuck_reader.h:103: ACK = 1;
056D D2C1      1867            setb    _ACK
056F           1868   ;        Nunchuck_reader.h:104: STA = 1;     // Send I2C start
056F D2C5      1869            setb    _STA
0571           1870   ;        Nunchuck_reader.h:105: STO = 0;
0571 C2C4      1871            clr     _STO
0573           1872   ;        Nunchuck_reader.h:106: SI = 0;
0573 C2C0      1873            clr     _SI
0575           1874   ;        Nunchuck_reader.h:107: while (!SI); // Wait until start sent
0575           1875   L031001?:
0575 30C028    1876            jnb     _SI,L031001?
0578           1877   ;        Nunchuck_reader.h:108: STA = 0;     // Reset I2C start
0578 C2C5      1878            clr     _STA
057A 22        1879            ret
057B           1880   ;------------------------------------------------------------
057B           1881   ;Allocation info for local variables in function 'I2C_stop'
057B           1882   ;------------------------------------------------------------
057B           1883   ;------------------------------------------------------------
057B           1884   ;        Nunchuck_reader.h:111: void I2C_stop(void)
057B           1885   ;        -----------------------------------------
057B           1886   ;         function I2C_stop
057B           1887   ;        -----------------------------------------
057B           1888   _I2C_stop:
057B           1889   ;        Nunchuck_reader.h:113: STO = 1;         // Perform I2C stop
057B D2C4      1890            setb    _STO
057D           1891   ;        Nunchuck_reader.h:114: SI = 0;  // Clear SI
057D C2C0      1892            clr     _SI
057F 22        1893            ret
0580           1894   ;------------------------------------------------------------
0580           1895   ;Allocation info for local variables in function 'nunchuck_init'
0580           1896   ;------------------------------------------------------------
0580           1897   ;i                         Allocated to registers r2 
0580           1898   ;buf                       Allocated with name '_nunchuck_init_buf_1_134'
0580           1899   ;sloc0                     Allocated with name '_nunchuck_init_sloc0_1_0'
0580           1900   ;sloc1                     Allocated with name '_nunchuck_init_sloc1_1_0'
0580           1901   ;sloc2                     Allocated with name '_nunchuck_init_sloc2_1_0'
0580           1902   ;------------------------------------------------------------
0580           1903   ;        Nunchuck_reader.h:118: void nunchuck_init(bit print_extension_type)
0580           1904   ;        -----------------------------------------
0580           1905   ;         function nunchuck_init
0580           1906   ;        -----------------------------------------
0580           1907   _nunchuck_init:
0580           1908   ;        Nunchuck_reader.h:124: I2C_start();
0580 120100    1909            lcall   _I2C_start
0583           1910   ;        Nunchuck_reader.h:125: I2C_write(0xA4);
0583 7582A4    1911            mov     dpl,#0xA4
0586 120100    1912            lcall   _I2C_write
0589           1913   ;        Nunchuck_reader.h:126: I2C_write(0xF0);
0589 7582F0    1914            mov     dpl,#0xF0
058C 120100    1915            lcall   _I2C_write
058F           1916   ;        Nunchuck_reader.h:127: I2C_write(0x55);
058F 758255    1917            mov     dpl,#0x55
0592 120100    1918            lcall   _I2C_write
0595           1919   ;        Nunchuck_reader.h:128: I2C_stop();
0595 120100    1920            lcall   _I2C_stop
0598           1921   ;        Nunchuck_reader.h:129: waitms(1);
0598 900001    1922            mov     dptr,#0x0001
059B 120100    1923            lcall   _waitms
059E           1924   ;        Nunchuck_reader.h:131: I2C_start();
059E 120100    1925            lcall   _I2C_start
05A1           1926   ;        Nunchuck_reader.h:132: I2C_write(0xA4);
05A1 7582A4    1927            mov     dpl,#0xA4
05A4 120100    1928            lcall   _I2C_write
05A7           1929   ;        Nunchuck_reader.h:133: I2C_write(0xFB);
05A7 7582FB    1930            mov     dpl,#0xFB
05AA 120100    1931            lcall   _I2C_write
05AD           1932   ;        Nunchuck_reader.h:134: I2C_write(0x00);
05AD 758200    1933            mov     dpl,#0x00
05B0 120100    1934            lcall   _I2C_write
05B3           1935   ;        Nunchuck_reader.h:135: I2C_stop();
05B3 120100    1936            lcall   _I2C_stop
05B6           1937   ;        Nunchuck_reader.h:136: waitms(1);
05B6 900001    1938            mov     dptr,#0x0001
05B9 120100    1939            lcall   _waitms
05BC           1940   ;        Nunchuck_reader.h:140: I2C_start();
05BC 120100    1941            lcall   _I2C_start
05BF           1942   ;        Nunchuck_reader.h:141: I2C_write(0xA4);
05BF 7582A4    1943            mov     dpl,#0xA4
05C2 120100    1944            lcall   _I2C_write
05C5           1945   ;        Nunchuck_reader.h:142: I2C_write(0xFA); // extension type register
05C5 7582FA    1946            mov     dpl,#0xFA
05C8 120100    1947            lcall   _I2C_write
05CB           1948   ;        Nunchuck_reader.h:143: I2C_stop();
05CB 120100    1949            lcall   _I2C_stop
05CE           1950   ;        Nunchuck_reader.h:144: waitms(3); // 3 ms required to complete acquisition
05CE 900003    1951            mov     dptr,#0x0003
05D1 120100    1952            lcall   _waitms
05D4           1953   ;        Nunchuck_reader.h:146: I2C_start();
05D4 120100    1954            lcall   _I2C_start
05D7           1955   ;        Nunchuck_reader.h:147: I2C_write(0xA5);
05D7 7582A5    1956            mov     dpl,#0xA5
05DA 120100    1957            lcall   _I2C_write
05DD           1958   ;        Nunchuck_reader.h:150: for(i=0; i<CHARS_PER_LINE; i++)
05DD 7A00      1959            mov     r2,#0x00
05DF           1960   L033003?:
05DF BA10A8    1961            cjne    r2,#0x10,L033013?
05E2           1962   L033013?:
05E2 5001      1963            jnc     L033006?
05E4           1964   ;        Nunchuck_reader.h:152: buf[i]=I2C_read();
05E4 EA        1965            mov     a,r2
05E5 2410      1966            add     a,#_nunchuck_init_buf_1_134
05E7 F8        1967            mov     r0,a
05E8 C002      1968            push    ar2
05EA C000      1969            push    ar0
05EC 120100    1970            lcall   _I2C_read
05EF E582      1971            mov     a,dpl
05F1 D000      1972            pop     ar0
05F3 D002      1973            pop     ar2
05F5 F6        1974            mov     @r0,a
05F6           1975   ;        Nunchuck_reader.h:150: for(i=0; i<CHARS_PER_LINE; i++)
05F6 0A        1976            inc     r2
05F7 8001      1977            sjmp    L033003?
05F9           1978   L033006?:
05F9           1979   ;        Nunchuck_reader.h:154: ACK=0;
05F9 C2C1      1980            clr     _ACK
05FB           1981   ;        Nunchuck_reader.h:155: I2C_stop();
05FB 120100    1982            lcall   _I2C_stop
05FE           1983   ;        Nunchuck_reader.h:156: waitms(3);
05FE 900003    1984            mov     dptr,#0x0003
0601 120100    1985            lcall   _waitms
0604           1986   ;        Nunchuck_reader.h:158: if(print_extension_type)
0604 30C028    1987            jnb     _nunchuck_init_PARM_1,L033002?
0607           1988   ;        Nunchuck_reader.h:161: buf[0],  buf[1], buf[2], buf[3], buf[4], buf[5]);
0607 AA15      1989            mov     r2,(_nunchuck_init_buf_1_134 + 0x0005)
0609 7B00      1990            mov     r3,#0x00
060B AC14      1991            mov     r4,(_nunchuck_init_buf_1_134 + 0x0004)
060D 7D00      1992            mov     r5,#0x00
060F 851360    1993            mov     _nunchuck_init_sloc0_1_0,(_nunchuck_init_buf_1_134 + 0x0003)
0612 756100    1994            mov     (_nunchuck_init_sloc0_1_0 + 1),#0x00
0615 8512B0    1995            mov     _nunchuck_init_sloc1_1_0,(_nunchuck_init_buf_1_134 + 0x0002)
0618 75B100    1996            mov     (_nunchuck_init_sloc1_1_0 + 1),#0x00
061B 851100    1997            mov     _nunchuck_init_sloc2_1_0,(_nunchuck_init_buf_1_134 + 0x0001)
061E 750100    1998            mov     (_nunchuck_init_sloc2_1_0 + 1),#0x00
0621 AE10      1999            mov     r6,_nunchuck_init_buf_1_134
0623 7F00      2000            mov     r7,#0x00
0625           2001   ;        Nunchuck_reader.h:160: printf("Extension type: %02x  %02x  %02x  %02x  %02x  %02x\n", 
0625 C002      2002            push    ar2
0627 C003      2003            push    ar3
0629 C004      2004            push    ar4
062B C005      2005            push    ar5
062D C060      2006            push    _nunchuck_init_sloc0_1_0
062F C061      2007            push    (_nunchuck_init_sloc0_1_0 + 1)
0631 C0B0      2008            push    _nunchuck_init_sloc1_1_0
0633 C0B1      2009            push    (_nunchuck_init_sloc1_1_0 + 1)
0635 C000      2010            push    _nunchuck_init_sloc2_1_0
0637 C001      2011            push    (_nunchuck_init_sloc2_1_0 + 1)
0639 C006      2012            push    ar6
063B C007      2013            push    ar7
063D 7468      2014            mov     a,#__str_8
063F C0E0      2015            push    acc
0641 74D9      2016            mov     a,#(__str_8 >> 8)
0643 C0E0      2017            push    acc
0645 7480      2018            mov     a,#0x80
0647 C0E0      2019            push    acc
0649 120100    2020            lcall   _printf
064C E581      2021            mov     a,sp
064E 24F1      2022            add     a,#0xf1
0650 F581      2023            mov     sp,a
0652           2024   L033002?:
0652           2025   ;        Nunchuck_reader.h:166: I2C_start();
0652 120100    2026            lcall   _I2C_start
0655           2027   ;        Nunchuck_reader.h:167: I2C_write(0xA4);
0655 7582A4    2028            mov     dpl,#0xA4
0658 120100    2029            lcall   _I2C_write
065B           2030   ;        Nunchuck_reader.h:168: I2C_write(0xF0);
065B 7582F0    2031            mov     dpl,#0xF0
065E 120100    2032            lcall   _I2C_write
0661           2033   ;        Nunchuck_reader.h:169: I2C_write(0xAA);
0661 7582AA    2034            mov     dpl,#0xAA
0664 120100    2035            lcall   _I2C_write
0667           2036   ;        Nunchuck_reader.h:170: I2C_stop();
0667 120100    2037            lcall   _I2C_stop
066A           2038   ;        Nunchuck_reader.h:171: waitms(1);
066A 900001    2039            mov     dptr,#0x0001
066D 120100    2040            lcall   _waitms
0670           2041   ;        Nunchuck_reader.h:173: I2C_start();
0670 120100    2042            lcall   _I2C_start
0673           2043   ;        Nunchuck_reader.h:174: I2C_write(0xA4);
0673 7582A4    2044            mov     dpl,#0xA4
0676 120100    2045            lcall   _I2C_write
0679           2046   ;        Nunchuck_reader.h:175: I2C_write(0x40);
0679 758240    2047            mov     dpl,#0x40
067C 120100    2048            lcall   _I2C_write
067F           2049   ;        Nunchuck_reader.h:176: I2C_write(0x00);
067F 758200    2050            mov     dpl,#0x00
0682 120100    2051            lcall   _I2C_write
0685           2052   ;        Nunchuck_reader.h:177: I2C_write(0x00);
0685 758200    2053            mov     dpl,#0x00
0688 120100    2054            lcall   _I2C_write
068B           2055   ;        Nunchuck_reader.h:178: I2C_write(0x00);
068B 758200    2056            mov     dpl,#0x00
068E 120100    2057            lcall   _I2C_write
0691           2058   ;        Nunchuck_reader.h:179: I2C_write(0x00);
0691 758200    2059            mov     dpl,#0x00
0694 120100    2060            lcall   _I2C_write
0697           2061   ;        Nunchuck_reader.h:180: I2C_write(0x00);
0697 758200    2062            mov     dpl,#0x00
069A 120100    2063            lcall   _I2C_write
069D           2064   ;        Nunchuck_reader.h:181: I2C_write(0x00);
069D 758200    2065            mov     dpl,#0x00
06A0 120100    2066            lcall   _I2C_write
06A3           2067   ;        Nunchuck_reader.h:182: I2C_stop();
06A3 120100    2068            lcall   _I2C_stop
06A6           2069   ;        Nunchuck_reader.h:183: waitms(1);
06A6 900001    2070            mov     dptr,#0x0001
06A9 120100    2071            lcall   _waitms
06AC           2072   ;        Nunchuck_reader.h:185: I2C_start();
06AC 120100    2073            lcall   _I2C_start
06AF           2074   ;        Nunchuck_reader.h:186: I2C_write(0xA4);
06AF 7582A4    2075            mov     dpl,#0xA4
06B2 120100    2076            lcall   _I2C_write
06B5           2077   ;        Nunchuck_reader.h:187: I2C_write(0x40);
06B5 758240    2078            mov     dpl,#0x40
06B8 120100    2079            lcall   _I2C_write
06BB           2080   ;        Nunchuck_reader.h:188: I2C_write(0x00);
06BB 758200    2081            mov     dpl,#0x00
06BE 120100    2082            lcall   _I2C_write
06C1           2083   ;        Nunchuck_reader.h:189: I2C_write(0x00);
06C1 758200    2084            mov     dpl,#0x00
06C4 120100    2085            lcall   _I2C_write
06C7           2086   ;        Nunchuck_reader.h:190: I2C_write(0x00);
06C7 758200    2087            mov     dpl,#0x00
06CA 120100    2088            lcall   _I2C_write
06CD           2089   ;        Nunchuck_reader.h:191: I2C_write(0x00);
06CD 758200    2090            mov     dpl,#0x00
06D0 120100    2091            lcall   _I2C_write
06D3           2092   ;        Nunchuck_reader.h:192: I2C_write(0x00);
06D3 758200    2093            mov     dpl,#0x00
06D6 120100    2094            lcall   _I2C_write
06D9           2095   ;        Nunchuck_reader.h:193: I2C_write(0x00);
06D9 758200    2096            mov     dpl,#0x00
06DC 120100    2097            lcall   _I2C_write
06DF           2098   ;        Nunchuck_reader.h:194: I2C_stop();
06DF 120100    2099            lcall   _I2C_stop
06E2           2100   ;        Nunchuck_reader.h:195: waitms(1);
06E2 900001    2101            mov     dptr,#0x0001
06E5 120100    2102            lcall   _waitms
06E8           2103   ;        Nunchuck_reader.h:197: I2C_start();
06E8 120100    2104            lcall   _I2C_start
06EB           2105   ;        Nunchuck_reader.h:198: I2C_write(0xA4);
06EB 7582A4    2106            mov     dpl,#0xA4
06EE 120100    2107            lcall   _I2C_write
06F1           2108   ;        Nunchuck_reader.h:199: I2C_write(0x40);
06F1 758240    2109            mov     dpl,#0x40
06F4 120100    2110            lcall   _I2C_write
06F7           2111   ;        Nunchuck_reader.h:200: I2C_write(0x00);
06F7 758200    2112            mov     dpl,#0x00
06FA 120100    2113            lcall   _I2C_write
06FD           2114   ;        Nunchuck_reader.h:201: I2C_write(0x00);
06FD 758200    2115            mov     dpl,#0x00
0700 120100    2116            lcall   _I2C_write
0703           2117   ;        Nunchuck_reader.h:202: I2C_write(0x00);
0703 758200    2118            mov     dpl,#0x00
0706 120100    2119            lcall   _I2C_write
0709           2120   ;        Nunchuck_reader.h:203: I2C_write(0x00);
0709 758200    2121            mov     dpl,#0x00
070C 120100    2122            lcall   _I2C_write
070F           2123   ;        Nunchuck_reader.h:204: I2C_stop();
070F 120100    2124            lcall   _I2C_stop
0712           2125   ;        Nunchuck_reader.h:205: waitms(1);
0712 900001    2126            mov     dptr,#0x0001
0715 020100    2127            ljmp    _waitms
0718           2128   ;------------------------------------------------------------
0718           2129   ;Allocation info for local variables in function 'nunchuck_getdata'
0718           2130   ;------------------------------------------------------------
0718           2131   ;s                         Allocated to registers r2 r3 r4 
0718           2132   ;i                         Allocated to registers r5 
0718           2133   ;------------------------------------------------------------
0718           2134   ;        Nunchuck_reader.h:208: void nunchuck_getdata(unsigned char * s)
0718           2135   ;        -----------------------------------------
0718           2136   ;         function nunchuck_getdata
0718           2137   ;        -----------------------------------------
0718           2138   _nunchuck_getdata:
0718 AA82      2139            mov     r2,dpl
071A AB83      2140            mov     r3,dph
071C ACF0      2141            mov     r4,b
071E           2142   ;        Nunchuck_reader.h:213: I2C_start();
071E C002      2143            push    ar2
0720 C003      2144            push    ar3
0722 C004      2145            push    ar4
0724 120100    2146            lcall   _I2C_start
0727           2147   ;        Nunchuck_reader.h:214: I2C_write(0xA4);
0727 7582A4    2148            mov     dpl,#0xA4
072A 120100    2149            lcall   _I2C_write
072D           2150   ;        Nunchuck_reader.h:215: I2C_write(0x00);
072D 758200    2151            mov     dpl,#0x00
0730 120100    2152            lcall   _I2C_write
0733           2153   ;        Nunchuck_reader.h:216: I2C_stop();
0733 120100    2154            lcall   _I2C_stop
0736           2155   ;        Nunchuck_reader.h:217: waitms(3);       // 3 ms required to complete acquisition
0736 900003    2156            mov     dptr,#0x0003
0739 120100    2157            lcall   _waitms
073C           2158   ;        Nunchuck_reader.h:220: I2C_start();
073C 120100    2159            lcall   _I2C_start
073F           2160   ;        Nunchuck_reader.h:221: I2C_write(0xA5);
073F 7582A5    2161            mov     dpl,#0xA5
0742 120100    2162            lcall   _I2C_write
0745 D004      2163            pop     ar4
0747 D003      2164            pop     ar3
0749 D002      2165            pop     ar2
074B           2166   ;        Nunchuck_reader.h:224: for(i=0; i<CHARS_PER_LINE; i++)
074B 7D00      2167            mov     r5,#0x00
074D           2168   L034001?:
074D BD10E8    2169            cjne    r5,#0x10,L034010?
0750           2170   L034010?:
0750 5001      2171            jnc     L034004?
0752           2172   ;        Nunchuck_reader.h:226: s[i]=(I2C_read()^0x17)+0x17; // Read and decrypt
0752 ED        2173            mov     a,r5
0753 2A        2174            add     a,r2
0754 FE        2175            mov     r6,a
0755 E4        2176            clr     a
0756 3B        2177            addc    a,r3
0757 FF        2178            mov     r7,a
0758 8C00      2179            mov     ar0,r4
075A C002      2180            push    ar2
075C C003      2181            push    ar3
075E C004      2182            push    ar4
0760 C005      2183            push    ar5
0762 C006      2184            push    ar6
0764 C007      2185            push    ar7
0766 C000      2186            push    ar0
0768 120100    2187            lcall   _I2C_read
076B E582      2188            mov     a,dpl
076D D000      2189            pop     ar0
076F D007      2190            pop     ar7
0771 D006      2191            pop     ar6
0773 D005      2192            pop     ar5
0775 D004      2193            pop     ar4
0777 D003      2194            pop     ar3
0779 D002      2195            pop     ar2
077B 6417      2196            xrl     a,#0x17
077D 2417      2197            add     a,#0x17
077F F9        2198            mov     r1,a
0780 8E82      2199            mov     dpl,r6
0782 8F83      2200            mov     dph,r7
0784 88F0      2201            mov     b,r0
0786 120100    2202            lcall   __gptrput
0789           2203   ;        Nunchuck_reader.h:224: for(i=0; i<CHARS_PER_LINE; i++)
0789 0D        2204            inc     r5
078A 8001      2205            sjmp    L034001?
078C           2206   L034004?:
078C           2207   ;        Nunchuck_reader.h:228: ACK=0;
078C C2C1      2208            clr     _ACK
078E           2209   ;        Nunchuck_reader.h:229: I2C_stop();
078E 020100    2210            ljmp    _I2C_stop
0791           2211   ;------------------------------------------------------------
0791           2212   ;Allocation info for local variables in function 'get_speed'
0791           2213   ;------------------------------------------------------------
0791           2214   ;y_ax                      Allocated with name '_get_speed_PARM_2'
0791           2215   ;x_ax                      Allocated to registers r2 
0791           2216   ;spd                       Allocated to registers r4 
0791           2217   ;------------------------------------------------------------
0791           2218   ;        Nunchuck_reader.h:235: char get_speed(char x_ax, char y_ax){
0791           2219   ;        -----------------------------------------
0791           2220   ;         function get_speed
0791           2221   ;        -----------------------------------------
0791           2222   _get_speed:
0791 AA82      2223            mov     r2,dpl
0793           2224   ;        Nunchuck_reader.h:237: y_ax=abs(y_ax);
0793 E520      2225            mov     a,_get_speed_PARM_2
0795 FB        2226            mov     r3,a
0796 33        2227            rlc     a
0797 95E0      2228            subb    a,acc
0799 FC        2229            mov     r4,a
079A 8B82      2230            mov     dpl,r3
079C 8C83      2231            mov     dph,r4
079E C002      2232            push    ar2
07A0 120100    2233            lcall   _abs
07A3 AB82      2234            mov     r3,dpl
07A5 D002      2235            pop     ar2
07A7           2236   ;        Nunchuck_reader.h:238: x_ax=abs(x_ax);
07A7 EA        2237            mov     a,r2
07A8 FC        2238            mov     r4,a
07A9 33        2239            rlc     a
07AA 95E0      2240            subb    a,acc
07AC FD        2241            mov     r5,a
07AD 8C82      2242            mov     dpl,r4
07AF 8D83      2243            mov     dph,r5
07B1 C003      2244            push    ar3
07B3 120100    2245            lcall   _abs
07B6 AC82      2246            mov     r4,dpl
07B8 AD83      2247            mov     r5,dph
07BA D003      2248            pop     ar3
07BC 8C02      2249            mov     ar2,r4
07BE           2250   ;        Nunchuck_reader.h:240: if(y_ax>x_ax){
07BE C3        2251            clr     c
07BF EA        2252            mov     a,r2
07C0 6480      2253            xrl     a,#0x80
07C2 8BF0      2254            mov     b,r3
07C4 63F080    2255            xrl     b,#0x80
07C7 95F0      2256            subb    a,b
07C9 5001      2257            jnc     L035004?
07CB           2258   ;        Nunchuck_reader.h:241: spd=y_ax;
07CB 8B04      2259            mov     ar4,r3
07CD           2260   ;        Nunchuck_reader.h:242: if(y_ax>85)
07CD C3        2261            clr     c
07CE 74D5      2262            mov     a,#(0x55 ^ 0x80)
07D0 8BF0      2263            mov     b,r3
07D2 63F080    2264            xrl     b,#0x80
07D5 95F0      2265            subb    a,b
07D7 5001      2266            jnc     L035005?
07D9           2267   ;        Nunchuck_reader.h:243: spd=100;
07D9 7C64      2268            mov     r4,#0x64
07DB 8001      2269            sjmp    L035005?
07DD           2270   L035004?:
07DD           2271   ;        Nunchuck_reader.h:245: else spd=x_ax;
07DD 8A04      2272            mov     ar4,r2
07DF           2273   L035005?:
07DF           2274   ;        Nunchuck_reader.h:247: return spd/TRANSMISSION_SIZE;
07DF C2D5      2275            clr     F0
07E1 75F004    2276            mov     b,#0x04
07E4 EC        2277            mov     a,r4
07E5 30E7A8    2278            jnb     acc.7,L035012?
07E8 B2D5      2279            cpl     F0
07EA F4        2280            cpl     a
07EB 04        2281            inc     a
07EC           2282   L035012?:
07EC 84        2283            div     ab
07ED 30D5E8    2284            jnb     F0,L035013?
07F0 F4        2285            cpl     a
07F1 04        2286            inc     a
07F2           2287   L035013?:
07F2 F582      2288            mov     dpl,a
07F4 22        2289            ret
07F5           2290   ;------------------------------------------------------------
07F5           2291   ;Allocation info for local variables in function 'get_direction'
07F5           2292   ;------------------------------------------------------------
07F5           2293   ;y_axis                    Allocated with name '_get_direction_PARM_2'
07F5           2294   ;x_axis                    Allocated to registers r2 
07F5           2295   ;direction                 Allocated to registers r3 
07F5           2296   ;------------------------------------------------------------
07F5           2297   ;        Nunchuck_reader.h:250: char get_direction(char x_axis, char y_axis){
07F5           2298   ;        -----------------------------------------
07F5           2299   ;         function get_direction
07F5           2300   ;        -----------------------------------------
07F5           2301   _get_direction:
07F5 AA82      2302            mov     r2,dpl
07F7           2303   ;        Nunchuck_reader.h:252: char direction=north;
07F7 7B00      2304            mov     r3,#0x00
07F9           2305   ;        Nunchuck_reader.h:255: if(y_axis>0){
07F9 C3        2306            clr     c
07FA E4        2307            clr     a
07FB 6480      2308            xrl     a,#0x80
07FD 8550F0    2309            mov     b,_get_direction_PARM_2
0800 63F080    2310            xrl     b,#0x80
0803 95F0      2311            subb    a,b
0805 4001      2312            jc      L036130?
0807 020100    2313            ljmp    L036084?
080A           2314   L036130?:
080A           2315   ;        Nunchuck_reader.h:257: if ((x_axis<10)&&(x_axis>-10)){
080A C3        2316            clr     c
080B EA        2317            mov     a,r2
080C 6480      2318            xrl     a,#0x80
080E 948A      2319            subb    a,#0x8a
0810 5001      2320            jnc     L036038?
0812 C3        2321            clr     c
0813 7476      2322            mov     a,#(0xF6 ^ 0x80)
0815 8AF0      2323            mov     b,r2
0817 63F080    2324            xrl     b,#0x80
081A 95F0      2325            subb    a,b
081C 5001      2326            jnc     L036038?
081E           2327   ;        Nunchuck_reader.h:260: if(y_axis>5&&y_axis>-5){
081E C3        2328            clr     c
081F 7485      2329            mov     a,#(0x05 ^ 0x80)
0821 8550F0    2330            mov     b,_get_direction_PARM_2
0824 63F080    2331            xrl     b,#0x80
0827 95F0      2332            subb    a,b
0829 5001      2333            jnc     L036002?
082B C3        2334            clr     c
082C 747B      2335            mov     a,#(0xFB ^ 0x80)
082E 8550F0    2336            mov     b,_get_direction_PARM_2
0831 63F080    2337            xrl     b,#0x80
0834 95F0      2338            subb    a,b
0836 5001      2339            jnc     L036002?
0838           2340   ;        Nunchuck_reader.h:261: direction=north;
0838 7B00      2341            mov     r3,#0x00
083A 020100    2342            ljmp    L036085?
083D           2343   L036002?:
083D           2344   ;        Nunchuck_reader.h:263: else direction=north;
083D 7B00      2345            mov     r3,#0x00
083F 020100    2346            ljmp    L036085?
0842           2347   L036038?:
0842           2348   ;        Nunchuck_reader.h:267: else if(x_axis>10&&x_axis<=30){
0842 C3        2349            clr     c
0843 748A      2350            mov     a,#(0x0A ^ 0x80)
0845 8AF0      2351            mov     b,r2
0847 63F080    2352            xrl     b,#0x80
084A 95F0      2353            subb    a,b
084C 5001      2354            jnc     L036034?
084E C3        2355            clr     c
084F 749E      2356            mov     a,#(0x1E ^ 0x80)
0851 8AF0      2357            mov     b,r2
0853 63F080    2358            xrl     b,#0x80
0856 95F0      2359            subb    a,b
0858 4001      2360            jc      L036034?
085A           2361   ;        Nunchuck_reader.h:268: direction=NNE;
085A 7B02      2362            mov     r3,#0x02
085C 020100    2363            ljmp    L036085?
085F           2364   L036034?:
085F           2365   ;        Nunchuck_reader.h:270: else if(x_axis>30&&x_axis<=50){
085F C3        2366            clr     c
0860 749E      2367            mov     a,#(0x1E ^ 0x80)
0862 8AF0      2368            mov     b,r2
0864 63F080    2369            xrl     b,#0x80
0867 95F0      2370            subb    a,b
0869 5001      2371            jnc     L036030?
086B C3        2372            clr     c
086C 74B2      2373            mov     a,#(0x32 ^ 0x80)
086E 8AF0      2374            mov     b,r2
0870 63F080    2375            xrl     b,#0x80
0873 95F0      2376            subb    a,b
0875 4001      2377            jc      L036030?
0877           2378   ;        Nunchuck_reader.h:271: direction=NE;
0877 7B04      2379            mov     r3,#0x04
0879 020100    2380            ljmp    L036085?
087C           2381   L036030?:
087C           2382   ;        Nunchuck_reader.h:273: else if(x_axis>50&&x_axis<=70){
087C C3        2383            clr     c
087D 74B2      2384            mov     a,#(0x32 ^ 0x80)
087F 8AF0      2385            mov     b,r2
0881 63F080    2386            xrl     b,#0x80
0884 95F0      2387            subb    a,b
0886 5001      2388            jnc     L036026?
0888 C3        2389            clr     c
0889 74C6      2390            mov     a,#(0x46 ^ 0x80)
088B 8AF0      2391            mov     b,r2
088D 63F080    2392            xrl     b,#0x80
0890 95F0      2393            subb    a,b
0892 4001      2394            jc      L036026?
0894           2395   ;        Nunchuck_reader.h:274: direction=NEE;
0894 7B06      2396            mov     r3,#0x06
0896 020100    2397            ljmp    L036085?
0899           2398   L036026?:
0899           2399   ;        Nunchuck_reader.h:276: else if(x_axis>70&&x_axis<=100){
0899 C3        2400            clr     c
089A 74C6      2401            mov     a,#(0x46 ^ 0x80)
089C 8AF0      2402            mov     b,r2
089E 63F080    2403            xrl     b,#0x80
08A1 95F0      2404            subb    a,b
08A3 5001      2405            jnc     L036022?
08A5 C3        2406            clr     c
08A6 74E4      2407            mov     a,#(0x64 ^ 0x80)
08A8 8AF0      2408            mov     b,r2
08AA 63F080    2409            xrl     b,#0x80
08AD 95F0      2410            subb    a,b
08AF 4001      2411            jc      L036022?
08B1           2412   ;        Nunchuck_reader.h:277: direction=east;
08B1 7B08      2413            mov     r3,#0x08
08B3 020100    2414            ljmp    L036085?
08B6           2415   L036022?:
08B6           2416   ;        Nunchuck_reader.h:280: else if(x_axis<-10&&x_axis>=-30){
08B6 C3        2417            clr     c
08B7 EA        2418            mov     a,r2
08B8 6480      2419            xrl     a,#0x80
08BA 9476      2420            subb    a,#0x76
08BC 5001      2421            jnc     L036018?
08BE C3        2422            clr     c
08BF EA        2423            mov     a,r2
08C0 6480      2424            xrl     a,#0x80
08C2 9462      2425            subb    a,#0x62
08C4 4001      2426            jc      L036018?
08C6           2427   ;        Nunchuck_reader.h:281: direction=NNW;
08C6 7B03      2428            mov     r3,#0x03
08C8 020100    2429            ljmp    L036085?
08CB           2430   L036018?:
08CB           2431   ;        Nunchuck_reader.h:283: else if(x_axis<-30&&x_axis>=-50){
08CB C3        2432            clr     c
08CC EA        2433            mov     a,r2
08CD 6480      2434            xrl     a,#0x80
08CF 9462      2435            subb    a,#0x62
08D1 5001      2436            jnc     L036014?
08D3 C3        2437            clr     c
08D4 EA        2438            mov     a,r2
08D5 6480      2439            xrl     a,#0x80
08D7 944E      2440            subb    a,#0x4e
08D9 4001      2441            jc      L036014?
08DB           2442   ;        Nunchuck_reader.h:284: direction=NW;
08DB 7B05      2443            mov     r3,#0x05
08DD 020100    2444            ljmp    L036085?
08E0           2445   L036014?:
08E0           2446   ;        Nunchuck_reader.h:286: else if(x_axis<-50&&x_axis>=-70){
08E0 C3        2447            clr     c
08E1 EA        2448            mov     a,r2
08E2 6480      2449            xrl     a,#0x80
08E4 944E      2450            subb    a,#0x4e
08E6 5001      2451            jnc     L036010?
08E8 C3        2452            clr     c
08E9 EA        2453            mov     a,r2
08EA 6480      2454            xrl     a,#0x80
08EC 943A      2455            subb    a,#0x3a
08EE 4001      2456            jc      L036010?
08F0           2457   ;        Nunchuck_reader.h:287: direction=NWW;
08F0 7B07      2458            mov     r3,#0x07
08F2 020100    2459            ljmp    L036085?
08F5           2460   L036010?:
08F5           2461   ;        Nunchuck_reader.h:289: else if(x_axis<-70&&x_axis>=-110){
08F5 C3        2462            clr     c
08F6 EA        2463            mov     a,r2
08F7 6480      2464            xrl     a,#0x80
08F9 943A      2465            subb    a,#0x3a
08FB 5001      2466            jnc     L036006?
08FD C3        2467            clr     c
08FE EA        2468            mov     a,r2
08FF 6480      2469            xrl     a,#0x80
0901 9412      2470            subb    a,#0x12
0903 4001      2471            jc      L036006?
0905           2472   ;        Nunchuck_reader.h:290: direction=west;
0905 7B09      2473            mov     r3,#0x09
0907 020100    2474            ljmp    L036085?
090A           2475   L036006?:
090A           2476   ;        Nunchuck_reader.h:293: direction=north;
090A 7B00      2477            mov     r3,#0x00
090C 020100    2478            ljmp    L036085?
090F           2479   L036084?:
090F           2480   ;        Nunchuck_reader.h:297: else if (y_axis<0){
090F E550      2481            mov     a,_get_direction_PARM_2
0911 20E768    2482            jb      acc.7,L036151?
0914 020100    2483            ljmp    L036085?
0917           2484   L036151?:
0917           2485   ;        Nunchuck_reader.h:299: if ((x_axis<10)&&(x_axis>-10)){
0917 C3        2486            clr     c
0918 EA        2487            mov     a,r2
0919 6480      2488            xrl     a,#0x80
091B 948A      2489            subb    a,#0x8a
091D 5001      2490            jnc     L036078?
091F C3        2491            clr     c
0920 7476      2492            mov     a,#(0xF6 ^ 0x80)
0922 8AF0      2493            mov     b,r2
0924 63F080    2494            xrl     b,#0x80
0927 95F0      2495            subb    a,b
0929 5001      2496            jnc     L036078?
092B           2497   ;        Nunchuck_reader.h:302: if(y_axis>5&&y_axis>-5){
092B C3        2498            clr     c
092C 7485      2499            mov     a,#(0x05 ^ 0x80)
092E 8550F0    2500            mov     b,_get_direction_PARM_2
0931 63F080    2501            xrl     b,#0x80
0934 95F0      2502            subb    a,b
0936 5001      2503            jnc     L036042?
0938 C3        2504            clr     c
0939 747B      2505            mov     a,#(0xFB ^ 0x80)
093B 8550F0    2506            mov     b,_get_direction_PARM_2
093E 63F080    2507            xrl     b,#0x80
0941 95F0      2508            subb    a,b
0943 5001      2509            jnc     L036042?
0945           2510   ;        Nunchuck_reader.h:303: direction=south;
0945 7B01      2511            mov     r3,#0x01
0947 020100    2512            ljmp    L036085?
094A           2513   L036042?:
094A           2514   ;        Nunchuck_reader.h:305: else direction=south;
094A 7B01      2515            mov     r3,#0x01
094C 020100    2516            ljmp    L036085?
094F           2517   L036078?:
094F           2518   ;        Nunchuck_reader.h:309: else if(x_axis>10&&x_axis<=30){
094F C3        2519            clr     c
0950 748A      2520            mov     a,#(0x0A ^ 0x80)
0952 8AF0      2521            mov     b,r2
0954 63F080    2522            xrl     b,#0x80
0957 95F0      2523            subb    a,b
0959 5001      2524            jnc     L036074?
095B C3        2525            clr     c
095C 749E      2526            mov     a,#(0x1E ^ 0x80)
095E 8AF0      2527            mov     b,r2
0960 63F080    2528            xrl     b,#0x80
0963 95F0      2529            subb    a,b
0965 4001      2530            jc      L036074?
0967           2531   ;        Nunchuck_reader.h:310: direction=SSE;
0967 7B0A      2532            mov     r3,#0x0A
0969 020100    2533            ljmp    L036085?
096C           2534   L036074?:
096C           2535   ;        Nunchuck_reader.h:312: else if(x_axis>30&&x_axis<=50){
096C C3        2536            clr     c
096D 749E      2537            mov     a,#(0x1E ^ 0x80)
096F 8AF0      2538            mov     b,r2
0971 63F080    2539            xrl     b,#0x80
0974 95F0      2540            subb    a,b
0976 5001      2541            jnc     L036070?
0978 C3        2542            clr     c
0979 74B2      2543            mov     a,#(0x32 ^ 0x80)
097B 8AF0      2544            mov     b,r2
097D 63F080    2545            xrl     b,#0x80
0980 95F0      2546            subb    a,b
0982 4001      2547            jc      L036070?
0984           2548   ;        Nunchuck_reader.h:313: direction=SE;
0984 7B0C      2549            mov     r3,#0x0C
0986 020100    2550            ljmp    L036085?
0989           2551   L036070?:
0989           2552   ;        Nunchuck_reader.h:315: else if(x_axis>50&&x_axis<=70){
0989 C3        2553            clr     c
098A 74B2      2554            mov     a,#(0x32 ^ 0x80)
098C 8AF0      2555            mov     b,r2
098E 63F080    2556            xrl     b,#0x80
0991 95F0      2557            subb    a,b
0993 5001      2558            jnc     L036066?
0995 C3        2559            clr     c
0996 74C6      2560            mov     a,#(0x46 ^ 0x80)
0998 8AF0      2561            mov     b,r2
099A 63F080    2562            xrl     b,#0x80
099D 95F0      2563            subb    a,b
099F 4001      2564            jc      L036066?
09A1           2565   ;        Nunchuck_reader.h:316: direction=SEE;
09A1 7B0E      2566            mov     r3,#0x0E
09A3 020100    2567            ljmp    L036085?
09A6           2568   L036066?:
09A6           2569   ;        Nunchuck_reader.h:318: else if(x_axis>70&&x_axis<=100){
09A6 C3        2570            clr     c
09A7 74C6      2571            mov     a,#(0x46 ^ 0x80)
09A9 8AF0      2572            mov     b,r2
09AB 63F080    2573            xrl     b,#0x80
09AE 95F0      2574            subb    a,b
09B0 5001      2575            jnc     L036062?
09B2 C3        2576            clr     c
09B3 74E4      2577            mov     a,#(0x64 ^ 0x80)
09B5 8AF0      2578            mov     b,r2
09B7 63F080    2579            xrl     b,#0x80
09BA 95F0      2580            subb    a,b
09BC 4001      2581            jc      L036062?
09BE           2582   ;        Nunchuck_reader.h:319: direction=east;
09BE 7B08      2583            mov     r3,#0x08
09C0 8001      2584            sjmp    L036085?
09C2           2585   L036062?:
09C2           2586   ;        Nunchuck_reader.h:322: else if(x_axis<-10&&x_axis>=-30){
09C2 C3        2587            clr     c
09C3 EA        2588            mov     a,r2
09C4 6480      2589            xrl     a,#0x80
09C6 9476      2590            subb    a,#0x76
09C8 5001      2591            jnc     L036058?
09CA C3        2592            clr     c
09CB EA        2593            mov     a,r2
09CC 6480      2594            xrl     a,#0x80
09CE 9462      2595            subb    a,#0x62
09D0 4001      2596            jc      L036058?
09D2           2597   ;        Nunchuck_reader.h:323: direction=SSW;
09D2 7B0B      2598            mov     r3,#0x0B
09D4 8001      2599            sjmp    L036085?
09D6           2600   L036058?:
09D6           2601   ;        Nunchuck_reader.h:325: else if(x_axis<-30&&x_axis>=-50){
09D6 C3        2602            clr     c
09D7 EA        2603            mov     a,r2
09D8 6480      2604            xrl     a,#0x80
09DA 9462      2605            subb    a,#0x62
09DC 5001      2606            jnc     L036054?
09DE C3        2607            clr     c
09DF EA        2608            mov     a,r2
09E0 6480      2609            xrl     a,#0x80
09E2 944E      2610            subb    a,#0x4e
09E4 4001      2611            jc      L036054?
09E6           2612   ;        Nunchuck_reader.h:326: direction=SW;
09E6 7B0C      2613            mov     r3,#0x0C
09E8 8001      2614            sjmp    L036085?
09EA           2615   L036054?:
09EA           2616   ;        Nunchuck_reader.h:328: else if(x_axis<-50&&x_axis>=-80){
09EA C3        2617            clr     c
09EB EA        2618            mov     a,r2
09EC 6480      2619            xrl     a,#0x80
09EE 944E      2620            subb    a,#0x4e
09F0 5001      2621            jnc     L036050?
09F2 C3        2622            clr     c
09F3 EA        2623            mov     a,r2
09F4 6480      2624            xrl     a,#0x80
09F6 9430      2625            subb    a,#0x30
09F8 4001      2626            jc      L036050?
09FA           2627   ;        Nunchuck_reader.h:329: direction=SWW;
09FA 7B0F      2628            mov     r3,#0x0F
09FC 8001      2629            sjmp    L036085?
09FE           2630   L036050?:
09FE           2631   ;        Nunchuck_reader.h:331: else if(x_axis<-80&&x_axis>=-110){
09FE C3        2632            clr     c
09FF EA        2633            mov     a,r2
0A00 6480      2634            xrl     a,#0x80
0A02 9430      2635            subb    a,#0x30
0A04 5001      2636            jnc     L036046?
0A06 C3        2637            clr     c
0A07 EA        2638            mov     a,r2
0A08 6480      2639            xrl     a,#0x80
0A0A 9412      2640            subb    a,#0x12
0A0C 4001      2641            jc      L036046?
0A0E           2642   ;        Nunchuck_reader.h:332: direction=west;
0A0E 7B09      2643            mov     r3,#0x09
0A10 8001      2644            sjmp    L036085?
0A12           2645   L036046?:
0A12           2646   ;        Nunchuck_reader.h:335: direction=north;
0A12 7B00      2647            mov     r3,#0x00
0A14           2648   L036085?:
0A14           2649   ;        Nunchuck_reader.h:341: return direction;
0A14 8B82      2650            mov     dpl,r3
0A16 22        2651            ret
0A17           2652   ;------------------------------------------------------------
0A17           2653   ;Allocation info for local variables in function 'read_nunchuck'
0A17           2654   ;------------------------------------------------------------
0A17           2655   ;speed                     Allocated with name '_read_nunchuck_PARM_2'
0A17           2656   ;rbuf                      Allocated with name '_read_nunchuck_PARM_3'
0A17           2657   ;off_x                     Allocated with name '_read_nunchuck_PARM_4'
0A17           2658   ;off_y                     Allocated with name '_read_nunchuck_PARM_5'
0A17           2659   ;direction                 Allocated with name '_read_nunchuck_direction_1_167'
0A17           2660   ;joy_x                     Allocated with name '_read_nunchuck_joy_x_1_168'
0A17           2661   ;joy_y                     Allocated with name '_read_nunchuck_joy_y_1_168'
0A17           2662   ;sloc0                     Allocated with name '_read_nunchuck_sloc0_1_0'
0A17           2663   ;------------------------------------------------------------
0A17           2664   ;        Nunchuck_reader.h:346: void read_nunchuck(char * direction, char * speed, char * rbuf, int off_x, int off_y)
0A17           2665   ;        -----------------------------------------
0A17           2666   ;         function read_nunchuck
0A17           2667   ;        -----------------------------------------
0A17           2668   _read_nunchuck:
0A17 858250    2669            mov     _read_nunchuck_direction_1_167,dpl
0A1A 858351    2670            mov     (_read_nunchuck_direction_1_167 + 1),dph
0A1D 85F052    2671            mov     (_read_nunchuck_direction_1_167 + 2),b
0A20           2672   ;        Nunchuck_reader.h:366: nunchuck_getdata(rbuf);
0A20 AD80      2673            mov     r5,_read_nunchuck_PARM_3
0A22 AE81      2674            mov     r6,(_read_nunchuck_PARM_3 + 1)
0A24 AF82      2675            mov     r7,(_read_nunchuck_PARM_3 + 2)
0A26 8D82      2676            mov     dpl,r5
0A28 8E83      2677            mov     dph,r6
0A2A 8FF0      2678            mov     b,r7
0A2C 120100    2679            lcall   _nunchuck_getdata
0A2F           2680   ;        Nunchuck_reader.h:371: joy_x=(int)rbuf[0]-128-off_x;
0A2F AD80      2681            mov     r5,_read_nunchuck_PARM_3
0A31 AE81      2682            mov     r6,(_read_nunchuck_PARM_3 + 1)
0A33 AF82      2683            mov     r7,(_read_nunchuck_PARM_3 + 2)
0A35 8D82      2684            mov     dpl,r5
0A37 8E83      2685            mov     dph,r6
0A39 8FF0      2686            mov     b,r7
0A3B 120100    2687            lcall   __gptrget
0A3E F8        2688            mov     r0,a
0A3F 33        2689            rlc     a
0A40 95E0      2690            subb    a,acc
0A42 E8        2691            mov     a,r0
0A43 2480      2692            add     a,#0x80
0A45 F8        2693            mov     r0,a
0A46 A930      2694            mov     r1,_read_nunchuck_PARM_4
0A48 C3        2695            clr     c
0A49 99        2696            subb    a,r1
0A4A F5A0      2697            mov     _read_nunchuck_joy_x_1_168,a
0A4C           2698   ;        Nunchuck_reader.h:372: joy_y=(int)rbuf[1]-128-off_y;
0A4C 7401      2699            mov     a,#0x01
0A4E 2D        2700            add     a,r5
0A4F F9        2701            mov     r1,a
0A50 E4        2702            clr     a
0A51 3E        2703            addc    a,r6
0A52 FA        2704            mov     r2,a
0A53 8F03      2705            mov     ar3,r7
0A55 8982      2706            mov     dpl,r1
0A57 8A83      2707            mov     dph,r2
0A59 8BF0      2708            mov     b,r3
0A5B 120100    2709            lcall   __gptrget
0A5E F9        2710            mov     r1,a
0A5F 33        2711            rlc     a
0A60 95E0      2712            subb    a,acc
0A62 E9        2713            mov     a,r1
0A63 2480      2714            add     a,#0x80
0A65 F9        2715            mov     r1,a
0A66 AAE0      2716            mov     r2,_read_nunchuck_PARM_5
0A68 C3        2717            clr     c
0A69 9A        2718            subb    a,r2
0A6A F5F0      2719            mov     _read_nunchuck_joy_y_1_168,a
0A6C           2720   ;        Nunchuck_reader.h:377: but1=(rbuf[5] & 0x01)?1:0;
0A6C 7405      2721            mov     a,#0x05
0A6E 2D        2722            add     a,r5
0A6F FD        2723            mov     r5,a
0A70 E4        2724            clr     a
0A71 3E        2725            addc    a,r6
0A72 FE        2726            mov     r6,a
0A73 8D82      2727            mov     dpl,r5
0A75 8E83      2728            mov     dph,r6
0A77 8FF0      2729            mov     b,r7
0A79 120100    2730            lcall   __gptrget
0A7C FD        2731            mov     r5,a
0A7D 13        2732            rrc     a
0A7E 9270      2733            mov     _read_nunchuck_but1_1_168,c
0A80           2734   ;        Nunchuck_reader.h:378: but2=(rbuf[5] & 0x02)?1:0;
0A80 ED        2735            mov     a,r5
0A81 A2E1      2736            mov     c,acc.1
0A83 92C0      2737            mov     _read_nunchuck_but2_1_168,c
0A85           2738   ;        Nunchuck_reader.h:387: but1?'1':'0', but2?'1':'0', joy_x, joy_y);
0A85 E5F0      2739            mov     a,_read_nunchuck_joy_y_1_168
0A87 FB        2740            mov     r3,a
0A88 33        2741            rlc     a
0A89 95E0      2742            subb    a,acc
0A8B FC        2743            mov     r4,a
0A8C E5A0      2744            mov     a,_read_nunchuck_joy_x_1_168
0A8E FD        2745            mov     r5,a
0A8F 33        2746            rlc     a
0A90 95E0      2747            subb    a,acc
0A92 FE        2748            mov     r6,a
0A93 30C028    2749            jnb     _read_nunchuck_but2_1_168,L037003?
0A96 7F31      2750            mov     r7,#0x31
0A98 8001      2751            sjmp    L037004?
0A9A           2752   L037003?:
0A9A 7F30      2753            mov     r7,#0x30
0A9C           2754   L037004?:
0A9C EF        2755            mov     a,r7
0A9D 33        2756            rlc     a
0A9E 95E0      2757            subb    a,acc
0AA0 F9        2758            mov     r1,a
0AA1 3070A8    2759            jnb     _read_nunchuck_but1_1_168,L037005?
0AA4 754031    2760            mov     _read_nunchuck_sloc0_1_0,#0x31
0AA7 8001      2761            sjmp    L037006?
0AA9           2762   L037005?:
0AA9 754030    2763            mov     _read_nunchuck_sloc0_1_0,#0x30
0AAC           2764   L037006?:
0AAC E540      2765            mov     a,_read_nunchuck_sloc0_1_0
0AAE FA        2766            mov     r2,a
0AAF 33        2767            rlc     a
0AB0 95E0      2768            subb    a,acc
0AB2 F8        2769            mov     r0,a
0AB3           2770   ;        Nunchuck_reader.h:386: printf("Buttons(Z:%c, C:%c) Joystick(%4d, %4d)\r",
0AB3 C003      2771            push    ar3
0AB5 C004      2772            push    ar4
0AB7 C005      2773            push    ar5
0AB9 C006      2774            push    ar6
0ABB C007      2775            push    ar7
0ABD C001      2776            push    ar1
0ABF C002      2777            push    ar2
0AC1 C000      2778            push    ar0
0AC3 7428      2779            mov     a,#__str_9
0AC5 C0E0      2780            push    acc
0AC7 74E3      2781            mov     a,#(__str_9 >> 8)
0AC9 C0E0      2782            push    acc
0ACB 7480      2783            mov     a,#0x80
0ACD C0E0      2784            push    acc
0ACF 120100    2785            lcall   _printf
0AD2 E581      2786            mov     a,sp
0AD4 24F5      2787            add     a,#0xf5
0AD6 F581      2788            mov     sp,a
0AD8           2789   ;        Nunchuck_reader.h:388: waitms(100); //determine if we want to change this length
0AD8 900064    2790            mov     dptr,#0x0064
0ADB 120100    2791            lcall   _waitms
0ADE           2792   ;        Nunchuck_reader.h:393: *direction=get_direction(joy_x, joy_y);
0ADE 85F050    2793            mov     _get_direction_PARM_2,_read_nunchuck_joy_y_1_168
0AE1 85A082    2794            mov     dpl,_read_nunchuck_joy_x_1_168
0AE4 120100    2795            lcall   _get_direction
0AE7 AA82      2796            mov     r2,dpl
0AE9 855082    2797            mov     dpl,_read_nunchuck_direction_1_167
0AEC 855183    2798            mov     dph,(_read_nunchuck_direction_1_167 + 1)
0AEF 8552F0    2799            mov     b,(_read_nunchuck_direction_1_167 + 2)
0AF2 EA        2800            mov     a,r2
0AF3 120100    2801            lcall   __gptrput
0AF6           2802   ;        Nunchuck_reader.h:394: *speed = get_speed(joy_x, joy_y);
0AF6 AAD0      2803            mov     r2,_read_nunchuck_PARM_2
0AF8 ABD1      2804            mov     r3,(_read_nunchuck_PARM_2 + 1)
0AFA ACD2      2805            mov     r4,(_read_nunchuck_PARM_2 + 2)
0AFC 85F020    2806            mov     _get_speed_PARM_2,_read_nunchuck_joy_y_1_168
0AFF 85A082    2807            mov     dpl,_read_nunchuck_joy_x_1_168
0B02 C002      2808            push    ar2
0B04 C003      2809            push    ar3
0B06 C004      2810            push    ar4
0B08 120100    2811            lcall   _get_speed
0B0B AD82      2812            mov     r5,dpl
0B0D D004      2813            pop     ar4
0B0F D003      2814            pop     ar3
0B11 D002      2815            pop     ar2
0B13 8A82      2816            mov     dpl,r2
0B15 8B83      2817            mov     dph,r3
0B17 8CF0      2818            mov     b,r4
0B19 ED        2819            mov     a,r5
0B1A 020100    2820            ljmp    __gptrput
0B1D           2821   ;------------------------------------------------------------
0B1D           2822   ;Allocation info for local variables in function '_c51_external_startup'
0B1D           2823   ;------------------------------------------------------------
0B1D           2824   ;------------------------------------------------------------
0B1D           2825   ;        Transmitter_src.c:16: char _c51_external_startup (void)
0B1D           2826   ;        -----------------------------------------
0B1D           2827   ;         function _c51_external_startup
0B1D           2828   ;        -----------------------------------------
0B1D           2829   __c51_external_startup:
0B1D           2830   ;        Transmitter_src.c:20: SFRPAGE = 0x00;
0B1D 75A700    2831            mov     _SFRPAGE,#0x00
0B20           2832   ;        Transmitter_src.c:21: WDTCN = 0xDE; //First key
0B20 7597DE    2833            mov     _WDTCN,#0xDE
0B23           2834   ;        Transmitter_src.c:22: WDTCN = 0xAD; //Second key
0B23 7597AD    2835            mov     _WDTCN,#0xAD
0B26           2836   ;        Transmitter_src.c:24: VDM0CN |= 0x80;  // enable VDD mon
0B26 43FF80    2837            orl     _VDM0CN,#0x80
0B29           2838   ;        Transmitter_src.c:25: RSTSRC = 0x02;
0B29 75EF02    2839            mov     _RSTSRC,#0x02
0B2C           2840   ;        Transmitter_src.c:32: SFRPAGE = 0x10;
0B2C 75A710    2841            mov     _SFRPAGE,#0x10
0B2F           2842   ;        Transmitter_src.c:33: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0B2F 75C120    2843            mov     _PFE0CN,#0x20
0B32           2844   ;        Transmitter_src.c:34: SFRPAGE = 0x00;
0B32 75A700    2845            mov     _SFRPAGE,#0x00
0B35           2846   ;        Transmitter_src.c:55: CLKSEL = 0x00;
0B35 75A900    2847            mov     _CLKSEL,#0x00
0B38           2848   ;        Transmitter_src.c:56: CLKSEL = 0x00;
0B38 75A900    2849            mov     _CLKSEL,#0x00
0B3B           2850   ;        Transmitter_src.c:57: while ((CLKSEL & 0x80) == 0);
0B3B           2851   L038001?:
0B3B E5A9      2852            mov     a,_CLKSEL
0B3D 30E768    2853            jnb     acc.7,L038001?
0B40           2854   ;        Transmitter_src.c:58: CLKSEL = 0x03;
0B40 75A903    2855            mov     _CLKSEL,#0x03
0B43           2856   ;        Transmitter_src.c:59: CLKSEL = 0x03;
0B43 75A903    2857            mov     _CLKSEL,#0x03
0B46           2858   ;        Transmitter_src.c:60: while ((CLKSEL & 0x80) == 0);
0B46           2859   L038004?:
0B46 E5A9      2860            mov     a,_CLKSEL
0B48 30E7A8    2861            jnb     acc.7,L038004?
0B4B           2862   ;        Transmitter_src.c:71: SCON0 = 0x10;
0B4B 759810    2863            mov     _SCON0,#0x10
0B4E           2864   ;        Transmitter_src.c:72: CKCON0 |= 0b_0000_0000 ; // Timer 1 uses the system clock divided by 12.
0B4E 858E8E    2865            mov     _CKCON0,_CKCON0
0B51           2866   ;        Transmitter_src.c:73: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0B51 758DE6    2867            mov     _TH1,#0xE6
0B54           2868   ;        Transmitter_src.c:74: TL1 = TH1;      // Init Timer1
0B54 858D8B    2869            mov     _TL1,_TH1
0B57           2870   ;        Transmitter_src.c:75: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0B57 53890F    2871            anl     _TMOD,#0x0F
0B5A           2872   ;        Transmitter_src.c:76: TMOD |=  0x20;                       
0B5A 438920    2873            orl     _TMOD,#0x20
0B5D           2874   ;        Transmitter_src.c:77: TR1 = 1; // START Timer1
0B5D D28E      2875            setb    _TR1
0B5F           2876   ;        Transmitter_src.c:78: TI = 1;  // Indicate TX0 ready
0B5F D299      2877            setb    _TI
0B61           2878   ;        Transmitter_src.c:80: P0MDOUT |= 0x14; // Enable UART0 TX as push-pull output and UART1 Tx (pin 0.2)
0B61 43A414    2879            orl     _P0MDOUT,#0x14
0B64           2880   ;        Transmitter_src.c:81: P1MDOUT |= 0xff; // Enable Push/Pull on port 1
0B64 E5A5      2881            mov     a,_P1MDOUT
0B66 75A5FF    2882            mov     _P1MDOUT,#0xFF
0B69           2883   ;        Transmitter_src.c:83: XBR0     = 0b_0000_0101; // Enable UART0 on P0.4(TX) and P0.5(RX) and SMB0 I/O on (0.0 SDA) and (0.1 SCL)               
0B69 75E105    2884            mov     _XBR0,#0x05
0B6C           2885   ;        Transmitter_src.c:84: XBR1     = 0x00; // Enable T0 on P0.0
0B6C 75E200    2886            mov     _XBR1,#0x00
0B6F           2887   ;        Transmitter_src.c:85: XBR2     = 0x41; // Enable crossbar and weak pull-ups .... (page 110) may need to set BIT0 to enable UART1 IO (0.2 Tx) and 0.3 RX
0B6F 75E341    2888            mov     _XBR2,#0x41
0B72           2889   ;        Transmitter_src.c:87: Timer0_init();
0B72 120100    2890            lcall   _Timer0_init
0B75           2891   ;        Transmitter_src.c:89: EA = 1;
0B75 D2AF      2892            setb    _EA
0B77           2893   ;        Transmitter_src.c:92: SMB0CF = 0b_0101_1100; //INH | EXTHOLD | SMBTOE | SMBFTE ;
0B77 75C15C    2894            mov     _SMB0CF,#0x5C
0B7A           2895   ;        Transmitter_src.c:93: SMB0CF |= 0b_1000_0000;  // Enable SMBus
0B7A 43C180    2896            orl     _SMB0CF,#0x80
0B7D           2897   ;        Transmitter_src.c:96: return 0;
0B7D 758200    2898            mov     dpl,#0x00
0B80 22        2899            ret
0B81           2900   ;------------------------------------------------------------
0B81           2901   ;Allocation info for local variables in function 'getsn'
0B81           2902   ;------------------------------------------------------------
0B81           2903   ;len                       Allocated with name '_getsn_PARM_2'
0B81           2904   ;buff                      Allocated with name '_getsn_buff_1_171'
0B81           2905   ;j                         Allocated with name '_getsn_sloc0_1_0'
0B81           2906   ;c                         Allocated to registers r3 
0B81           2907   ;sloc0                     Allocated with name '_getsn_sloc0_1_0'
0B81           2908   ;------------------------------------------------------------
0B81           2909   ;        Transmitter_src.c:100: int getsn (char * buff, int len){
0B81           2910   ;        -----------------------------------------
0B81           2911   ;         function getsn
0B81           2912   ;        -----------------------------------------
0B81           2913   _getsn:
0B81 858290    2914            mov     _getsn_buff_1_171,dpl
0B84 858391    2915            mov     (_getsn_buff_1_171 + 1),dph
0B87 85F092    2916            mov     (_getsn_buff_1_171 + 2),b
0B8A           2917   ;        Transmitter_src.c:105: for(j=0; j<(len-1); j++)
0B8A E4        2918            clr     a
0B8B F5E0      2919            mov     _getsn_sloc0_1_0,a
0B8D F5E1      2920            mov     (_getsn_sloc0_1_0 + 1),a
0B8F E590      2921            mov     a,_getsn_PARM_2
0B91 24FF      2922            add     a,#0xff
0B93 FF        2923            mov     r7,a
0B94 E591      2924            mov     a,(_getsn_PARM_2 + 1)
0B96 34FF      2925            addc    a,#0xff
0B98 F8        2926            mov     r0,a
0B99 7900      2927            mov     r1,#0x00
0B9B 7A00      2928            mov     r2,#0x00
0B9D           2929   L039005?:
0B9D C3        2930            clr     c
0B9E E9        2931            mov     a,r1
0B9F 9F        2932            subb    a,r7
0BA0 EA        2933            mov     a,r2
0BA1 6480      2934            xrl     a,#0x80
0BA3 88F0      2935            mov     b,r0
0BA5 63F080    2936            xrl     b,#0x80
0BA8 95F0      2937            subb    a,b
0BAA 5001      2938            jnc     L039008?
0BAC           2939   ;        Transmitter_src.c:107: c=getchar();
0BAC C002      2940            push    ar2
0BAE C007      2941            push    ar7
0BB0 C000      2942            push    ar0
0BB2 C001      2943            push    ar1
0BB4 120100    2944            lcall   _getchar
0BB7 AB82      2945            mov     r3,dpl
0BB9 D001      2946            pop     ar1
0BBB D000      2947            pop     ar0
0BBD D007      2948            pop     ar7
0BBF D002      2949            pop     ar2
0BC1           2950   ;        Transmitter_src.c:108: if ( (c=='\n') || (c=='\r') )
0BC1 BB0AA8    2951            cjne    r3,#0x0A,L039015?
0BC4 8001      2952            sjmp    L039001?
0BC6           2953   L039015?:
0BC6 BB0D28    2954            cjne    r3,#0x0D,L039002?
0BC9           2955   L039001?:
0BC9           2956   ;        Transmitter_src.c:110: buff[j]=0;
0BC9 E5E0      2957            mov     a,_getsn_sloc0_1_0
0BCB 2590      2958            add     a,_getsn_buff_1_171
0BCD FC        2959            mov     r4,a
0BCE E5E1      2960            mov     a,(_getsn_sloc0_1_0 + 1)
0BD0 3591      2961            addc    a,(_getsn_buff_1_171 + 1)
0BD2 FD        2962            mov     r5,a
0BD3 AE92      2963            mov     r6,(_getsn_buff_1_171 + 2)
0BD5 8C82      2964            mov     dpl,r4
0BD7 8D83      2965            mov     dph,r5
0BD9 8EF0      2966            mov     b,r6
0BDB E4        2967            clr     a
0BDC 120100    2968            lcall   __gptrput
0BDF           2969   ;        Transmitter_src.c:111: return j;
0BDF 85E082    2970            mov     dpl,_getsn_sloc0_1_0
0BE2 85E183    2971            mov     dph,(_getsn_sloc0_1_0 + 1)
0BE5 22        2972            ret
0BE6           2973   L039002?:
0BE6           2974   ;        Transmitter_src.c:115: buff[j]=c;
0BE6 E9        2975            mov     a,r1
0BE7 2590      2976            add     a,_getsn_buff_1_171
0BE9 FC        2977            mov     r4,a
0BEA EA        2978            mov     a,r2
0BEB 3591      2979            addc    a,(_getsn_buff_1_171 + 1)
0BED FD        2980            mov     r5,a
0BEE AE92      2981            mov     r6,(_getsn_buff_1_171 + 2)
0BF0 8C82      2982            mov     dpl,r4
0BF2 8D83      2983            mov     dph,r5
0BF4 8EF0      2984            mov     b,r6
0BF6 EB        2985            mov     a,r3
0BF7 120100    2986            lcall   __gptrput
0BFA           2987   ;        Transmitter_src.c:105: for(j=0; j<(len-1); j++)
0BFA 09        2988            inc     r1
0BFB B90068    2989            cjne    r1,#0x00,L039018?
0BFE 0A        2990            inc     r2
0BFF           2991   L039018?:
0BFF 89E0      2992            mov     _getsn_sloc0_1_0,r1
0C01 8AE1      2993            mov     (_getsn_sloc0_1_0 + 1),r2
0C03 8001      2994            sjmp    L039005?
0C05           2995   L039008?:
0C05           2996   ;        Transmitter_src.c:118: buff[j]=0;
0C05 E5E0      2997            mov     a,_getsn_sloc0_1_0
0C07 2590      2998            add     a,_getsn_buff_1_171
0C09 FA        2999            mov     r2,a
0C0A E5E1      3000            mov     a,(_getsn_sloc0_1_0 + 1)
0C0C 3591      3001            addc    a,(_getsn_buff_1_171 + 1)
0C0E FB        3002            mov     r3,a
0C0F AC92      3003            mov     r4,(_getsn_buff_1_171 + 2)
0C11 8A82      3004            mov     dpl,r2
0C13 8B83      3005            mov     dph,r3
0C15 8CF0      3006            mov     b,r4
0C17 E4        3007            clr     a
0C18 120100    3008            lcall   __gptrput
0C1B           3009   ;        Transmitter_src.c:119: return len;
0C1B 859082    3010            mov     dpl,_getsn_PARM_2
0C1E 859183    3011            mov     dph,(_getsn_PARM_2 + 1)
0C21 22        3012            ret
0C22           3013   ;------------------------------------------------------------
0C22           3014   ;Allocation info for local variables in function 'main'
0C22           3015   ;------------------------------------------------------------
0C22           3016   ;buffer                    Allocated with name '_main_buffer_1_177'
0C22           3017   ;speed                     Allocated with name '_main_speed_1_177'
0C22           3018   ;direction                 Allocated with name '_main_direction_1_177'
0C22           3019   ;off_x                     Allocated to registers r2 r3 
0C22           3020   ;off_y                     Allocated with name '_main_off_y_1_177'
0C22           3021   ;------------------------------------------------------------
0C22           3022   ;        Transmitter_src.c:122: void main(void) {
0C22           3023   ;        -----------------------------------------
0C22           3024   ;         function main
0C22           3025   ;        -----------------------------------------
0C22           3026   _main:
0C22           3027   ;        Transmitter_src.c:126: int off_x=0;
0C22           3028   ;        Transmitter_src.c:127: int off_y=0;
0C22 E4        3029            clr     a
0C23 FA        3030            mov     r2,a
0C24 FB        3031            mov     r3,a
0C25 F520      3032            mov     _main_off_y_1_177,a
0C27 F521      3033            mov     (_main_off_y_1_177 + 1),a
0C29           3034   ;        Transmitter_src.c:128: offset_flag=1;
0C29 D270      3035            setb    _offset_flag
0C2B           3036   ;        Transmitter_src.c:131: Tcom_init(110L); //enter baudrate for UART1
0C2B 90006E    3037            mov     dptr,#(0x6E&0x00ff)
0C2E E4        3038            clr     a
0C2F F5F0      3039            mov     b,a
0C31 C002      3040            push    ar2
0C33 C003      3041            push    ar3
0C35 120100    3042            lcall   _Tcom_init
0C38           3043   ;        Transmitter_src.c:132: LCD_4BIT();
0C38 120100    3044            lcall   _LCD_4BIT
0C3B           3045   ;        Transmitter_src.c:135: waitms(200);
0C3B 9000C8    3046            mov     dptr,#0x00C8
0C3E 120100    3047            lcall   _waitms
0C41           3048   ;        Transmitter_src.c:136: nunchuck_init(1);
0C41 D2C0      3049            setb    _nunchuck_init_PARM_1
0C43 120100    3050            lcall   _nunchuck_init
0C46           3051   ;        Transmitter_src.c:137: waitms(100);
0C46 900064    3052            mov     dptr,#0x0064
0C49 120100    3053            lcall   _waitms
0C4C D003      3054            pop     ar3
0C4E D002      3055            pop     ar2
0C50           3056   ;        Transmitter_src.c:139: if(offset_flag){
0C50 3070A8    3057            jnb     _offset_flag,L040002?
0C53           3058   ;        Transmitter_src.c:140: nunchuck_getdata(buffer);
0C53 90C430    3059            mov     dptr,#_main_buffer_1_177
0C56 75F040    3060            mov     b,#0x40
0C59 120100    3061            lcall   _nunchuck_getdata
0C5C           3062   ;        Transmitter_src.c:141: off_x=(int)buffer[0]-128;
0C5C AE30      3063            mov     r6,_main_buffer_1_177
0C5E 7F00      3064            mov     r7,#0x00
0C60 EE        3065            mov     a,r6
0C61 2480      3066            add     a,#0x80
0C63 FA        3067            mov     r2,a
0C64 EF        3068            mov     a,r7
0C65 34FF      3069            addc    a,#0xff
0C67 FB        3070            mov     r3,a
0C68           3071   ;        Transmitter_src.c:142: off_y=(int)buffer[1]-128;
0C68 AE31      3072            mov     r6,(_main_buffer_1_177 + 0x0001)
0C6A 7F00      3073            mov     r7,#0x00
0C6C EE        3074            mov     a,r6
0C6D 2480      3075            add     a,#0x80
0C6F F520      3076            mov     _main_off_y_1_177,a
0C71 EF        3077            mov     a,r7
0C72 34FF      3078            addc    a,#0xff
0C74 F521      3079            mov     (_main_off_y_1_177 + 1),a
0C76           3080   ;        Transmitter_src.c:143: printf("Offset_X:%4d Offset_Y:%4d\n\n", off_x, off_y);
0C76 C002      3081            push    ar2
0C78 C003      3082            push    ar3
0C7A C020      3083            push    _main_off_y_1_177
0C7C C021      3084            push    (_main_off_y_1_177 + 1)
0C7E C002      3085            push    ar2
0C80 C003      3086            push    ar3
0C82 74E8      3087            mov     a,#__str_10
0C84 C0E0      3088            push    acc
0C86 74E5      3089            mov     a,#(__str_10 >> 8)
0C88 C0E0      3090            push    acc
0C8A 7480      3091            mov     a,#0x80
0C8C C0E0      3092            push    acc
0C8E 120100    3093            lcall   _printf
0C91 E581      3094            mov     a,sp
0C93 24F9      3095            add     a,#0xf9
0C95 F581      3096            mov     sp,a
0C97 D003      3097            pop     ar3
0C99 D002      3098            pop     ar2
0C9B           3099   ;        Transmitter_src.c:144: offset_flag=0; //clear offset flag, so not to re-get offset. 
0C9B C270      3100            clr     _offset_flag
0C9D           3101   L040002?:
0C9D           3102   ;        Transmitter_src.c:147: waitms(500);
0C9D 9001F4    3103            mov     dptr,#0x01F4
0CA0 C002      3104            push    ar2
0CA2 C003      3105            push    ar3
0CA4 120100    3106            lcall   _waitms
0CA7           3107   ;        Transmitter_src.c:149: printf("LAB 6 Microcontroller\r\nWith extra features\r\n\n");
0CA7 7428      3108            mov     a,#__str_11
0CA9 C0E0      3109            push    acc
0CAB 74E6      3110            mov     a,#(__str_11 >> 8)
0CAD C0E0      3111            push    acc
0CAF 7480      3112            mov     a,#0x80
0CB1 C0E0      3113            push    acc
0CB3 120100    3114            lcall   _printf
0CB6 1581      3115            dec     sp
0CB8 1581      3116            dec     sp
0CBA 1581      3117            dec     sp
0CBC           3118   ;        Transmitter_src.c:150: waitms(500);     
0CBC 9001F4    3119            mov     dptr,#0x01F4
0CBF 120100    3120            lcall   _waitms
0CC2 D003      3121            pop     ar3
0CC4 D002      3122            pop     ar2
0CC6           3123   ;        Transmitter_src.c:156: while(1) {
0CC6           3124   L040007?:
0CC6           3125   ;        Transmitter_src.c:170: read_nunchuck(&direction, &speed, buffer, off_x, off_y);
0CC6 75D080    3126            mov     _read_nunchuck_PARM_2,#_main_speed_1_177
0CC9 75D100    3127            mov     (_read_nunchuck_PARM_2 + 1),#0x00
0CCC 75D240    3128            mov     (_read_nunchuck_PARM_2 + 2),#0x40
0CCF 758030    3129            mov     _read_nunchuck_PARM_3,#_main_buffer_1_177
0CD2 758100    3130            mov     (_read_nunchuck_PARM_3 + 1),#0x00
0CD5 758240    3131            mov     (_read_nunchuck_PARM_3 + 2),#0x40
0CD8 8A30      3132            mov     _read_nunchuck_PARM_4,r2
0CDA 8B31      3133            mov     (_read_nunchuck_PARM_4 + 1),r3
0CDC 8520E0    3134            mov     _read_nunchuck_PARM_5,_main_off_y_1_177
0CDF 8521E1    3135            mov     (_read_nunchuck_PARM_5 + 1),(_main_off_y_1_177 + 1)
0CE2 90C4D0    3136            mov     dptr,#_main_direction_1_177
0CE5 75F040    3137            mov     b,#0x40
0CE8 C002      3138            push    ar2
0CEA C003      3139            push    ar3
0CEC 120100    3140            lcall   _read_nunchuck
0CEF D003      3141            pop     ar3
0CF1 D002      3142            pop     ar2
0CF3           3143   ;        Transmitter_src.c:172: if(speedbit){
0CF3 3090A8    3144            jnb     _speedbit,L040004?
0CF6           3145   ;        Transmitter_src.c:173: sendCommand(SPEED_OP, speed);
0CF6 8580C0    3146            mov     _sendCommand_PARM_2,_main_speed_1_177
0CF9 758200    3147            mov     dpl,#0x00
0CFC C002      3148            push    ar2
0CFE C003      3149            push    ar3
0D00 120100    3150            lcall   _sendCommand
0D03 D003      3151            pop     ar3
0D05 D002      3152            pop     ar2
0D07           3153   ;        Transmitter_src.c:174: speedbit=0;
0D07 C290      3154            clr     _speedbit
0D09 8001      3155            sjmp    L040005?
0D0B           3156   L040004?:
0D0B           3157   ;        Transmitter_src.c:178: sendCommand(DIRECTION_OP, direction);
0D0B 85D0C0    3158            mov     _sendCommand_PARM_2,_main_direction_1_177
0D0E 758201    3159            mov     dpl,#0x01
0D11 C002      3160            push    ar2
0D13 C003      3161            push    ar3
0D15 120100    3162            lcall   _sendCommand
0D18 D003      3163            pop     ar3
0D1A D002      3164            pop     ar2
0D1C           3165   ;        Transmitter_src.c:179: speedbit=1;
0D1C D290      3166            setb    _speedbit
0D1E           3167   L040005?:
0D1E           3168   ;        Transmitter_src.c:183: printf("direction: %c   speed: %c \n", direction, speed);
0D1E E580      3169            mov     a,_main_speed_1_177
0D20 FE        3170            mov     r6,a
0D21 33        3171            rlc     a
0D22 95E0      3172            subb    a,acc
0D24 FF        3173            mov     r7,a
0D25 E5D0      3174            mov     a,_main_direction_1_177
0D27 FC        3175            mov     r4,a
0D28 33        3176            rlc     a
0D29 95E0      3177            subb    a,acc
0D2B FD        3178            mov     r5,a
0D2C C002      3179            push    ar2
0D2E C003      3180            push    ar3
0D30 C006      3181            push    ar6
0D32 C007      3182            push    ar7
0D34 C004      3183            push    ar4
0D36 C005      3184            push    ar5
0D38 7428      3185            mov     a,#__str_12
0D3A C0E0      3186            push    acc
0D3C 74E7      3187            mov     a,#(__str_12 >> 8)
0D3E C0E0      3188            push    acc
0D40 7480      3189            mov     a,#0x80
0D42 C0E0      3190            push    acc
0D44 120100    3191            lcall   _printf
0D47 E581      3192            mov     a,sp
0D49 24F9      3193            add     a,#0xf9
0D4B F581      3194            mov     sp,a
0D4D D003      3195            pop     ar3
0D4F D002      3196            pop     ar2
0D51 020100    3197            ljmp    L040007?
0D54           3198            rseg R_CSEG
0D54           3199   
0000           3200            rseg R_XINIT
0000           3201   
0000           3202            rseg R_CONST
0000           3203   __str_0:
0000 53656E74  3204            db 'Sent: %d'
     3A202564
0008 0D        3205            db 0x0D
0009 0A        3206            db 0x0A
000A 00        3207            db 0x00
000B           3208   __str_1:
000B 63206572  3209            db 'c err'
     72
0010 0D        3210            db 0x0D
0011 0A        3211            db 0x0A
0012 00        3212            db 0x00
0013           3213   __str_2:
0013 252A7320  3214            db '%*s %c %c'
     25632025
     63
001C 00        3215            db 0x00
001D           3216   __str_3:
001D 252A7320  3217            db '%*s %u'
     2575
0023 00        3218            db 0x00
0024           3219   __str_4:
0024 48656C70  3220            db 'Help Menu'
     204D656E
     75
002D 0D        3221            db 0x0D
002E 0A        3222            db 0x0A
002F 4C697374  3223            db 'List of Commands: '
     206F6620
     436F6D6D
     616E6473
     3A20
0041 0D        3224            db 0x0D
0042 0A        3225            db 0x0A
0043 2D637720  3226            db '-cw [duty value]'
     5B647574
     79207661
     6C75655D
0053 0D        3227            db 0x0D
0054 0A        3228            db 0x0A
0055 2D636377  3229            db '-ccw [duty '
     205B6475
     747920
0060 76616C75  3230            db 'value]'
     655D
0066 0D        3231            db 0x0D
0067 0A        3232            db 0x0A
0068 2D66205B  3233            db '-f [freq value]'
     66726571
     2076616C
     75655D
0077 0D        3234            db 0x0D
0078 0A        3235            db 0x0A
0079 2D72205B  3236            db '-r [reload value]'
     72656C6F
     61642076
     616C7565
     5D
008A 0D        3237            db 0x0D
008B 0A        3238            db 0x0A
008C 2D6F      3239            db '-o'
008E 0D        3240            db 0x0D
008F 0A        3241            db 0x0A
0090 2D73      3242            db '-s'
0092 0D        3243            db 0x0D
0093 0A        3244            db 0x0A
0094 2D69      3245            db '-i'
0096 0D        3246            db 0x0D
0097 0A        3247            db 0x0A
0098 0A        3248            db 0x0A
0099 00        3249            db 0x00
009A           3250   __str_5:
009A 52656C6F  3251            db 'Reload: %u, Freq: %d '
     61643A20
     25752C20
     46726571
     3A202564
     20
00AF 0D        3252            db 0x0D
00B0 0A        3253            db 0x0A
00B1 00        3254            db 0x00
00B2           3255   __str_6:
00B2 22        3256            db 0x22
00B3 2573      3257            db '%s'
00B5 22        3258            db 0x22
00B6 20696E76  3259            db ' invalid command'
     616C6964
     20636F6D
     6D616E64
00C6 0D        3260            db 0x0D
00C7 0A        3261            db 0x0A
00C8 00        3262            db 0x00
00C9           3263   __str_7:
00C9 4E6F7420  3264            db 'Not Valid input'
     56616C69
     6420696E
     707574
00D8 0D        3265            db 0x0D
00D9 0A        3266            db 0x0A
00DA 00        3267            db 0x00
00DB           3268   __str_8:
00DB 45787465  3269            db 'Extension type: %02x  %02x  %02x  %02x  %02x  %02x'
     6E73696F
     6E207479
     70653A20
     25303278
     20202530
     32782020
     25303278
     20202530
     32782020
     25303278
     20202530
     3278
010D 0A        3270            db 0x0A
010E 00        3271            db 0x00
010F           3272   __str_9:
010F 42757474  3273            db 'Buttons(Z:%c, C:%c) Joystick(%4d, %4d)'
     6F6E7328
     5A3A2563
     2C20433A
     25632920
     4A6F7973
     7469636B
     28253464
     2C202534
     6429
0135 0D        3274            db 0x0D
0136 00        3275            db 0x00
0137           3276   __str_10:
0137 4F666673  3277            db 'Offset_X:%4d Offset_Y:%4d'
     65745F58
     3A253464
     204F6666
     7365745F
     593A2534
     64
0150 0A        3278            db 0x0A
0151 0A        3279            db 0x0A
0152 00        3280            db 0x00
0153           3281   __str_11:
0153 4C414220  3282            db 'LAB 6 Microcontroller'
     36204D69
     63726F63
     6F6E7472
     6F6C6C65
     72
0168 0D        3283            db 0x0D
0169 0A        3284            db 0x0A
016A 57697468  3285            db 'With extra features'
     20657874
     72612066
     65617475
     726573
017D 0D        3286            db 0x0D
017E 0A        3287            db 0x0A
017F 0A        3288            db 0x0A
0180 00        3289            db 0x00
0181           3290   __str_12:
0181 64697265  3291            db 'direction: %c   speed: %c '
     6374696F
     6E3A2025
     63202020
     73706565
     643A2025
     6320
019B 0A        3292            db 0x0A
019C 00        3293            db 0x00
019D           3294   
008E           3295            CSEG
008E           3296   
008E           3297   end
