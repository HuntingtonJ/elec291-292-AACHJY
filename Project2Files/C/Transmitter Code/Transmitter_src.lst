0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1069 (Apr 23 2015) (MSVC)
0000              4   ; This file was generated Tue Mar 20 21:17:16 2018
0000              5   ;--------------------------------------------------------
                  5   $name Transmitter_src
                  6   $optc51 --model-small
0000              8            R_DSEG    segment data
0000              9            R_CSEG    segment code
0000             10            R_BSEG    segment bit
0000             11            R_XSEG    segment xdata
0000             12            R_PSEG    segment xdata
0000             13            R_ISEG    segment idata
0000             14            R_OSEG    segment data overlay
0000             15            BIT_BANK  segment data overlay
0000             16            R_HOME    segment code
0000             17            R_GSINIT  segment code
0000             18            R_IXSEG   segment xdata
0000             19            R_CONST   segment code
0000             20            R_XINIT   segment code
0000             21            R_DINIT   segment code
0000             22   
0000             23   ;--------------------------------------------------------
0000             24   ; Public variables in this module
0000             25   ;--------------------------------------------------------
0000             26            public _main
0000             27            public _getsn
0000             28            public __c51_external_startup
0000             29            public _LCDprint
0000             30            public _LCD_4BIT
0000             31            public _WriteCommand
0000             32            public _WriteData
0000             33            public _LCD_byte
0000             34            public _LCD_pulse
0000             35            public _waitms
0000             36            public _Timer3us
0000             37            public _Tcom_init
0000             38            public _getCommand
0000             39            public _PWMon
0000             40            public _PWMoff
0000             41            public _setRotation
0000             42            public _setReload
0000             43            public _setFrequency
0000             44            public _reloadToFrequency
0000             45            public _frequencyToReload
0000             46            public _setDutyCycle
0000             47            public _sendCommandS
0000             48            public _sendCommand
0000             49            public _Timer4_ISR
0000             50            public _Timer4_init
0000             51            public _Timer2_ISR
0000             52            public _Timer2_init
0000             53            public _getchar1
0000             54            public _putchar1
0000             55            public _UART1_Init
0000             56            public _LCDprint_PARM_3
0000             57            public _reload_flag
0000             58            public _getsn_PARM_2
0000             59            public _LCDprint_PARM_2
0000             60            public _setDutyCycle_PARM_2
0000             61            public _sendCommand_PARM_2
0000             62            public _duty_cycle1
0000             63            public _duty_cycle0
0000             64            public _pwm_count
0000             65   ;--------------------------------------------------------
0000             66   ; Special Function Registers
0000             67   ;--------------------------------------------------------
0000             68   _ACC            DATA 0xe0
0000             69   _ADC0ASAH       DATA 0xb6
0000             70   _ADC0ASAL       DATA 0xb5
0000             71   _ADC0ASCF       DATA 0xa1
0000             72   _ADC0ASCT       DATA 0xc7
0000             73   _ADC0CF0        DATA 0xbc
0000             74   _ADC0CF1        DATA 0xb9
0000             75   _ADC0CF2        DATA 0xdf
0000             76   _ADC0CN0        DATA 0xe8
0000             77   _ADC0CN1        DATA 0xb2
0000             78   _ADC0CN2        DATA 0xb3
0000             79   _ADC0GTH        DATA 0xc4
0000             80   _ADC0GTL        DATA 0xc3
0000             81   _ADC0H          DATA 0xbe
0000             82   _ADC0L          DATA 0xbd
0000             83   _ADC0LTH        DATA 0xc6
0000             84   _ADC0LTL        DATA 0xc5
0000             85   _ADC0MX         DATA 0xbb
0000             86   _B              DATA 0xf0
0000             87   _CKCON0         DATA 0x8e
0000             88   _CKCON1         DATA 0xa6
0000             89   _CLEN0          DATA 0xc6
0000             90   _CLIE0          DATA 0xc7
0000             91   _CLIF0          DATA 0xe8
0000             92   _CLKSEL         DATA 0xa9
0000             93   _CLOUT0         DATA 0xd1
0000             94   _CLU0CF         DATA 0xb1
0000             95   _CLU0FN         DATA 0xaf
0000             96   _CLU0MX         DATA 0x84
0000             97   _CLU1CF         DATA 0xb3
0000             98   _CLU1FN         DATA 0xb2
0000             99   _CLU1MX         DATA 0x85
0000            100   _CLU2CF         DATA 0xb6
0000            101   _CLU2FN         DATA 0xb5
0000            102   _CLU2MX         DATA 0x91
0000            103   _CLU3CF         DATA 0xbf
0000            104   _CLU3FN         DATA 0xbe
0000            105   _CLU3MX         DATA 0xae
0000            106   _CMP0CN0        DATA 0x9b
0000            107   _CMP0CN1        DATA 0x99
0000            108   _CMP0MD         DATA 0x9d
0000            109   _CMP0MX         DATA 0x9f
0000            110   _CMP1CN0        DATA 0xbf
0000            111   _CMP1CN1        DATA 0xac
0000            112   _CMP1MD         DATA 0xab
0000            113   _CMP1MX         DATA 0xaa
0000            114   _CRC0CN0        DATA 0xce
0000            115   _CRC0CN1        DATA 0x86
0000            116   _CRC0CNT        DATA 0xd3
0000            117   _CRC0DAT        DATA 0xcb
0000            118   _CRC0FLIP       DATA 0xcf
0000            119   _CRC0IN         DATA 0xca
0000            120   _CRC0ST         DATA 0xd2
0000            121   _DAC0CF0        DATA 0x91
0000            122   _DAC0CF1        DATA 0x92
0000            123   _DAC0H          DATA 0x85
0000            124   _DAC0L          DATA 0x84
0000            125   _DAC1CF0        DATA 0x93
0000            126   _DAC1CF1        DATA 0x94
0000            127   _DAC1H          DATA 0x8a
0000            128   _DAC1L          DATA 0x89
0000            129   _DAC2CF0        DATA 0x95
0000            130   _DAC2CF1        DATA 0x96
0000            131   _DAC2H          DATA 0x8c
0000            132   _DAC2L          DATA 0x8b
0000            133   _DAC3CF0        DATA 0x9a
0000            134   _DAC3CF1        DATA 0x9c
0000            135   _DAC3H          DATA 0x8e
0000            136   _DAC3L          DATA 0x8d
0000            137   _DACGCF0        DATA 0x88
0000            138   _DACGCF1        DATA 0x98
0000            139   _DACGCF2        DATA 0xa2
0000            140   _DERIVID        DATA 0xad
0000            141   _DEVICEID       DATA 0xb5
0000            142   _DPH            DATA 0x83
0000            143   _DPL            DATA 0x82
0000            144   _EIE1           DATA 0xe6
0000            145   _EIE2           DATA 0xf3
0000            146   _EIP1           DATA 0xbb
0000            147   _EIP1H          DATA 0xee
0000            148   _EIP2           DATA 0xed
0000            149   _EIP2H          DATA 0xf6
0000            150   _EMI0CN         DATA 0xe7
0000            151   _FLKEY          DATA 0xb7
0000            152   _HFO0CAL        DATA 0xc7
0000            153   _HFO1CAL        DATA 0xd6
0000            154   _HFOCN          DATA 0xef
0000            155   _I2C0ADM        DATA 0xff
0000            156   _I2C0CN0        DATA 0xba
0000            157   _I2C0DIN        DATA 0xbc
0000            158   _I2C0DOUT       DATA 0xbb
0000            159   _I2C0FCN0       DATA 0xad
0000            160   _I2C0FCN1       DATA 0xab
0000            161   _I2C0FCT        DATA 0xf5
0000            162   _I2C0SLAD       DATA 0xbd
0000            163   _I2C0STAT       DATA 0xb9
0000            164   _IE             DATA 0xa8
0000            165   _IP             DATA 0xb8
0000            166   _IPH            DATA 0xf2
0000            167   _IT01CF         DATA 0xe4
0000            168   _LFO0CN         DATA 0xb1
0000            169   _P0             DATA 0x80
0000            170   _P0MASK         DATA 0xfe
0000            171   _P0MAT          DATA 0xfd
0000            172   _P0MDIN         DATA 0xf1
0000            173   _P0MDOUT        DATA 0xa4
0000            174   _P0SKIP         DATA 0xd4
0000            175   _P1             DATA 0x90
0000            176   _P1MASK         DATA 0xee
0000            177   _P1MAT          DATA 0xed
0000            178   _P1MDIN         DATA 0xf2
0000            179   _P1MDOUT        DATA 0xa5
0000            180   _P1SKIP         DATA 0xd5
0000            181   _P2             DATA 0xa0
0000            182   _P2MASK         DATA 0xfc
0000            183   _P2MAT          DATA 0xfb
0000            184   _P2MDIN         DATA 0xf3
0000            185   _P2MDOUT        DATA 0xa6
0000            186   _P2SKIP         DATA 0xcc
0000            187   _P3             DATA 0xb0
0000            188   _P3MDIN         DATA 0xf4
0000            189   _P3MDOUT        DATA 0x9c
0000            190   _PCA0CENT       DATA 0x9e
0000            191   _PCA0CLR        DATA 0x9c
0000            192   _PCA0CN0        DATA 0xd8
0000            193   _PCA0CPH0       DATA 0xfc
0000            194   _PCA0CPH1       DATA 0xea
0000            195   _PCA0CPH2       DATA 0xec
0000            196   _PCA0CPH3       DATA 0xf5
0000            197   _PCA0CPH4       DATA 0x85
0000            198   _PCA0CPH5       DATA 0xde
0000            199   _PCA0CPL0       DATA 0xfb
0000            200   _PCA0CPL1       DATA 0xe9
0000            201   _PCA0CPL2       DATA 0xeb
0000            202   _PCA0CPL3       DATA 0xf4
0000            203   _PCA0CPL4       DATA 0x84
0000            204   _PCA0CPL5       DATA 0xdd
0000            205   _PCA0CPM0       DATA 0xda
0000            206   _PCA0CPM1       DATA 0xdb
0000            207   _PCA0CPM2       DATA 0xdc
0000            208   _PCA0CPM3       DATA 0xae
0000            209   _PCA0CPM4       DATA 0xaf
0000            210   _PCA0CPM5       DATA 0xcc
0000            211   _PCA0H          DATA 0xfa
0000            212   _PCA0L          DATA 0xf9
0000            213   _PCA0MD         DATA 0xd9
0000            214   _PCA0POL        DATA 0x96
0000            215   _PCA0PWM        DATA 0xf7
0000            216   _PCON0          DATA 0x87
0000            217   _PCON1          DATA 0xcd
0000            218   _PFE0CN         DATA 0xc1
0000            219   _PRTDRV         DATA 0xf6
0000            220   _PSCTL          DATA 0x8f
0000            221   _PSTAT0         DATA 0xaa
0000            222   _PSW            DATA 0xd0
0000            223   _REF0CN         DATA 0xd1
0000            224   _REG0CN         DATA 0xc9
0000            225   _REVID          DATA 0xb6
0000            226   _RSTSRC         DATA 0xef
0000            227   _SBCON1         DATA 0x94
0000            228   _SBRLH1         DATA 0x96
0000            229   _SBRLL1         DATA 0x95
0000            230   _SBUF           DATA 0x99
0000            231   _SBUF0          DATA 0x99
0000            232   _SBUF1          DATA 0x92
0000            233   _SCON           DATA 0x98
0000            234   _SCON0          DATA 0x98
0000            235   _SCON1          DATA 0xc8
0000            236   _SFRPAGE        DATA 0xa7
0000            237   _SFRPGCN        DATA 0xbc
0000            238   _SFRSTACK       DATA 0xd7
0000            239   _SMB0ADM        DATA 0xd6
0000            240   _SMB0ADR        DATA 0xd7
0000            241   _SMB0CF         DATA 0xc1
0000            242   _SMB0CN0        DATA 0xc0
0000            243   _SMB0DAT        DATA 0xc2
0000            244   _SMB0FCN0       DATA 0xc3
0000            245   _SMB0FCN1       DATA 0xc4
0000            246   _SMB0FCT        DATA 0xef
0000            247   _SMB0RXLN       DATA 0xc5
0000            248   _SMB0TC         DATA 0xac
0000            249   _SMOD1          DATA 0x93
0000            250   _SP             DATA 0x81
0000            251   _SPI0CFG        DATA 0xa1
0000            252   _SPI0CKR        DATA 0xa2
0000            253   _SPI0CN0        DATA 0xf8
0000            254   _SPI0DAT        DATA 0xa3
0000            255   _SPI0FCN0       DATA 0x9a
0000            256   _SPI0FCN1       DATA 0x9b
0000            257   _SPI0FCT        DATA 0xf7
0000            258   _SPI0PCF        DATA 0xdf
0000            259   _TCON           DATA 0x88
0000            260   _TH0            DATA 0x8c
0000            261   _TH1            DATA 0x8d
0000            262   _TL0            DATA 0x8a
0000            263   _TL1            DATA 0x8b
0000            264   _TMOD           DATA 0x89
0000            265   _TMR2CN0        DATA 0xc8
0000            266   _TMR2CN1        DATA 0xfd
0000            267   _TMR2H          DATA 0xcf
0000            268   _TMR2L          DATA 0xce
0000            269   _TMR2RLH        DATA 0xcb
0000            270   _TMR2RLL        DATA 0xca
0000            271   _TMR3CN0        DATA 0x91
0000            272   _TMR3CN1        DATA 0xfe
0000            273   _TMR3H          DATA 0x95
0000            274   _TMR3L          DATA 0x94
0000            275   _TMR3RLH        DATA 0x93
0000            276   _TMR3RLL        DATA 0x92
0000            277   _TMR4CN0        DATA 0x98
0000            278   _TMR4CN1        DATA 0xff
0000            279   _TMR4H          DATA 0xa5
0000            280   _TMR4L          DATA 0xa4
0000            281   _TMR4RLH        DATA 0xa3
0000            282   _TMR4RLL        DATA 0xa2
0000            283   _TMR5CN0        DATA 0xc0
0000            284   _TMR5CN1        DATA 0xf1
0000            285   _TMR5H          DATA 0xd5
0000            286   _TMR5L          DATA 0xd4
0000            287   _TMR5RLH        DATA 0xd3
0000            288   _TMR5RLL        DATA 0xd2
0000            289   _UART0PCF       DATA 0xd9
0000            290   _UART1FCN0      DATA 0x9d
0000            291   _UART1FCN1      DATA 0xd8
0000            292   _UART1FCT       DATA 0xfa
0000            293   _UART1LIN       DATA 0x9e
0000            294   _UART1PCF       DATA 0xda
0000            295   _VDM0CN         DATA 0xff
0000            296   _WDTCN          DATA 0x97
0000            297   _XBR0           DATA 0xe1
0000            298   _XBR1           DATA 0xe2
0000            299   _XBR2           DATA 0xe3
0000            300   _XOSC0CN        DATA 0x86
0000            301   _DPTR           DATA 0x8382
0000            302   _TMR2RL         DATA 0xcbca
0000            303   _TMR3RL         DATA 0x9392
0000            304   _TMR4RL         DATA 0xa3a2
0000            305   _TMR5RL         DATA 0xd3d2
0000            306   _TMR0           DATA 0x8c8a
0000            307   _TMR1           DATA 0x8d8b
0000            308   _TMR2           DATA 0xcfce
0000            309   _TMR3           DATA 0x9594
0000            310   _TMR4           DATA 0xa5a4
0000            311   _TMR5           DATA 0xd5d4
0000            312   _SBRL1          DATA 0x9695
0000            313   _PCA0           DATA 0xfaf9
0000            314   _PCA0CP0        DATA 0xfcfb
0000            315   _PCA0CP1        DATA 0xeae9
0000            316   _PCA0CP2        DATA 0xeceb
0000            317   _PCA0CP3        DATA 0xf5f4
0000            318   _PCA0CP4        DATA 0x8584
0000            319   _PCA0CP5        DATA 0xdedd
0000            320   _ADC0ASA        DATA 0xb6b5
0000            321   _ADC0GT         DATA 0xc4c3
0000            322   _ADC0           DATA 0xbebd
0000            323   _ADC0LT         DATA 0xc6c5
0000            324   _DAC0           DATA 0x8584
0000            325   _DAC1           DATA 0x8a89
0000            326   _DAC2           DATA 0x8c8b
0000            327   _DAC3           DATA 0x8e8d
0000            328   ;--------------------------------------------------------
0000            329   ; special function bits
0000            330   ;--------------------------------------------------------
0000            331   _ACC_0          BIT 0xe0
0000            332   _ACC_1          BIT 0xe1
0000            333   _ACC_2          BIT 0xe2
0000            334   _ACC_3          BIT 0xe3
0000            335   _ACC_4          BIT 0xe4
0000            336   _ACC_5          BIT 0xe5
0000            337   _ACC_6          BIT 0xe6
0000            338   _ACC_7          BIT 0xe7
0000            339   _TEMPE          BIT 0xe8
0000            340   _ADGN0          BIT 0xe9
0000            341   _ADGN1          BIT 0xea
0000            342   _ADWINT         BIT 0xeb
0000            343   _ADBUSY         BIT 0xec
0000            344   _ADINT          BIT 0xed
0000            345   _IPOEN          BIT 0xee
0000            346   _ADEN           BIT 0xef
0000            347   _B_0            BIT 0xf0
0000            348   _B_1            BIT 0xf1
0000            349   _B_2            BIT 0xf2
0000            350   _B_3            BIT 0xf3
0000            351   _B_4            BIT 0xf4
0000            352   _B_5            BIT 0xf5
0000            353   _B_6            BIT 0xf6
0000            354   _B_7            BIT 0xf7
0000            355   _C0FIF          BIT 0xe8
0000            356   _C0RIF          BIT 0xe9
0000            357   _C1FIF          BIT 0xea
0000            358   _C1RIF          BIT 0xeb
0000            359   _C2FIF          BIT 0xec
0000            360   _C2RIF          BIT 0xed
0000            361   _C3FIF          BIT 0xee
0000            362   _C3RIF          BIT 0xef
0000            363   _D1SRC0         BIT 0x88
0000            364   _D1SRC1         BIT 0x89
0000            365   _D1AMEN         BIT 0x8a
0000            366   _D01REFSL       BIT 0x8b
0000            367   _D3SRC0         BIT 0x8c
0000            368   _D3SRC1         BIT 0x8d
0000            369   _D3AMEN         BIT 0x8e
0000            370   _D23REFSL       BIT 0x8f
0000            371   _D0UDIS         BIT 0x98
0000            372   _D1UDIS         BIT 0x99
0000            373   _D2UDIS         BIT 0x9a
0000            374   _D3UDIS         BIT 0x9b
0000            375   _EX0            BIT 0xa8
0000            376   _ET0            BIT 0xa9
0000            377   _EX1            BIT 0xaa
0000            378   _ET1            BIT 0xab
0000            379   _ES0            BIT 0xac
0000            380   _ET2            BIT 0xad
0000            381   _ESPI0          BIT 0xae
0000            382   _EA             BIT 0xaf
0000            383   _PX0            BIT 0xb8
0000            384   _PT0            BIT 0xb9
0000            385   _PX1            BIT 0xba
0000            386   _PT1            BIT 0xbb
0000            387   _PS0            BIT 0xbc
0000            388   _PT2            BIT 0xbd
0000            389   _PSPI0          BIT 0xbe
0000            390   _P0_0           BIT 0x80
0000            391   _P0_1           BIT 0x81
0000            392   _P0_2           BIT 0x82
0000            393   _P0_3           BIT 0x83
0000            394   _P0_4           BIT 0x84
0000            395   _P0_5           BIT 0x85
0000            396   _P0_6           BIT 0x86
0000            397   _P0_7           BIT 0x87
0000            398   _P1_0           BIT 0x90
0000            399   _P1_1           BIT 0x91
0000            400   _P1_2           BIT 0x92
0000            401   _P1_3           BIT 0x93
0000            402   _P1_4           BIT 0x94
0000            403   _P1_5           BIT 0x95
0000            404   _P1_6           BIT 0x96
0000            405   _P1_7           BIT 0x97
0000            406   _P2_0           BIT 0xa0
0000            407   _P2_1           BIT 0xa1
0000            408   _P2_2           BIT 0xa2
0000            409   _P2_3           BIT 0xa3
0000            410   _P2_4           BIT 0xa4
0000            411   _P2_5           BIT 0xa5
0000            412   _P2_6           BIT 0xa6
0000            413   _P3_0           BIT 0xb0
0000            414   _P3_1           BIT 0xb1
0000            415   _P3_2           BIT 0xb2
0000            416   _P3_3           BIT 0xb3
0000            417   _P3_4           BIT 0xb4
0000            418   _P3_7           BIT 0xb7
0000            419   _CCF0           BIT 0xd8
0000            420   _CCF1           BIT 0xd9
0000            421   _CCF2           BIT 0xda
0000            422   _CCF3           BIT 0xdb
0000            423   _CCF4           BIT 0xdc
0000            424   _CCF5           BIT 0xdd
0000            425   _CR             BIT 0xde
0000            426   _CF             BIT 0xdf
0000            427   _PARITY         BIT 0xd0
0000            428   _F1             BIT 0xd1
0000            429   _OV             BIT 0xd2
0000            430   _RS0            BIT 0xd3
0000            431   _RS1            BIT 0xd4
0000            432   _F0             BIT 0xd5
0000            433   _AC             BIT 0xd6
0000            434   _CY             BIT 0xd7
0000            435   _RI             BIT 0x98
0000            436   _TI             BIT 0x99
0000            437   _RB8            BIT 0x9a
0000            438   _TB8            BIT 0x9b
0000            439   _REN            BIT 0x9c
0000            440   _CE             BIT 0x9d
0000            441   _SMODE          BIT 0x9e
0000            442   _RI1            BIT 0xc8
0000            443   _TI1            BIT 0xc9
0000            444   _RBX1           BIT 0xca
0000            445   _TBX1           BIT 0xcb
0000            446   _REN1           BIT 0xcc
0000            447   _PERR1          BIT 0xcd
0000            448   _OVR1           BIT 0xce
0000            449   _SI             BIT 0xc0
0000            450   _ACK            BIT 0xc1
0000            451   _ARBLOST        BIT 0xc2
0000            452   _ACKRQ          BIT 0xc3
0000            453   _STO            BIT 0xc4
0000            454   _STA            BIT 0xc5
0000            455   _TXMODE         BIT 0xc6
0000            456   _MASTER         BIT 0xc7
0000            457   _SPIEN          BIT 0xf8
0000            458   _TXNF           BIT 0xf9
0000            459   _NSSMD0         BIT 0xfa
0000            460   _NSSMD1         BIT 0xfb
0000            461   _RXOVRN         BIT 0xfc
0000            462   _MODF           BIT 0xfd
0000            463   _WCOL           BIT 0xfe
0000            464   _SPIF           BIT 0xff
0000            465   _IT0            BIT 0x88
0000            466   _IE0            BIT 0x89
0000            467   _IT1            BIT 0x8a
0000            468   _IE1            BIT 0x8b
0000            469   _TR0            BIT 0x8c
0000            470   _TF0            BIT 0x8d
0000            471   _TR1            BIT 0x8e
0000            472   _TF1            BIT 0x8f
0000            473   _T2XCLK0        BIT 0xc8
0000            474   _T2XCLK1        BIT 0xc9
0000            475   _TR2            BIT 0xca
0000            476   _T2SPLIT        BIT 0xcb
0000            477   _TF2CEN         BIT 0xcc
0000            478   _TF2LEN         BIT 0xcd
0000            479   _TF2L           BIT 0xce
0000            480   _TF2H           BIT 0xcf
0000            481   _T4XCLK0        BIT 0x98
0000            482   _T4XCLK1        BIT 0x99
0000            483   _TR4            BIT 0x9a
0000            484   _T4SPLIT        BIT 0x9b
0000            485   _TF4CEN         BIT 0x9c
0000            486   _TF4LEN         BIT 0x9d
0000            487   _TF4L           BIT 0x9e
0000            488   _TF4H           BIT 0x9f
0000            489   _T5XCLK0        BIT 0xc0
0000            490   _T5XCLK1        BIT 0xc1
0000            491   _TR5            BIT 0xc2
0000            492   _T5SPLIT        BIT 0xc3
0000            493   _TF5CEN         BIT 0xc4
0000            494   _TF5LEN         BIT 0xc5
0000            495   _TF5L           BIT 0xc6
0000            496   _TF5H           BIT 0xc7
0000            497   _RIE            BIT 0xd8
0000            498   _RXTO0          BIT 0xd9
0000            499   _RXTO1          BIT 0xda
0000            500   _RFRQ           BIT 0xdb
0000            501   _TIE            BIT 0xdc
0000            502   _TXHOLD         BIT 0xdd
0000            503   _TXNF1          BIT 0xde
0000            504   _TFRQ           BIT 0xdf
0000            505   ;--------------------------------------------------------
0000            506   ; overlayable register banks
0000            507   ;--------------------------------------------------------
0000            508            rbank0 segment data overlay
0000            509   ;--------------------------------------------------------
0000            510   ; internal ram data
0000            511   ;--------------------------------------------------------
0000            512            rseg R_DSEG
0000            513   _pwm_count:
0000            514            ds 1
0001            515   _duty_cycle0:
0001            516            ds 1
0002            517   _duty_cycle1:
0002            518            ds 1
0003            519   _sendCommand_PARM_2:
0003            520            ds 1
0004            521   _sendCommandS_op_1_84:
0004            522            ds 1
0005            523   _sendCommandS_d_1_84:
0005            524            ds 1
0006            525   _setDutyCycle_PARM_2:
0006            526            ds 1
0007            527   _setDutyCycle_duty_1_87:
0007            528            ds 2
0009            529   _setFrequency_frequency_1_95:
0009            530            ds 2
000B            531   _setReload_reload_1_97:
000B            532            ds 2
000D            533   _setRotation_duty_1_99:
000D            534            ds 2
000F            535   _getCommand_sloc0_1_0:
000F            536            ds 2
0011            537   _LCDprint_PARM_2:
0011            538            ds 1
0012            539   _getsn_PARM_2:
0012            540            ds 2
0014            541   _getsn_buff_1_134:
0014            542            ds 3
0017            543   _getsn_sloc0_1_0:
0017            544            ds 2
0019            545   _main_buffer_1_140:
0019            546            ds 16
0029            547   ;--------------------------------------------------------
0029            548   ; overlayable items in internal ram 
0029            549   ;--------------------------------------------------------
0000            550            rseg    R_OSEG
0000            551            rseg    R_OSEG
0000            552            rseg    R_OSEG
0000            553   ;--------------------------------------------------------
0000            554   ; indirectly addressable internal ram data
0000            555   ;--------------------------------------------------------
0000            556            rseg R_ISEG
0000            557   ;--------------------------------------------------------
0000            558   ; absolute internal ram data
0000            559   ;--------------------------------------------------------
0000            560            DSEG
0000            561   ;--------------------------------------------------------
0000            562   ; bit data
0000            563   ;--------------------------------------------------------
0000            564            rseg R_BSEG
0000            565   _reload_flag:
0000            566            DBIT    1
0001            567   _Timer2_ISR_sloc0_1_0:
0001            568            DBIT    1
0002            569   _LCDprint_PARM_3:
0002            570            DBIT    1
0003            571   ;--------------------------------------------------------
0003            572   ; paged external ram data
0003            573   ;--------------------------------------------------------
0000            574            rseg R_PSEG
0000            575   ;--------------------------------------------------------
0000            576   ; external ram data
0000            577   ;--------------------------------------------------------
0000            578            rseg R_XSEG
0000            579   ;--------------------------------------------------------
0000            580   ; absolute external ram data
0000            581   ;--------------------------------------------------------
0000            582            XSEG
0000            583   ;--------------------------------------------------------
0000            584   ; external initialized ram data
0000            585   ;--------------------------------------------------------
0000            586            rseg R_IXSEG
0000            587            rseg R_HOME
0000            588            rseg R_GSINIT
0000            589            rseg R_CSEG
0000            590   ;--------------------------------------------------------
0000            591   ; Reset entry point and interrupt vectors
0000            592   ;--------------------------------------------------------
0000            593            CSEG at 0x0000
0000 020100     594            ljmp    _crt0
002B            595            CSEG at 0x002b
002B 020100     596            ljmp    _Timer2_ISR
008B            597            CSEG at 0x008b
008B 020100     598            ljmp    _Timer4_ISR
008E            599   ;--------------------------------------------------------
008E            600   ; global & static initialisations
008E            601   ;--------------------------------------------------------
0000            602            rseg R_HOME
0000            603            rseg R_GSINIT
0000            604            rseg R_GSINIT
0000            605   ;--------------------------------------------------------
0000            606   ; data variables initialization
0000            607   ;--------------------------------------------------------
0000            608            rseg R_DINIT
0000            609   ;        Tcom.h:15: volatile unsigned char pwm_count = 0;
0000 75D000     610            mov     _pwm_count,#0x00
0003            611   ;        Tcom.h:16: volatile unsigned char duty_cycle0 = 50;
0003 759032     612            mov     _duty_cycle0,#0x32
0006            613   ;        Tcom.h:17: volatile unsigned char duty_cycle1 = 0;
0006 755000     614            mov     _duty_cycle1,#0x00
0009            615   ;        Tcom.h:19: bit reload_flag = 0;
0009 C2E0       616            clr     _reload_flag
000B            617            ; The linker places a 'ret' at the end of segment R_DINIT.
000B            618   ;--------------------------------------------------------
000B            619   ; code
000B            620   ;--------------------------------------------------------
0000            621            rseg R_CSEG
0000            622   ;------------------------------------------------------------
0000            623   ;Allocation info for local variables in function 'UART1_Init'
0000            624   ;------------------------------------------------------------
0000            625   ;baudrate                  Allocated to registers r2 r3 r4 r5 
0000            626   ;------------------------------------------------------------
0000            627   ;        EFM8UART1lib.h:11: void UART1_Init (unsigned long baudrate)
0000            628   ;        -----------------------------------------
0000            629   ;         function UART1_Init
0000            630   ;        -----------------------------------------
0000            631   _UART1_Init:
0000            632            using   0
0000 AA82       633            mov     r2,dpl
0002 AB83       634            mov     r3,dph
0004 ACF0       635            mov     r4,b
0006 FD         636            mov     r5,a
0007            637   ;        EFM8UART1lib.h:13: SFRPAGE = 0x20;
0007 75A720     638            mov     _SFRPAGE,#0x20
000A            639   ;        EFM8UART1lib.h:14: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
000A 75930C     640            mov     _SMOD1,#0x0C
000D            641   ;        EFM8UART1lib.h:15: SCON1 = 0x10; //Receive fifo overrun flag = 0; Parity Error Flag = 0; 0; Receive enable flag = 1; TBX = 0; RBX = 0; Transmit Interrupt Flag = 0; Receive Interrupt FLag = 0;
000D 75C810     642            mov     _SCON1,#0x10
0010            643   ;        EFM8UART1lib.h:16: SBCON1 =0x00;   // disable baud rate generator
0010 759400     644            mov     _SBCON1,#0x00
0013            645   ;        EFM8UART1lib.h:17: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));  //Baud rate reload
0013 8A00       646            mov     __divulong_PARM_2,r2
0015 8B01       647            mov     (__divulong_PARM_2 + 1),r3
0017 8C02       648            mov     (__divulong_PARM_2 + 2),r4
0019 8D03       649            mov     (__divulong_PARM_2 + 3),r5
001B 90A200     650            mov     dptr,#0xA200
001E 75F04A     651            mov     b,#0x4A
0021 7404       652            mov     a,#0x04
0023 120100     653            lcall   __divulong
0026 AA82       654            mov     r2,dpl
0028 AB83       655            mov     r3,dph
002A ACF0       656            mov     r4,b
002C FD         657            mov     r5,a
002D 750018     658            mov     __divulong_PARM_2,#0x18
0030 E4         659            clr     a
0031 F501       660            mov     (__divulong_PARM_2 + 1),a
0033 F502       661            mov     (__divulong_PARM_2 + 2),a
0035 F503       662            mov     (__divulong_PARM_2 + 3),a
0037 8A82       663            mov     dpl,r2
0039 8B83       664            mov     dph,r3
003B 8CF0       665            mov     b,r4
003D ED         666            mov     a,r5
003E 120100     667            lcall   __divulong
0041 AA82       668            mov     r2,dpl
0043 AB83       669            mov     r3,dph
0045 ACF0       670            mov     r4,b
0047 FD         671            mov     r5,a
0048 E4         672            clr     a
0049 C3         673            clr     c
004A 9A         674            subb    a,r2
004B FA         675            mov     r2,a
004C E4         676            clr     a
004D 9B         677            subb    a,r3
004E FB         678            mov     r3,a
004F 7401       679            mov     a,#0x01
0051 9C         680            subb    a,r4
0052 E4         681            clr     a
0053 9D         682            subb    a,r5
0054 8A95       683            mov     _SBRL1,r2
0056 8B96       684            mov     (_SBRL1 >> 8),r3
0058            685   ;        EFM8UART1lib.h:18: TI1 = 1; // indicate ready for TX
0058 D2C9       686            setb    _TI1
005A            687   ;        EFM8UART1lib.h:19: SBCON1 |= 0x40;   // enable baud rate generator
005A 439440     688            orl     _SBCON1,#0x40
005D            689   ;        EFM8UART1lib.h:20: SFRPAGE = 0x00;
005D 75A700     690            mov     _SFRPAGE,#0x00
0060 22         691            ret
0061            692   ;------------------------------------------------------------
0061            693   ;Allocation info for local variables in function 'putchar1'
0061            694   ;------------------------------------------------------------
0061            695   ;c                         Allocated to registers r2 
0061            696   ;------------------------------------------------------------
0061            697   ;        EFM8UART1lib.h:23: void putchar1 (char c) 
0061            698   ;        -----------------------------------------
0061            699   ;         function putchar1
0061            700   ;        -----------------------------------------
0061            701   _putchar1:
0061 AA82       702            mov     r2,dpl
0063            703   ;        EFM8UART1lib.h:25: SFRPAGE = 0x20;
0063 75A720     704            mov     _SFRPAGE,#0x20
0066            705   ;        EFM8UART1lib.h:26: if (c == '\n') 
0066 BA0AD0     706            cjne    r2,#0x0A,L003006?
0069            707   ;        EFM8UART1lib.h:28: while (!TI1);
0069            708   L003001?:
0069            709   ;        EFM8UART1lib.h:29: TI1=0;
0069 10C950     710            jbc     _TI1,L003017?
006C 8001       711            sjmp    L003001?
006E            712   L003017?:
006E            713   ;        EFM8UART1lib.h:30: SBUF1 = '\r';
006E 75920D     714            mov     _SBUF1,#0x0D
0071            715   ;        EFM8UART1lib.h:32: while (!TI1);
0071            716   L003006?:
0071            717   ;        EFM8UART1lib.h:33: TI1=0;
0071 10C990     718            jbc     _TI1,L003018?
0074 8001       719            sjmp    L003006?
0076            720   L003018?:
0076            721   ;        EFM8UART1lib.h:34: SBUF1 = c;
0076 8A92       722            mov     _SBUF1,r2
0078            723   ;        EFM8UART1lib.h:35: SFRPAGE = 0x00;
0078 75A700     724            mov     _SFRPAGE,#0x00
007B 22         725            ret
007C            726   ;------------------------------------------------------------
007C            727   ;Allocation info for local variables in function 'getchar1'
007C            728   ;------------------------------------------------------------
007C            729   ;c                         Allocated to registers 
007C            730   ;------------------------------------------------------------
007C            731   ;        EFM8UART1lib.h:38: char getchar1 (void)
007C            732   ;        -----------------------------------------
007C            733   ;         function getchar1
007C            734   ;        -----------------------------------------
007C            735   _getchar1:
007C            736   ;        EFM8UART1lib.h:41: SFRPAGE = 0x20;
007C 75A720     737            mov     _SFRPAGE,#0x20
007F            738   ;        EFM8UART1lib.h:42: while (!RI1);
007F            739   L004001?:
007F            740   ;        EFM8UART1lib.h:43: RI1=0;
007F 10C810     741            jbc     _RI1,L004008?
0082 8001       742            sjmp    L004001?
0084            743   L004008?:
0084            744   ;        EFM8UART1lib.h:45: SCON1&=0b_0011_1111;
0084 53C83F     745            anl     _SCON1,#0x3F
0087            746   ;        EFM8UART1lib.h:46: c = SBUF1;
0087 859282     747            mov     dpl,_SBUF1
008A            748   ;        EFM8UART1lib.h:47: SFRPAGE = 0x00;
008A 75A700     749            mov     _SFRPAGE,#0x00
008D            750   ;        EFM8UART1lib.h:48: return (c);
008D 22         751            ret
008E            752   ;------------------------------------------------------------
008E            753   ;Allocation info for local variables in function 'Timer2_init'
008E            754   ;------------------------------------------------------------
008E            755   ;------------------------------------------------------------
008E            756   ;        Tcom.h:21: void Timer2_init(void) {
008E            757   ;        -----------------------------------------
008E            758   ;         function Timer2_init
008E            759   ;        -----------------------------------------
008E            760   _Timer2_init:
008E            761   ;        Tcom.h:22: TMR2CN0=0b_0000_0000;   // Stop Timer2; Clear TF2; T2XCLK uses Sysclk/12
008E 75C800     762            mov     _TMR2CN0,#0x00
0091            763   ;        Tcom.h:23: CKCON0|=0b_0000_0000; // Timer 2 uses the system clock; Timer2 uses T2XCLK
0091 858E8E     764            mov     _CKCON0,_CKCON0
0094            765   ;        Tcom.h:24: TMR2RL=64936; //Initilizes reload value for 100hz;
0094 75CAA8     766            mov     _TMR2RL,#0xA8
0097 75CBFD     767            mov     (_TMR2RL >> 8),#0xFD
009A            768   ;        Tcom.h:25: TMR2=0xffff;   // Set to reload immediately
009A 75CEFF     769            mov     _TMR2,#0xFF
009D 75CFFF     770            mov     (_TMR2 >> 8),#0xFF
00A0            771   ;        Tcom.h:26: ET2=1;         // Enable Timer2 interrupts
00A0 D2AD       772            setb    _ET2
00A2            773   ;        Tcom.h:27: TR2=1;         // Start Timer2 (TMR2CN is bit addressable)
00A2 D2CA       774            setb    _TR2
00A4 22         775            ret
00A5            776   ;------------------------------------------------------------
00A5            777   ;Allocation info for local variables in function 'Timer2_ISR'
00A5            778   ;------------------------------------------------------------
00A5            779   ;------------------------------------------------------------
00A5            780   ;        Tcom.h:30: void Timer2_ISR (void) interrupt 5 {
00A5            781   ;        -----------------------------------------
00A5            782   ;         function Timer2_ISR
00A5            783   ;        -----------------------------------------
00A5            784   _Timer2_ISR:
00A5 C0E0       785            push    acc
00A7 C0D0       786            push    psw
00A9 75D000     787            mov     psw,#0x00
00AC            788   ;        Tcom.h:31: SFRPAGE=0x00;
00AC 75A700     789            mov     _SFRPAGE,#0x00
00AF            790   ;        Tcom.h:32: reload_flag = 1;
00AF D2E0       791            setb    _reload_flag
00B1            792   ;        Tcom.h:33: TF2H = 0; // Clear Timer2 interrupt flag
00B1 C2CF       793            clr     _TF2H
00B3            794   ;        Tcom.h:35: pwm_count++;
00B3 05D0       795            inc     _pwm_count
00B5            796   ;        Tcom.h:36: if(pwm_count>100) pwm_count=0;
00B5 E5D0       797            mov     a,_pwm_count
00B7 249B       798            add     a,#0xff - 0x64
00B9 5001       799            jnc     L006002?
00BB 75D000     800            mov     _pwm_count,#0x00
00BE            801   L006002?:
00BE            802   ;        Tcom.h:38: OUT0=pwm_count>duty_cycle0?0:1;
00BE C3         803            clr     c
00BF E590       804            mov     a,_duty_cycle0
00C1 95D0       805            subb    a,_pwm_count
00C3 9200       806            mov  _Timer2_ISR_sloc0_1_0,c
00C5 B3         807            cpl     c
00C6 92A0       808            mov     _P2_0,c
00C8            809   ;        Tcom.h:39: reload_flag = 0;
00C8 C2E0       810            clr     _reload_flag
00CA D0D0       811            pop     psw
00CC D0E0       812            pop     acc
00CE 32         813            reti
00CF            814   ;        eliminated unneeded push/pop dpl
00CF            815   ;        eliminated unneeded push/pop dph
00CF            816   ;        eliminated unneeded push/pop b
00CF            817   ;------------------------------------------------------------
00CF            818   ;Allocation info for local variables in function 'Timer4_init'
00CF            819   ;------------------------------------------------------------
00CF            820   ;------------------------------------------------------------
00CF            821   ;        Tcom.h:42: void Timer4_init(void) {
00CF            822   ;        -----------------------------------------
00CF            823   ;         function Timer4_init
00CF            824   ;        -----------------------------------------
00CF            825   _Timer4_init:
00CF            826   ;        Tcom.h:43: SFRPAGE=0x10;
00CF 75A710     827            mov     _SFRPAGE,#0x10
00D2            828   ;        Tcom.h:44: TMR4CN0=0b_0000_0000;
00D2 759800     829            mov     _TMR4CN0,#0x00
00D5            830   ;        Tcom.h:45: TMR4CN1=0b_0110_0000;
00D5 75FF60     831            mov     _TMR4CN1,#0x60
00D8            832   ;        Tcom.h:47: TMR4RL=59536; //reload = 2^16 - (SYSCLK/12)/(F*2);
00D8 75A290     833            mov     _TMR4RL,#0x90
00DB 75A3E8     834            mov     (_TMR4RL >> 8),#0xE8
00DE            835   ;        Tcom.h:48: TMR4=0xffff;
00DE 75A4FF     836            mov     _TMR4,#0xFF
00E1 75A5FF     837            mov     (_TMR4 >> 8),#0xFF
00E4            838   ;        Tcom.h:50: EIE2|=0b_0000_0100;
00E4 43F304     839            orl     _EIE2,#0x04
00E7            840   ;        Tcom.h:51: TR4=1;
00E7 D29A       841            setb    _TR4
00E9 22         842            ret
00EA            843   ;------------------------------------------------------------
00EA            844   ;Allocation info for local variables in function 'Timer4_ISR'
00EA            845   ;------------------------------------------------------------
00EA            846   ;------------------------------------------------------------
00EA            847   ;        Tcom.h:54: void Timer4_ISR(void) interrupt INTERRUPT_TIMER4 {
00EA            848   ;        -----------------------------------------
00EA            849   ;         function Timer4_ISR
00EA            850   ;        -----------------------------------------
00EA            851   _Timer4_ISR:
00EA            852   ;        Tcom.h:55: TF4H = 0;
00EA C29F       853            clr     _TF4H
00EC            854   ;        Tcom.h:57: OUT1 = !OUT1;
00EC B296       855            cpl     _P1_6
00EE 32         856            reti
00EF            857   ;        eliminated unneeded push/pop psw
00EF            858   ;        eliminated unneeded push/pop dpl
00EF            859   ;        eliminated unneeded push/pop dph
00EF            860   ;        eliminated unneeded push/pop b
00EF            861   ;        eliminated unneeded push/pop acc
00EF            862   ;------------------------------------------------------------
00EF            863   ;Allocation info for local variables in function 'sendCommand'
00EF            864   ;------------------------------------------------------------
00EF            865   ;value                     Allocated with name '_sendCommand_PARM_2'
00EF            866   ;op                        Allocated to registers r2 
00EF            867   ;------------------------------------------------------------
00EF            868   ;        Tcom.h:60: void sendCommand(unsigned char op, unsigned char value) {
00EF            869   ;        -----------------------------------------
00EF            870   ;         function sendCommand
00EF            871   ;        -----------------------------------------
00EF            872   _sendCommand:
00EF AA82       873            mov     r2,dpl
00F1            874   ;        Tcom.h:61: if (op < 0b_1000 && value < 0b_100000) {
00F1 BA0810     875            cjne    r2,#0x08,L009009?
00F4            876   L009009?:
00F4 5001       877            jnc     L009002?
00F6 74E0       878            mov     a,#0x100 - 0x20
00F8 2510       879            add     a,_sendCommand_PARM_2
00FA 4001       880            jc      L009002?
00FC            881   ;        Tcom.h:62: putchar1(op*0b_100000 + value);
00FC EA         882            mov     a,r2
00FD C4         883            swap    a
00FE 23         884            rl      a
00FF 54E0       885            anl     a,#0xe0
0101 FB         886            mov     r3,a
0102 E510       887            mov     a,_sendCommand_PARM_2
0104 2B         888            add     a,r3
0105 F582       889            mov     dpl,a
0107 C002       890            push    ar2
0109 120100     891            lcall   _putchar1
010C D002       892            pop     ar2
010E            893   ;        Tcom.h:63: printf("Sent: %d\r\n", op*0b_100000 + value);
010E EA         894            mov     a,r2
010F 75F020     895            mov     b,#0x20
0112 A4         896            mul     ab
0113 FA         897            mov     r2,a
0114 ABF0       898            mov     r3,b
0116 AC10       899            mov     r4,_sendCommand_PARM_2
0118 7D00       900            mov     r5,#0x00
011A EC         901            mov     a,r4
011B 2A         902            add     a,r2
011C FA         903            mov     r2,a
011D ED         904            mov     a,r5
011E 3B         905            addc    a,r3
011F FB         906            mov     r3,a
0120 C002       907            push    ar2
0122 C003       908            push    ar3
0124 7490       909            mov     a,#__str_0
0126 C0E0       910            push    acc
0128 74C5       911            mov     a,#(__str_0 >> 8)
012A C0E0       912            push    acc
012C 7480       913            mov     a,#0x80
012E C0E0       914            push    acc
0130 120100     915            lcall   _printf
0133 E581       916            mov     a,sp
0135 24FB       917            add     a,#0xfb
0137 F581       918            mov     sp,a
0139 22         919            ret
013A            920   L009002?:
013A            921   ;        Tcom.h:65: printf("c err\r\n");
013A 7450       922            mov     a,#__str_1
013C C0E0       923            push    acc
013E 74C6       924            mov     a,#(__str_1 >> 8)
0140 C0E0       925            push    acc
0142 7480       926            mov     a,#0x80
0144 C0E0       927            push    acc
0146 120100     928            lcall   _printf
0149 1581       929            dec     sp
014B 1581       930            dec     sp
014D 1581       931            dec     sp
014F 22         932            ret
0150            933   ;------------------------------------------------------------
0150            934   ;Allocation info for local variables in function 'sendCommandS'
0150            935   ;------------------------------------------------------------
0150            936   ;input                     Allocated to registers r2 r3 r4 
0150            937   ;op                        Allocated with name '_sendCommandS_op_1_84'
0150            938   ;d                         Allocated with name '_sendCommandS_d_1_84'
0150            939   ;------------------------------------------------------------
0150            940   ;        Tcom.h:69: void sendCommandS(char* input) {
0150            941   ;        -----------------------------------------
0150            942   ;         function sendCommandS
0150            943   ;        -----------------------------------------
0150            944   _sendCommandS:
0150 AA82       945            mov     r2,dpl
0152 AB83       946            mov     r3,dph
0154 ACF0       947            mov     r4,b
0156            948   ;        Tcom.h:73: sscanf(input, "%*s %c %c", &op, &d);
0156 7430       949            mov     a,#_sendCommandS_d_1_84
0158 C0E0       950            push    acc
015A 74BE       951            mov     a,#(_sendCommandS_d_1_84 >> 8)
015C C0E0       952            push    acc
015E 7440       953            mov     a,#0x40
0160 C0E0       954            push    acc
0162 74E0       955            mov     a,#_sendCommandS_op_1_84
0164 C0E0       956            push    acc
0166 74BD       957            mov     a,#(_sendCommandS_op_1_84 >> 8)
0168 C0E0       958            push    acc
016A 7440       959            mov     a,#0x40
016C C0E0       960            push    acc
016E 7490       961            mov     a,#__str_2
0170 C0E0       962            push    acc
0172 74C6       963            mov     a,#(__str_2 >> 8)
0174 C0E0       964            push    acc
0176 7480       965            mov     a,#0x80
0178 C0E0       966            push    acc
017A C002       967            push    ar2
017C C003       968            push    ar3
017E C004       969            push    ar4
0180 120100     970            lcall   _sscanf
0183 E581       971            mov     a,sp
0185 24F4       972            add     a,#0xf4
0187 F581       973            mov     sp,a
0189            974   ;        Tcom.h:75: switch(op) {
0189 AAE0       975            mov     r2,_sendCommandS_op_1_84
018B BA6610     976            cjne    r2,#0x66,L010011?
018E 8001       977            sjmp    L010002?
0190            978   L010011?:
0190 8A03       979            mov     ar3,r2
0192 BB7290     980            cjne    r3,#0x72,L010012?
0195 8001       981            sjmp    L010003?
0197            982   L010012?:
0197 BA7310     983            cjne    r2,#0x73,L010004?
019A            984   ;        Tcom.h:77: op = 0;
019A 75E000     985            mov     _sendCommandS_op_1_84,#0x00
019D            986   ;        Tcom.h:78: break;
019D            987   ;        Tcom.h:79: case 'f':
019D 8001       988            sjmp    L010005?
019F            989   L010002?:
019F            990   ;        Tcom.h:80: op = 0b_001;
019F 75E001     991            mov     _sendCommandS_op_1_84,#0x01
01A2            992   ;        Tcom.h:81: break;
01A2            993   ;        Tcom.h:82: case 'r':
01A2 8001       994            sjmp    L010005?
01A4            995   L010003?:
01A4            996   ;        Tcom.h:83: op = 0b_010;
01A4 75E002     997            mov     _sendCommandS_op_1_84,#0x02
01A7            998   ;        Tcom.h:84: break;
01A7            999   ;        Tcom.h:85: default:
01A7 8001      1000            sjmp    L010005?
01A9           1001   L010004?:
01A9           1002   ;        Tcom.h:86: return;
01A9           1003   ;        Tcom.h:87: }
01A9 22        1004            ret
01AA           1005   L010005?:
01AA           1006   ;        Tcom.h:88: sendCommand(op, d);
01AA 853010    1007            mov     _sendCommand_PARM_2,_sendCommandS_d_1_84
01AD 85E082    1008            mov     dpl,_sendCommandS_op_1_84
01B0 020100    1009            ljmp    _sendCommand
01B3           1010   ;------------------------------------------------------------
01B3           1011   ;Allocation info for local variables in function 'setDutyCycle'
01B3           1012   ;------------------------------------------------------------
01B3           1013   ;op                        Allocated with name '_setDutyCycle_PARM_2'
01B3           1014   ;input                     Allocated to registers r2 r3 r4 
01B3           1015   ;duty                      Allocated with name '_setDutyCycle_duty_1_87'
01B3           1016   ;------------------------------------------------------------
01B3           1017   ;        Tcom.h:91: void setDutyCycle(char* input, unsigned char op) {
01B3           1018   ;        -----------------------------------------
01B3           1019   ;         function setDutyCycle
01B3           1020   ;        -----------------------------------------
01B3           1021   _setDutyCycle:
01B3 AA82      1022            mov     r2,dpl
01B5 AB83      1023            mov     r3,dph
01B7 ACF0      1024            mov     r4,b
01B9           1025   ;        Tcom.h:93: sscanf(input, "%*s %d", &duty);
01B9 7480      1026            mov     a,#_setDutyCycle_duty_1_87
01BB C0E0      1027            push    acc
01BD 74BE      1028            mov     a,#(_setDutyCycle_duty_1_87 >> 8)
01BF C0E0      1029            push    acc
01C1 7440      1030            mov     a,#0x40
01C3 C0E0      1031            push    acc
01C5 7490      1032            mov     a,#__str_3
01C7 C0E0      1033            push    acc
01C9 74C8      1034            mov     a,#(__str_3 >> 8)
01CB C0E0      1035            push    acc
01CD 7480      1036            mov     a,#0x80
01CF C0E0      1037            push    acc
01D1 C002      1038            push    ar2
01D3 C003      1039            push    ar3
01D5 C004      1040            push    ar4
01D7 120100    1041            lcall   _sscanf
01DA E581      1042            mov     a,sp
01DC 24F7      1043            add     a,#0xf7
01DE F581      1044            mov     sp,a
01E0           1045   ;        Tcom.h:94: if (duty > 100)
01E0 C3        1046            clr     c
01E1 7464      1047            mov     a,#0x64
01E3 9580      1048            subb    a,_setDutyCycle_duty_1_87
01E5 E4        1049            clr     a
01E6 9581      1050            subb    a,(_setDutyCycle_duty_1_87 + 1)
01E8 5001      1051            jnc     L011002?
01EA           1052   ;        Tcom.h:95: duty = 100;
01EA 758064    1053            mov     _setDutyCycle_duty_1_87,#0x64
01ED E4        1054            clr     a
01EE F581      1055            mov     (_setDutyCycle_duty_1_87 + 1),a
01F0           1056   L011002?:
01F0           1057   ;        Tcom.h:97: if (op == 0) {
01F0 E5C0      1058            mov     a,_setDutyCycle_PARM_2
01F2           1059   ;        Tcom.h:98: duty_cycle0 = (char)duty;
01F2           1060   ;        Tcom.h:99: printf("Duty Cycle 0 set to: %u\r\n", duty_cycle0);
01F2 7001      1061            jnz     L011006?
01F4 858090    1062            mov     _duty_cycle0,_setDutyCycle_duty_1_87
01F7 AA90      1063            mov     r2,_duty_cycle0
01F9 FB        1064            mov     r3,a
01FA C002      1065            push    ar2
01FC C003      1066            push    ar3
01FE 7450      1067            mov     a,#__str_4
0200 C0E0      1068            push    acc
0202 74C9      1069            mov     a,#(__str_4 >> 8)
0204 C0E0      1070            push    acc
0206 7480      1071            mov     a,#0x80
0208 C0E0      1072            push    acc
020A 120100    1073            lcall   _printf
020D E581      1074            mov     a,sp
020F 24FB      1075            add     a,#0xfb
0211 F581      1076            mov     sp,a
0213 22        1077            ret
0214           1078   L011006?:
0214           1079   ;        Tcom.h:100: } else if (op == 1) {
0214 7401      1080            mov     a,#0x01
0216 B5C090    1081            cjne    a,_setDutyCycle_PARM_2,L011008?
0219           1082   ;        Tcom.h:101: duty_cycle1 = (char)duty;
0219 858050    1083            mov     _duty_cycle1,_setDutyCycle_duty_1_87
021C           1084   ;        Tcom.h:102: printf("Duty Cycle 1 set to: %u\r\n", duty_cycle1);
021C AA50      1085            mov     r2,_duty_cycle1
021E 7B00      1086            mov     r3,#0x00
0220 C002      1087            push    ar2
0222 C003      1088            push    ar3
0224 74D0      1089            mov     a,#__str_5
0226 C0E0      1090            push    acc
0228 74C9      1091            mov     a,#(__str_5 >> 8)
022A C0E0      1092            push    acc
022C 7480      1093            mov     a,#0x80
022E C0E0      1094            push    acc
0230 120100    1095            lcall   _printf
0233 E581      1096            mov     a,sp
0235 24FB      1097            add     a,#0xfb
0237 F581      1098            mov     sp,a
0239           1099   L011008?:
0239 22        1100            ret
023A           1101   ;------------------------------------------------------------
023A           1102   ;Allocation info for local variables in function 'frequencyToReload'
023A           1103   ;------------------------------------------------------------
023A           1104   ;freq                      Allocated to registers r2 r3 
023A           1105   ;------------------------------------------------------------
023A           1106   ;        Tcom.h:106: unsigned int frequencyToReload(unsigned int freq) {
023A           1107   ;        -----------------------------------------
023A           1108   ;         function frequencyToReload
023A           1109   ;        -----------------------------------------
023A           1110   _frequencyToReload:
023A AA82      1111            mov     r2,dpl
023C AB83      1112            mov     r3,dph
023E           1113   ;        Tcom.h:107: return 65536 - (60000/(freq));
023E 8A00      1114            mov     __divslong_PARM_2,r2
0240 8B01      1115            mov     (__divslong_PARM_2 + 1),r3
0242 750200    1116            mov     (__divslong_PARM_2 + 2),#0x00
0245 750300    1117            mov     (__divslong_PARM_2 + 3),#0x00
0248 90EA60    1118            mov     dptr,#0xEA60
024B E4        1119            clr     a
024C F5F0      1120            mov     b,a
024E 120100    1121            lcall   __divslong
0251 AA82      1122            mov     r2,dpl
0253 AB83      1123            mov     r3,dph
0255 ACF0      1124            mov     r4,b
0257 FD        1125            mov     r5,a
0258 E4        1126            clr     a
0259 C3        1127            clr     c
025A 9A        1128            subb    a,r2
025B FA        1129            mov     r2,a
025C E4        1130            clr     a
025D 9B        1131            subb    a,r3
025E FB        1132            mov     r3,a
025F 7401      1133            mov     a,#0x01
0261 9C        1134            subb    a,r4
0262 E4        1135            clr     a
0263 9D        1136            subb    a,r5
0264 8A82      1137            mov     dpl,r2
0266 8B83      1138            mov     dph,r3
0268 22        1139            ret
0269           1140   ;------------------------------------------------------------
0269           1141   ;Allocation info for local variables in function 'reloadToFrequency'
0269           1142   ;------------------------------------------------------------
0269           1143   ;reload                    Allocated to registers r2 r3 
0269           1144   ;------------------------------------------------------------
0269           1145   ;        Tcom.h:110: unsigned int reloadToFrequency(unsigned int reload) {
0269           1146   ;        -----------------------------------------
0269           1147   ;         function reloadToFrequency
0269           1148   ;        -----------------------------------------
0269           1149   _reloadToFrequency:
0269 AA82      1150            mov     r2,dpl
026B AB83      1151            mov     r3,dph
026D           1152   ;        Tcom.h:111: return ((SYSCLK/12)/(65536 - reload))/100;
026D 7C00      1153            mov     r4,#0x00
026F E4        1154            clr     a
0270 FD        1155            mov     r5,a
0271 C3        1156            clr     c
0272 9A        1157            subb    a,r2
0273 F500      1158            mov     __divslong_PARM_2,a
0275 E4        1159            clr     a
0276 9B        1160            subb    a,r3
0277 F501      1161            mov     (__divslong_PARM_2 + 1),a
0279 7401      1162            mov     a,#0x01
027B 9C        1163            subb    a,r4
027C F502      1164            mov     (__divslong_PARM_2 + 2),a
027E E4        1165            clr     a
027F 9D        1166            subb    a,r5
0280 F503      1167            mov     (__divslong_PARM_2 + 3),a
0282 908D80    1168            mov     dptr,#0x8D80
0285 75F05B    1169            mov     b,#0x5B
0288 E4        1170            clr     a
0289 120100    1171            lcall   __divslong
028C AA82      1172            mov     r2,dpl
028E AB83      1173            mov     r3,dph
0290 ACF0      1174            mov     r4,b
0292 FD        1175            mov     r5,a
0293 750064    1176            mov     __divslong_PARM_2,#0x64
0296 E4        1177            clr     a
0297 F501      1178            mov     (__divslong_PARM_2 + 1),a
0299 F502      1179            mov     (__divslong_PARM_2 + 2),a
029B F503      1180            mov     (__divslong_PARM_2 + 3),a
029D 8A82      1181            mov     dpl,r2
029F 8B83      1182            mov     dph,r3
02A1 8CF0      1183            mov     b,r4
02A3 ED        1184            mov     a,r5
02A4 020100    1185            ljmp    __divslong
02A7           1186   ;------------------------------------------------------------
02A7           1187   ;Allocation info for local variables in function 'setFrequency'
02A7           1188   ;------------------------------------------------------------
02A7           1189   ;input                     Allocated to registers r2 r3 r4 
02A7           1190   ;frequency                 Allocated with name '_setFrequency_frequency_1_95'
02A7           1191   ;------------------------------------------------------------
02A7           1192   ;        Tcom.h:114: void setFrequency(char* input) {
02A7           1193   ;        -----------------------------------------
02A7           1194   ;         function setFrequency
02A7           1195   ;        -----------------------------------------
02A7           1196   _setFrequency:
02A7 AA82      1197            mov     r2,dpl
02A9 AB83      1198            mov     r3,dph
02AB ACF0      1199            mov     r4,b
02AD           1200   ;        Tcom.h:116: sscanf(input, "%*s %u", &frequency);
02AD 74D0      1201            mov     a,#_setFrequency_frequency_1_95
02AF C0E0      1202            push    acc
02B1 74BE      1203            mov     a,#(_setFrequency_frequency_1_95 >> 8)
02B3 C0E0      1204            push    acc
02B5 7440      1205            mov     a,#0x40
02B7 C0E0      1206            push    acc
02B9 74A0      1207            mov     a,#__str_6
02BB C0E0      1208            push    acc
02BD 74CA      1209            mov     a,#(__str_6 >> 8)
02BF C0E0      1210            push    acc
02C1 7480      1211            mov     a,#0x80
02C3 C0E0      1212            push    acc
02C5 C002      1213            push    ar2
02C7 C003      1214            push    ar3
02C9 C004      1215            push    ar4
02CB 120100    1216            lcall   _sscanf
02CE E581      1217            mov     a,sp
02D0 24F7      1218            add     a,#0xf7
02D2 F581      1219            mov     sp,a
02D4           1220   ;        Tcom.h:117: while(reload_flag != 0);
02D4           1221   L014001?:
02D4 20E0E0    1222            jb      _reload_flag,L014001?
02D7           1223   ;        Tcom.h:118: TMR2RL = frequencyToReload(frequency);
02D7 85D082    1224            mov     dpl,_setFrequency_frequency_1_95
02DA 85D183    1225            mov     dph,(_setFrequency_frequency_1_95 + 1)
02DD 120100    1226            lcall   _frequencyToReload
02E0 8582CA    1227            mov     _TMR2RL,dpl
02E3 8583CB    1228            mov     (_TMR2RL >> 8),dph
02E6 22        1229            ret
02E7           1230   ;------------------------------------------------------------
02E7           1231   ;Allocation info for local variables in function 'setReload'
02E7           1232   ;------------------------------------------------------------
02E7           1233   ;input                     Allocated to registers r2 r3 r4 
02E7           1234   ;reload                    Allocated with name '_setReload_reload_1_97'
02E7           1235   ;------------------------------------------------------------
02E7           1236   ;        Tcom.h:121: void setReload(char* input) {
02E7           1237   ;        -----------------------------------------
02E7           1238   ;         function setReload
02E7           1239   ;        -----------------------------------------
02E7           1240   _setReload:
02E7 AA82      1241            mov     r2,dpl
02E9 AB83      1242            mov     r3,dph
02EB ACF0      1243            mov     r4,b
02ED           1244   ;        Tcom.h:123: sscanf(input, "%*s %u", &reload);
02ED 7420      1245            mov     a,#_setReload_reload_1_97
02EF C0E0      1246            push    acc
02F1 74BF      1247            mov     a,#(_setReload_reload_1_97 >> 8)
02F3 C0E0      1248            push    acc
02F5 7440      1249            mov     a,#0x40
02F7 C0E0      1250            push    acc
02F9 74A0      1251            mov     a,#__str_6
02FB C0E0      1252            push    acc
02FD 74CA      1253            mov     a,#(__str_6 >> 8)
02FF C0E0      1254            push    acc
0301 7480      1255            mov     a,#0x80
0303 C0E0      1256            push    acc
0305 C002      1257            push    ar2
0307 C003      1258            push    ar3
0309 C004      1259            push    ar4
030B 120100    1260            lcall   _sscanf
030E E581      1261            mov     a,sp
0310 24F7      1262            add     a,#0xf7
0312 F581      1263            mov     sp,a
0314           1264   ;        Tcom.h:124: while(reload_flag != 0);
0314           1265   L015001?:
0314 20E020    1266            jb      _reload_flag,L015001?
0317           1267   ;        Tcom.h:125: TMR2RL = reload;
0317 8520CA    1268            mov     _TMR2RL,_setReload_reload_1_97
031A 8521CB    1269            mov     (_TMR2RL >> 8),(_setReload_reload_1_97 + 1)
031D 22        1270            ret
031E           1271   ;------------------------------------------------------------
031E           1272   ;Allocation info for local variables in function 'setRotation'
031E           1273   ;------------------------------------------------------------
031E           1274   ;input                     Allocated to registers r2 r3 r4 
031E           1275   ;duty                      Allocated with name '_setRotation_duty_1_99'
031E           1276   ;------------------------------------------------------------
031E           1277   ;        Tcom.h:128: void setRotation(char* input) {
031E           1278   ;        -----------------------------------------
031E           1279   ;         function setRotation
031E           1280   ;        -----------------------------------------
031E           1281   _setRotation:
031E AA82      1282            mov     r2,dpl
0320 AB83      1283            mov     r3,dph
0322 ACF0      1284            mov     r4,b
0324           1285   ;        Tcom.h:130: sscanf(input, "%*s %u", &duty); 
0324 C002      1286            push    ar2
0326 C003      1287            push    ar3
0328 C004      1288            push    ar4
032A 7470      1289            mov     a,#_setRotation_duty_1_99
032C C0E0      1290            push    acc
032E 74BF      1291            mov     a,#(_setRotation_duty_1_99 >> 8)
0330 C0E0      1292            push    acc
0332 7440      1293            mov     a,#0x40
0334 C0E0      1294            push    acc
0336 74A0      1295            mov     a,#__str_6
0338 C0E0      1296            push    acc
033A 74CA      1297            mov     a,#(__str_6 >> 8)
033C C0E0      1298            push    acc
033E 7480      1299            mov     a,#0x80
0340 C0E0      1300            push    acc
0342 C002      1301            push    ar2
0344 C003      1302            push    ar3
0346 C004      1303            push    ar4
0348 120100    1304            lcall   _sscanf
034B E581      1305            mov     a,sp
034D 24F7      1306            add     a,#0xf7
034F F581      1307            mov     sp,a
0351 D004      1308            pop     ar4
0353 D003      1309            pop     ar3
0355 D002      1310            pop     ar2
0357           1311   ;        Tcom.h:132: if (input[2] == 'w') {
0357 7402      1312            mov     a,#0x02
0359 2A        1313            add     a,r2
035A FA        1314            mov     r2,a
035B E4        1315            clr     a
035C 3B        1316            addc    a,r3
035D FB        1317            mov     r3,a
035E 8A82      1318            mov     dpl,r2
0360 8B83      1319            mov     dph,r3
0362 8CF0      1320            mov     b,r4
0364 120100    1321            lcall   __gptrget
0367 FA        1322            mov     r2,a
0368 BA77A0    1323            cjne    r2,#0x77,L016005?
036B           1324   ;        Tcom.h:133: duty_cycle0 = (char)duty;
036B 857090    1325            mov     _duty_cycle0,_setRotation_duty_1_99
036E           1326   ;        Tcom.h:134: duty_cycle1 = 0;
036E 755000    1327            mov     _duty_cycle1,#0x00
0371 22        1328            ret
0372           1329   L016005?:
0372           1330   ;        Tcom.h:135: }else if(input[2] == 'c') {
0372 BA63E0    1331            cjne    r2,#0x63,L016002?
0375           1332   ;        Tcom.h:136: duty_cycle1 = (char)duty;
0375 857050    1333            mov     _duty_cycle1,_setRotation_duty_1_99
0378           1334   ;        Tcom.h:137: duty_cycle0 = 0;
0378 759000    1335            mov     _duty_cycle0,#0x00
037B 22        1336            ret
037C           1337   L016002?:
037C           1338   ;        Tcom.h:139: printf("Invalid direction. Use -cw or -ccw\r\n");
037C 7420      1339            mov     a,#__str_7
037E C0E0      1340            push    acc
0380 74CC      1341            mov     a,#(__str_7 >> 8)
0382 C0E0      1342            push    acc
0384 7480      1343            mov     a,#0x80
0386 C0E0      1344            push    acc
0388 120100    1345            lcall   _printf
038B 1581      1346            dec     sp
038D 1581      1347            dec     sp
038F 1581      1348            dec     sp
0391 22        1349            ret
0392           1350   ;------------------------------------------------------------
0392           1351   ;Allocation info for local variables in function 'PWMoff'
0392           1352   ;------------------------------------------------------------
0392           1353   ;------------------------------------------------------------
0392           1354   ;        Tcom.h:143: void PWMoff() {
0392           1355   ;        -----------------------------------------
0392           1356   ;         function PWMoff
0392           1357   ;        -----------------------------------------
0392           1358   _PWMoff:
0392           1359   ;        Tcom.h:144: OUT0 = 0;
0392 C2A0      1360            clr     _P2_0
0394           1361   ;        Tcom.h:145: OUT1 = 0;
0394 C296      1362            clr     _P1_6
0396           1363   ;        Tcom.h:146: TR2 = 0;
0396 C2CA      1364            clr     _TR2
0398 22        1365            ret
0399           1366   ;------------------------------------------------------------
0399           1367   ;Allocation info for local variables in function 'PWMon'
0399           1368   ;------------------------------------------------------------
0399           1369   ;------------------------------------------------------------
0399           1370   ;        Tcom.h:149: void PWMon() {
0399           1371   ;        -----------------------------------------
0399           1372   ;         function PWMon
0399           1373   ;        -----------------------------------------
0399           1374   _PWMon:
0399           1375   ;        Tcom.h:150: TR2 = 1;
0399 D2CA      1376            setb    _TR2
039B 22        1377            ret
039C           1378   ;------------------------------------------------------------
039C           1379   ;Allocation info for local variables in function 'getCommand'
039C           1380   ;------------------------------------------------------------
039C           1381   ;input                     Allocated to registers r2 r3 r4 
039C           1382   ;sloc0                     Allocated with name '_getCommand_sloc0_1_0'
039C           1383   ;------------------------------------------------------------
039C           1384   ;        Tcom.h:153: void getCommand(char* input) {
039C           1385   ;        -----------------------------------------
039C           1386   ;         function getCommand
039C           1387   ;        -----------------------------------------
039C           1388   _getCommand:
039C           1389   ;        Tcom.h:155: if (input[0] == '-') {
039C AA82      1390            mov     r2,dpl
039E AB83      1391            mov     r3,dph
03A0 ACF0      1392            mov     r4,b
03A2 120100    1393            lcall   __gptrget
03A5 FD        1394            mov     r5,a
03A6 BD2D60    1395            cjne    r5,#0x2D,L019040?
03A9 8001      1396            sjmp    L019041?
03AB           1397   L019040?:
03AB 020100    1398            ljmp    L019022?
03AE           1399   L019041?:
03AE           1400   ;        Tcom.h:156: switch(input[1]) {
03AE 7401      1401            mov     a,#0x01
03B0 2A        1402            add     a,r2
03B1 FD        1403            mov     r5,a
03B2 E4        1404            clr     a
03B3 3B        1405            addc    a,r3
03B4 FE        1406            mov     r6,a
03B5 8C07      1407            mov     ar7,r4
03B7 8D82      1408            mov     dpl,r5
03B9 8E83      1409            mov     dph,r6
03BB 8FF0      1410            mov     b,r7
03BD 120100    1411            lcall   __gptrget
03C0 FD        1412            mov     r5,a
03C1 BD2F20    1413            cjne    r5,#0x2F,L019042?
03C4 8001      1414            sjmp    L019001?
03C6           1415   L019042?:
03C6 BD63A0    1416            cjne    r5,#0x63,L019043?
03C9 8001      1417            sjmp    L019002?
03CB           1418   L019043?:
03CB BD6420    1419            cjne    r5,#0x64,L019044?
03CE 8001      1420            sjmp    L019003?
03D0           1421   L019044?:
03D0 BD66A0    1422            cjne    r5,#0x66,L019045?
03D3 8001      1423            sjmp    L019009?
03D5           1424   L019045?:
03D5 BD6820    1425            cjne    r5,#0x68,L019046?
03D8 8001      1426            sjmp    L019010?
03DA           1427   L019046?:
03DA BD69A0    1428            cjne    r5,#0x69,L019047?
03DD 8001      1429            sjmp    L019011?
03DF           1430   L019047?:
03DF BD6F28    1431            cjne    r5,#0x6F,L019048?
03E2 020100    1432            ljmp    L019012?
03E5           1433   L019048?:
03E5 BD72A8    1434            cjne    r5,#0x72,L019049?
03E8 020100    1435            ljmp    L019015?
03EB           1436   L019049?:
03EB BD7328    1437            cjne    r5,#0x73,L019050?
03EE 020100    1438            ljmp    L019016?
03F1           1439   L019050?:
03F1 020100    1440            ljmp    L019019?
03F4           1441   ;        Tcom.h:157: case '/':
03F4           1442   L019001?:
03F4           1443   ;        Tcom.h:158: sendCommandS(input);
03F4 8A82      1444            mov     dpl,r2
03F6 8B83      1445            mov     dph,r3
03F8 8CF0      1446            mov     b,r4
03FA           1447   ;        Tcom.h:159: break;
03FA 020100    1448            ljmp    _sendCommandS
03FD           1449   ;        Tcom.h:160: case 'c':
03FD           1450   L019002?:
03FD           1451   ;        Tcom.h:161: setRotation(input);
03FD 8A82      1452            mov     dpl,r2
03FF 8B83      1453            mov     dph,r3
0401 8CF0      1454            mov     b,r4
0403           1455   ;        Tcom.h:162: break;
0403 020100    1456            ljmp    _setRotation
0406           1457   ;        Tcom.h:163: case 'd':
0406           1458   L019003?:
0406           1459   ;        Tcom.h:164: if (input[2] == '0') {
0406 7402      1460            mov     a,#0x02
0408 2A        1461            add     a,r2
0409 FD        1462            mov     r5,a
040A E4        1463            clr     a
040B 3B        1464            addc    a,r3
040C FE        1465            mov     r6,a
040D 8C07      1466            mov     ar7,r4
040F 8D82      1467            mov     dpl,r5
0411 8E83      1468            mov     dph,r6
0413 8FF0      1469            mov     b,r7
0415 120100    1470            lcall   __gptrget
0418 FD        1471            mov     r5,a
0419 BD30E8    1472            cjne    r5,#0x30,L019007?
041C           1473   ;        Tcom.h:165: setDutyCycle(input, 0);
041C 75C000    1474            mov     _setDutyCycle_PARM_2,#0x00
041F 8A82      1475            mov     dpl,r2
0421 8B83      1476            mov     dph,r3
0423 8CF0      1477            mov     b,r4
0425           1478   ;        Tcom.h:166: break;
0425 020100    1479            ljmp    _setDutyCycle
0428           1480   L019007?:
0428           1481   ;        Tcom.h:167: } else if (input[2] == '1') {
0428 BD31E0    1482            cjne    r5,#0x31,L019009?
042B           1483   ;        Tcom.h:168: setDutyCycle(input, 1);
042B 75C001    1484            mov     _setDutyCycle_PARM_2,#0x01
042E 8A82      1485            mov     dpl,r2
0430 8B83      1486            mov     dph,r3
0432 8CF0      1487            mov     b,r4
0434           1488   ;        Tcom.h:169: break;
0434 020100    1489            ljmp    _setDutyCycle
0437           1490   ;        Tcom.h:171: case 'f':
0437           1491   L019009?:
0437           1492   ;        Tcom.h:172: setFrequency(input);
0437 8A82      1493            mov     dpl,r2
0439 8B83      1494            mov     dph,r3
043B 8CF0      1495            mov     b,r4
043D           1496   ;        Tcom.h:173: break;
043D 020100    1497            ljmp    _setFrequency
0440           1498   ;        Tcom.h:174: case 'h':
0440           1499   L019010?:
0440           1500   ;        Tcom.h:175: printf("Help Menu\r\nList of Commands: \r\n-cw [duty value]\r\n-ccw [duty value]\r\n-d0 [duty value]\r\n-d1 [duty value]\r\n-f [freq value]\r\n-r [reload value]\r\n-o\r\n-s\r\n-i\r\n\n");
0440 7428      1501            mov     a,#__str_8
0442 C0E0      1502            push    acc
0444 74D2      1503            mov     a,#(__str_8 >> 8)
0446 C0E0      1504            push    acc
0448 7480      1505            mov     a,#0x80
044A C0E0      1506            push    acc
044C 120100    1507            lcall   _printf
044F 1581      1508            dec     sp
0451 1581      1509            dec     sp
0453 1581      1510            dec     sp
0455           1511   ;        Tcom.h:176: break;
0455 22        1512            ret
0456           1513   ;        Tcom.h:177: case 'i':
0456           1514   L019011?:
0456           1515   ;        Tcom.h:178: printf("Reload: %u, Freq: %d, duty0: %d, duty1: %d\r\n", TMR2RL, reloadToFrequency(TMR2RL), duty_cycle0, duty_cycle1);
0456 AD50      1516            mov     r5,_duty_cycle1
0458 7E00      1517            mov     r6,#0x00
045A 8590C0    1518            mov     _getCommand_sloc0_1_0,_duty_cycle0
045D 75C100    1519            mov     (_getCommand_sloc0_1_0 + 1),#0x00
0460 85CA82    1520            mov     dpl,_TMR2RL
0463 85CB83    1521            mov     dph,(_TMR2RL >> 8)
0466 C005      1522            push    ar5
0468 C006      1523            push    ar6
046A 120100    1524            lcall   _reloadToFrequency
046D A982      1525            mov     r1,dpl
046F AF83      1526            mov     r7,dph
0471 C0C0      1527            push    _getCommand_sloc0_1_0
0473 C0C1      1528            push    (_getCommand_sloc0_1_0 + 1)
0475 C001      1529            push    ar1
0477 C007      1530            push    ar7
0479 C0CA      1531            push    _TMR2RL
047B C0CB      1532            push    (_TMR2RL >> 8)
047D 7468      1533            mov     a,#__str_9
047F C0E0      1534            push    acc
0481 74D2      1535            mov     a,#(__str_9 >> 8)
0483 C0E0      1536            push    acc
0485 7480      1537            mov     a,#0x80
0487 C0E0      1538            push    acc
0489 120100    1539            lcall   _printf
048C E581      1540            mov     a,sp
048E 24F5      1541            add     a,#0xf5
0490 F581      1542            mov     sp,a
0492           1543   ;        Tcom.h:179: break;
0492           1544   ;        Tcom.h:180: case 'o':
0492 22        1545            ret
0493           1546   L019012?:
0493           1547   ;        Tcom.h:181: if (input[2] == 0)
0493 7402      1548            mov     a,#0x02
0495 2A        1549            add     a,r2
0496 FD        1550            mov     r5,a
0497 E4        1551            clr     a
0498 3B        1552            addc    a,r3
0499 FE        1553            mov     r6,a
049A 8C07      1554            mov     ar7,r4
049C 8D82      1555            mov     dpl,r5
049E 8E83      1556            mov     dph,r6
04A0 8FF0      1557            mov     b,r7
04A2 120100    1558            lcall   __gptrget
04A5 7001      1559            jnz     L019023?
04A7           1560   ;        Tcom.h:182: PWMoff();
04A7           1561   ;        Tcom.h:183: break;      
04A7           1562   ;        Tcom.h:184: case 'r':
04A7 020100    1563            ljmp    _PWMoff
04AA           1564   L019015?:
04AA           1565   ;        Tcom.h:185: setReload(input);
04AA 8A82      1566            mov     dpl,r2
04AC 8B83      1567            mov     dph,r3
04AE 8CF0      1568            mov     b,r4
04B0           1569   ;        Tcom.h:186: break;
04B0           1570   ;        Tcom.h:187: case 's':
04B0 020100    1571            ljmp    _setReload
04B3           1572   L019016?:
04B3           1573   ;        Tcom.h:188: if (input[2] == 0)
04B3 7402      1574            mov     a,#0x02
04B5 2A        1575            add     a,r2
04B6 FD        1576            mov     r5,a
04B7 E4        1577            clr     a
04B8 3B        1578            addc    a,r3
04B9 FE        1579            mov     r6,a
04BA 8C07      1580            mov     ar7,r4
04BC 8D82      1581            mov     dpl,r5
04BE 8E83      1582            mov     dph,r6
04C0 8FF0      1583            mov     b,r7
04C2 120100    1584            lcall   __gptrget
04C5 7001      1585            jnz     L019023?
04C7           1586   ;        Tcom.h:189: PWMon();
04C7           1587   ;        Tcom.h:190: break;
04C7           1588   ;        Tcom.h:191: default:
04C7 020100    1589            ljmp    _PWMon
04CA           1590   L019019?:
04CA           1591   ;        Tcom.h:192: printf("\"%s\" invalid command\r\n", input);
04CA C002      1592            push    ar2
04CC C003      1593            push    ar3
04CE C004      1594            push    ar4
04D0 74E8      1595            mov     a,#__str_10
04D2 C0E0      1596            push    acc
04D4 74D2      1597            mov     a,#(__str_10 >> 8)
04D6 C0E0      1598            push    acc
04D8 7480      1599            mov     a,#0x80
04DA C0E0      1600            push    acc
04DC 120100    1601            lcall   _printf
04DF E581      1602            mov     a,sp
04E1 24FA      1603            add     a,#0xfa
04E3 F581      1604            mov     sp,a
04E5           1605   ;        Tcom.h:194: }
04E5 22        1606            ret
04E6           1607   L019022?:
04E6           1608   ;        Tcom.h:196: printf("Not Valid input\r\n");
04E6 7428      1609            mov     a,#__str_11
04E8 C0E0      1610            push    acc
04EA 74D3      1611            mov     a,#(__str_11 >> 8)
04EC C0E0      1612            push    acc
04EE 7480      1613            mov     a,#0x80
04F0 C0E0      1614            push    acc
04F2 120100    1615            lcall   _printf
04F5 1581      1616            dec     sp
04F7 1581      1617            dec     sp
04F9 1581      1618            dec     sp
04FB           1619   L019023?:
04FB           1620   ;        Tcom.h:198: return;
04FB 22        1621            ret
04FC           1622   ;------------------------------------------------------------
04FC           1623   ;Allocation info for local variables in function 'Tcom_init'
04FC           1624   ;------------------------------------------------------------
04FC           1625   ;baudrate                  Allocated to registers r2 r3 r4 r5 
04FC           1626   ;------------------------------------------------------------
04FC           1627   ;        Tcom.h:201: void Tcom_init(unsigned long baudrate) {
04FC           1628   ;        -----------------------------------------
04FC           1629   ;         function Tcom_init
04FC           1630   ;        -----------------------------------------
04FC           1631   _Tcom_init:
04FC AA82      1632            mov     r2,dpl
04FE AB83      1633            mov     r3,dph
0500 ACF0      1634            mov     r4,b
0502 FD        1635            mov     r5,a
0503           1636   ;        Tcom.h:202: Timer2_init();
0503 C002      1637            push    ar2
0505 C003      1638            push    ar3
0507 C004      1639            push    ar4
0509 C005      1640            push    ar5
050B 120100    1641            lcall   _Timer2_init
050E           1642   ;        Tcom.h:203: Timer4_init();
050E 120100    1643            lcall   _Timer4_init
0511 D005      1644            pop     ar5
0513 D004      1645            pop     ar4
0515 D003      1646            pop     ar3
0517 D002      1647            pop     ar2
0519           1648   ;        Tcom.h:204: UART1_Init(baudrate);
0519 8A82      1649            mov     dpl,r2
051B 8B83      1650            mov     dph,r3
051D 8CF0      1651            mov     b,r4
051F ED        1652            mov     a,r5
0520 020100    1653            ljmp    _UART1_Init
0523           1654   ;------------------------------------------------------------
0523           1655   ;Allocation info for local variables in function 'Timer3us'
0523           1656   ;------------------------------------------------------------
0523           1657   ;us                        Allocated to registers r2 
0523           1658   ;i                         Allocated to registers r3 
0523           1659   ;------------------------------------------------------------
0523           1660   ;        EFM8core.h:8: void Timer3us(unsigned char us)
0523           1661   ;        -----------------------------------------
0523           1662   ;         function Timer3us
0523           1663   ;        -----------------------------------------
0523           1664   _Timer3us:
0523 AA82      1665            mov     r2,dpl
0525           1666   ;        EFM8core.h:12: SFRPAGE=0x00;
0525 75A700    1667            mov     _SFRPAGE,#0x00
0528           1668   ;        EFM8core.h:14: CKCON0|=0b_0100_0000;
0528 438E40    1669            orl     _CKCON0,#0x40
052B           1670   ;        EFM8core.h:16: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
052B 7592B8    1671            mov     _TMR3RL,#0xB8
052E 7593FF    1672            mov     (_TMR3RL >> 8),#0xFF
0531           1673   ;        EFM8core.h:17: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0531 859294    1674            mov     _TMR3,_TMR3RL
0534 859395    1675            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0537           1676   ;        EFM8core.h:19: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0537 759104    1677            mov     _TMR3CN0,#0x04
053A           1678   ;        EFM8core.h:20: for (i = 0; i < us; i++)       // Count <us> overflows
053A 7B00      1679            mov     r3,#0x00
053C           1680   L021004?:
053C C3        1681            clr     c
053D EB        1682            mov     a,r3
053E 9A        1683            subb    a,r2
053F 5001      1684            jnc     L021007?
0541           1685   ;        EFM8core.h:22: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0541           1686   L021001?:
0541 E591      1687            mov     a,_TMR3CN0
0543 30E7E8    1688            jnb     acc.7,L021001?
0546           1689   ;        EFM8core.h:23: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0546 53917F    1690            anl     _TMR3CN0,#0x7F
0549           1691   ;        EFM8core.h:20: for (i = 0; i < us; i++)       // Count <us> overflows
0549 0B        1692            inc     r3
054A 8001      1693            sjmp    L021004?
054C           1694   L021007?:
054C           1695   ;        EFM8core.h:25: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
054C 759100    1696            mov     _TMR3CN0,#0x00
054F 22        1697            ret
0550           1698   ;------------------------------------------------------------
0550           1699   ;Allocation info for local variables in function 'waitms'
0550           1700   ;------------------------------------------------------------
0550           1701   ;ms                        Allocated to registers r2 r3 
0550           1702   ;j                         Allocated to registers r2 r3 
0550           1703   ;------------------------------------------------------------
0550           1704   ;        EFM8core.h:28: void waitms (unsigned int ms)
0550           1705   ;        -----------------------------------------
0550           1706   ;         function waitms
0550           1707   ;        -----------------------------------------
0550           1708   _waitms:
0550 AA82      1709            mov     r2,dpl
0552 AB83      1710            mov     r3,dph
0554           1711   ;        EFM8core.h:31: for(j=ms; j!=0; j--)
0554           1712   L022001?:
0554 BA0068    1713            cjne    r2,#0x00,L022010?
0557 BB0068    1714            cjne    r3,#0x00,L022010?
055A 22        1715            ret
055B           1716   L022010?:
055B           1717   ;        EFM8core.h:33: Timer3us(249);
055B 7582F9    1718            mov     dpl,#0xF9
055E C002      1719            push    ar2
0560 C003      1720            push    ar3
0562 120100    1721            lcall   _Timer3us
0565           1722   ;        EFM8core.h:34: Timer3us(249);
0565 7582F9    1723            mov     dpl,#0xF9
0568 120100    1724            lcall   _Timer3us
056B           1725   ;        EFM8core.h:35: Timer3us(249);
056B 7582F9    1726            mov     dpl,#0xF9
056E 120100    1727            lcall   _Timer3us
0571           1728   ;        EFM8core.h:36: Timer3us(250);
0571 7582FA    1729            mov     dpl,#0xFA
0574 120100    1730            lcall   _Timer3us
0577 D003      1731            pop     ar3
0579 D002      1732            pop     ar2
057B           1733   ;        EFM8core.h:31: for(j=ms; j!=0; j--)
057B 1A        1734            dec     r2
057C BAFFA8    1735            cjne    r2,#0xff,L022011?
057F 1B        1736            dec     r3
0580           1737   L022011?:
0580 8001      1738            sjmp    L022001?
0582           1739   ;------------------------------------------------------------
0582           1740   ;Allocation info for local variables in function 'LCD_pulse'
0582           1741   ;------------------------------------------------------------
0582           1742   ;------------------------------------------------------------
0582           1743   ;        EFM8LCDlib.h:15: void LCD_pulse (void)
0582           1744   ;        -----------------------------------------
0582           1745   ;         function LCD_pulse
0582           1746   ;        -----------------------------------------
0582           1747   _LCD_pulse:
0582           1748   ;        EFM8LCDlib.h:17: LCD_E=1;
0582 D2A5      1749            setb    _P2_5
0584           1750   ;        EFM8LCDlib.h:18: Timer3us(40);
0584 758228    1751            mov     dpl,#0x28
0587 120100    1752            lcall   _Timer3us
058A           1753   ;        EFM8LCDlib.h:19: LCD_E=0;
058A C2A5      1754            clr     _P2_5
058C 22        1755            ret
058D           1756   ;------------------------------------------------------------
058D           1757   ;Allocation info for local variables in function 'LCD_byte'
058D           1758   ;------------------------------------------------------------
058D           1759   ;x                         Allocated to registers r2 
058D           1760   ;------------------------------------------------------------
058D           1761   ;        EFM8LCDlib.h:22: void LCD_byte (unsigned char x)
058D           1762   ;        -----------------------------------------
058D           1763   ;         function LCD_byte
058D           1764   ;        -----------------------------------------
058D           1765   _LCD_byte:
058D AA82      1766            mov     r2,dpl
058F           1767   ;        EFM8LCDlib.h:25: ACC=x; //Send high nible
058F 8AE0      1768            mov     _ACC,r2
0591           1769   ;        EFM8LCDlib.h:26: LCD_D7=ACC_7;
0591 A2E7      1770            mov     c,_ACC_7
0593 92A1      1771            mov     _P2_1,c
0595           1772   ;        EFM8LCDlib.h:27: LCD_D6=ACC_6;
0595 A2E6      1773            mov     c,_ACC_6
0597 92A2      1774            mov     _P2_2,c
0599           1775   ;        EFM8LCDlib.h:28: LCD_D5=ACC_5;
0599 A2E5      1776            mov     c,_ACC_5
059B 92A3      1777            mov     _P2_3,c
059D           1778   ;        EFM8LCDlib.h:29: LCD_D4=ACC_4;
059D A2E4      1779            mov     c,_ACC_4
059F 92A4      1780            mov     _P2_4,c
05A1           1781   ;        EFM8LCDlib.h:30: LCD_pulse();
05A1 C002      1782            push    ar2
05A3 120100    1783            lcall   _LCD_pulse
05A6           1784   ;        EFM8LCDlib.h:31: Timer3us(40);
05A6 758228    1785            mov     dpl,#0x28
05A9 120100    1786            lcall   _Timer3us
05AC D002      1787            pop     ar2
05AE           1788   ;        EFM8LCDlib.h:32: ACC=x; //Send low nible
05AE 8AE0      1789            mov     _ACC,r2
05B0           1790   ;        EFM8LCDlib.h:33: LCD_D7=ACC_3;
05B0 A2E3      1791            mov     c,_ACC_3
05B2 92A1      1792            mov     _P2_1,c
05B4           1793   ;        EFM8LCDlib.h:34: LCD_D6=ACC_2;
05B4 A2E2      1794            mov     c,_ACC_2
05B6 92A2      1795            mov     _P2_2,c
05B8           1796   ;        EFM8LCDlib.h:35: LCD_D5=ACC_1;
05B8 A2E1      1797            mov     c,_ACC_1
05BA 92A3      1798            mov     _P2_3,c
05BC           1799   ;        EFM8LCDlib.h:36: LCD_D4=ACC_0;
05BC A2E0      1800            mov     c,_ACC_0
05BE 92A4      1801            mov     _P2_4,c
05C0           1802   ;        EFM8LCDlib.h:37: LCD_pulse();
05C0 020100    1803            ljmp    _LCD_pulse
05C3           1804   ;------------------------------------------------------------
05C3           1805   ;Allocation info for local variables in function 'WriteData'
05C3           1806   ;------------------------------------------------------------
05C3           1807   ;x                         Allocated to registers r2 
05C3           1808   ;------------------------------------------------------------
05C3           1809   ;        EFM8LCDlib.h:40: void WriteData (unsigned char x)
05C3           1810   ;        -----------------------------------------
05C3           1811   ;         function WriteData
05C3           1812   ;        -----------------------------------------
05C3           1813   _WriteData:
05C3 AA82      1814            mov     r2,dpl
05C5           1815   ;        EFM8LCDlib.h:42: LCD_RS=1;
05C5 D2A6      1816            setb    _P2_6
05C7           1817   ;        EFM8LCDlib.h:43: LCD_byte(x);
05C7 8A82      1818            mov     dpl,r2
05C9 120100    1819            lcall   _LCD_byte
05CC           1820   ;        EFM8LCDlib.h:44: waitms(2);
05CC 900002    1821            mov     dptr,#0x0002
05CF 020100    1822            ljmp    _waitms
05D2           1823   ;------------------------------------------------------------
05D2           1824   ;Allocation info for local variables in function 'WriteCommand'
05D2           1825   ;------------------------------------------------------------
05D2           1826   ;x                         Allocated to registers r2 
05D2           1827   ;------------------------------------------------------------
05D2           1828   ;        EFM8LCDlib.h:47: void WriteCommand (unsigned char x)
05D2           1829   ;        -----------------------------------------
05D2           1830   ;         function WriteCommand
05D2           1831   ;        -----------------------------------------
05D2           1832   _WriteCommand:
05D2 AA82      1833            mov     r2,dpl
05D4           1834   ;        EFM8LCDlib.h:49: LCD_RS=0;
05D4 C2A6      1835            clr     _P2_6
05D6           1836   ;        EFM8LCDlib.h:50: LCD_byte(x);
05D6 8A82      1837            mov     dpl,r2
05D8 120100    1838            lcall   _LCD_byte
05DB           1839   ;        EFM8LCDlib.h:51: waitms(5);
05DB 900005    1840            mov     dptr,#0x0005
05DE 020100    1841            ljmp    _waitms
05E1           1842   ;------------------------------------------------------------
05E1           1843   ;Allocation info for local variables in function 'LCD_4BIT'
05E1           1844   ;------------------------------------------------------------
05E1           1845   ;------------------------------------------------------------
05E1           1846   ;        EFM8LCDlib.h:54: void LCD_4BIT (void)
05E1           1847   ;        -----------------------------------------
05E1           1848   ;         function LCD_4BIT
05E1           1849   ;        -----------------------------------------
05E1           1850   _LCD_4BIT:
05E1           1851   ;        EFM8LCDlib.h:56: LCD_E=0; // Resting state of LCD's enable is zero
05E1 C2A5      1852            clr     _P2_5
05E3           1853   ;        EFM8LCDlib.h:58: waitms(20);
05E3 900014    1854            mov     dptr,#0x0014
05E6 120100    1855            lcall   _waitms
05E9           1856   ;        EFM8LCDlib.h:60: WriteCommand(0x33);
05E9 758233    1857            mov     dpl,#0x33
05EC 120100    1858            lcall   _WriteCommand
05EF           1859   ;        EFM8LCDlib.h:61: WriteCommand(0x33);
05EF 758233    1860            mov     dpl,#0x33
05F2 120100    1861            lcall   _WriteCommand
05F5           1862   ;        EFM8LCDlib.h:62: WriteCommand(0x32); // Change to 4-bit mode
05F5 758232    1863            mov     dpl,#0x32
05F8 120100    1864            lcall   _WriteCommand
05FB           1865   ;        EFM8LCDlib.h:65: WriteCommand(0x28);
05FB 758228    1866            mov     dpl,#0x28
05FE 120100    1867            lcall   _WriteCommand
0601           1868   ;        EFM8LCDlib.h:66: WriteCommand(0x0c);
0601 75820C    1869            mov     dpl,#0x0C
0604 120100    1870            lcall   _WriteCommand
0607           1871   ;        EFM8LCDlib.h:67: WriteCommand(0x01); // Clear screen command (takes some time)
0607 758201    1872            mov     dpl,#0x01
060A 120100    1873            lcall   _WriteCommand
060D           1874   ;        EFM8LCDlib.h:68: waitms(20); // Wait for clear screen command to finsih.
060D 900014    1875            mov     dptr,#0x0014
0610 020100    1876            ljmp    _waitms
0613           1877   ;------------------------------------------------------------
0613           1878   ;Allocation info for local variables in function 'LCDprint'
0613           1879   ;------------------------------------------------------------
0613           1880   ;line                      Allocated with name '_LCDprint_PARM_2'
0613           1881   ;string                    Allocated to registers r2 r3 r4 
0613           1882   ;j                         Allocated to registers r5 r6 
0613           1883   ;------------------------------------------------------------
0613           1884   ;        EFM8LCDlib.h:71: void LCDprint(char * string, unsigned char line, bit clear)
0613           1885   ;        -----------------------------------------
0613           1886   ;         function LCDprint
0613           1887   ;        -----------------------------------------
0613           1888   _LCDprint:
0613 AA82      1889            mov     r2,dpl
0615 AB83      1890            mov     r3,dph
0617 ACF0      1891            mov     r4,b
0619           1892   ;        EFM8LCDlib.h:75: WriteCommand(line==2?0xc0:0x80);
0619 7402      1893            mov     a,#0x02
061B B570E8    1894            cjne    a,_LCDprint_PARM_2,L028013?
061E 7DC0      1895            mov     r5,#0xC0
0620 8001      1896            sjmp    L028014?
0622           1897   L028013?:
0622 7D80      1898            mov     r5,#0x80
0624           1899   L028014?:
0624 8D82      1900            mov     dpl,r5
0626 C002      1901            push    ar2
0628 C003      1902            push    ar3
062A C004      1903            push    ar4
062C 120100    1904            lcall   _WriteCommand
062F           1905   ;        EFM8LCDlib.h:76: waitms(5);
062F 900005    1906            mov     dptr,#0x0005
0632 120100    1907            lcall   _waitms
0635 D004      1908            pop     ar4
0637 D003      1909            pop     ar3
0639 D002      1910            pop     ar2
063B           1911   ;        EFM8LCDlib.h:77: for(j=0; string[j]!=0; j++)    WriteData(string[j]);// Write the message
063B 7D00      1912            mov     r5,#0x00
063D 7E00      1913            mov     r6,#0x00
063F           1914   L028003?:
063F ED        1915            mov     a,r5
0640 2A        1916            add     a,r2
0641 FF        1917            mov     r7,a
0642 EE        1918            mov     a,r6
0643 3B        1919            addc    a,r3
0644 F8        1920            mov     r0,a
0645 8C01      1921            mov     ar1,r4
0647 8F82      1922            mov     dpl,r7
0649 8883      1923            mov     dph,r0
064B 89F0      1924            mov     b,r1
064D 120100    1925            lcall   __gptrget
0650 FF        1926            mov     r7,a
0651 6001      1927            jz      L028006?
0653 8F82      1928            mov     dpl,r7
0655 C002      1929            push    ar2
0657 C003      1930            push    ar3
0659 C004      1931            push    ar4
065B C005      1932            push    ar5
065D C006      1933            push    ar6
065F 120100    1934            lcall   _WriteData
0662 D006      1935            pop     ar6
0664 D005      1936            pop     ar5
0666 D004      1937            pop     ar4
0668 D003      1938            pop     ar3
066A D002      1939            pop     ar2
066C 0D        1940            inc     r5
066D BD0068    1941            cjne    r5,#0x00,L028003?
0670 0E        1942            inc     r6
0671 8001      1943            sjmp    L028003?
0673           1944   L028006?:
0673           1945   ;        EFM8LCDlib.h:78: if(clear) for(; j<CHARS_PER_LINE; j++) WriteData(' '); // Clear the rest of the line
0673 30A0E8    1946            jnb     _LCDprint_PARM_3,L028011?
0676 8D02      1947            mov     ar2,r5
0678 8E03      1948            mov     ar3,r6
067A           1949   L028007?:
067A C3        1950            clr     c
067B EA        1951            mov     a,r2
067C 9410      1952            subb    a,#0x10
067E EB        1953            mov     a,r3
067F 6480      1954            xrl     a,#0x80
0681 9480      1955            subb    a,#0x80
0683 5001      1956            jnc     L028011?
0685 758220    1957            mov     dpl,#0x20
0688 C002      1958            push    ar2
068A C003      1959            push    ar3
068C 120100    1960            lcall   _WriteData
068F D003      1961            pop     ar3
0691 D002      1962            pop     ar2
0693 0A        1963            inc     r2
0694 BA0028    1964            cjne    r2,#0x00,L028007?
0697 0B        1965            inc     r3
0698 8001      1966            sjmp    L028007?
069A           1967   L028011?:
069A 22        1968            ret
069B           1969   ;------------------------------------------------------------
069B           1970   ;Allocation info for local variables in function '_c51_external_startup'
069B           1971   ;------------------------------------------------------------
069B           1972   ;------------------------------------------------------------
069B           1973   ;        Transmitter_src.c:13: char _c51_external_startup (void)
069B           1974   ;        -----------------------------------------
069B           1975   ;         function _c51_external_startup
069B           1976   ;        -----------------------------------------
069B           1977   __c51_external_startup:
069B           1978   ;        Transmitter_src.c:16: SFRPAGE = 0x00;
069B 75A700    1979            mov     _SFRPAGE,#0x00
069E           1980   ;        Transmitter_src.c:17: WDTCN = 0xDE; //First key
069E 7597DE    1981            mov     _WDTCN,#0xDE
06A1           1982   ;        Transmitter_src.c:18: WDTCN = 0xAD; //Second key
06A1 7597AD    1983            mov     _WDTCN,#0xAD
06A4           1984   ;        Transmitter_src.c:20: VDM0CN |= 0x80;  // enable VDD mon
06A4 43FF80    1985            orl     _VDM0CN,#0x80
06A7           1986   ;        Transmitter_src.c:21: RSTSRC = 0x02;
06A7 75EF02    1987            mov     _RSTSRC,#0x02
06AA           1988   ;        Transmitter_src.c:28: SFRPAGE = 0x10;
06AA 75A710    1989            mov     _SFRPAGE,#0x10
06AD           1990   ;        Transmitter_src.c:29: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
06AD 75C120    1991            mov     _PFE0CN,#0x20
06B0           1992   ;        Transmitter_src.c:30: SFRPAGE = 0x00;
06B0 75A700    1993            mov     _SFRPAGE,#0x00
06B3           1994   ;        Transmitter_src.c:51: CLKSEL = 0x00;
06B3 75A900    1995            mov     _CLKSEL,#0x00
06B6           1996   ;        Transmitter_src.c:52: CLKSEL = 0x00;
06B6 75A900    1997            mov     _CLKSEL,#0x00
06B9           1998   ;        Transmitter_src.c:53: while ((CLKSEL & 0x80) == 0);
06B9           1999   L029001?:
06B9 E5A9      2000            mov     a,_CLKSEL
06BB 30E768    2001            jnb     acc.7,L029001?
06BE           2002   ;        Transmitter_src.c:54: CLKSEL = 0x03;
06BE 75A903    2003            mov     _CLKSEL,#0x03
06C1           2004   ;        Transmitter_src.c:55: CLKSEL = 0x03;
06C1 75A903    2005            mov     _CLKSEL,#0x03
06C4           2006   ;        Transmitter_src.c:56: while ((CLKSEL & 0x80) == 0);
06C4           2007   L029004?:
06C4 E5A9      2008            mov     a,_CLKSEL
06C6 30E7A8    2009            jnb     acc.7,L029004?
06C9           2010   ;        Transmitter_src.c:61: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
06C9 43A410    2011            orl     _P0MDOUT,#0x10
06CC           2012   ;        Transmitter_src.c:62: P1MDOUT |= 0xff; // Enable Push/Pull on port 1
06CC E5A5      2013            mov     a,_P1MDOUT
06CE 75A5FF    2014            mov     _P1MDOUT,#0xFF
06D1           2015   ;        Transmitter_src.c:63: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
06D1 75E101    2016            mov     _XBR0,#0x01
06D4           2017   ;        Transmitter_src.c:64: XBR1     = 0X00; // Enable T0 on P0.0
06D4 75E200    2018            mov     _XBR1,#0x00
06D7           2019   ;        Transmitter_src.c:65: XBR2     = 0x40; // Enable crossbar and weak pull-ups
06D7 75E340    2020            mov     _XBR2,#0x40
06DA           2021   ;        Transmitter_src.c:71: SCON0 = 0x10;
06DA 759810    2022            mov     _SCON0,#0x10
06DD           2023   ;        Transmitter_src.c:72: CKCON0 |= 0b_0000_0000 ; // Timer 1 uses the system clock divided by 12.
06DD 858E8E    2024            mov     _CKCON0,_CKCON0
06E0           2025   ;        Transmitter_src.c:73: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
06E0 758DE6    2026            mov     _TH1,#0xE6
06E3           2027   ;        Transmitter_src.c:74: TL1 = TH1;      // Init Timer1
06E3 858D8B    2028            mov     _TL1,_TH1
06E6           2029   ;        Transmitter_src.c:75: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
06E6 53890F    2030            anl     _TMOD,#0x0F
06E9           2031   ;        Transmitter_src.c:76: TMOD |=  0x20;                       
06E9 438920    2032            orl     _TMOD,#0x20
06EC           2033   ;        Transmitter_src.c:77: TR1 = 1; // START Timer1
06EC D28E      2034            setb    _TR1
06EE           2035   ;        Transmitter_src.c:78: TI = 1;  // Indicate TX0 ready
06EE D299      2036            setb    _TI
06F0           2037   ;        Transmitter_src.c:80: EA = 1;
06F0 D2AF      2038            setb    _EA
06F2           2039   ;        Transmitter_src.c:82: return 0;
06F2 758200    2040            mov     dpl,#0x00
06F5 22        2041            ret
06F6           2042   ;------------------------------------------------------------
06F6           2043   ;Allocation info for local variables in function 'getsn'
06F6           2044   ;------------------------------------------------------------
06F6           2045   ;len                       Allocated with name '_getsn_PARM_2'
06F6           2046   ;buff                      Allocated with name '_getsn_buff_1_134'
06F6           2047   ;j                         Allocated with name '_getsn_sloc0_1_0'
06F6           2048   ;c                         Allocated to registers r3 
06F6           2049   ;sloc0                     Allocated with name '_getsn_sloc0_1_0'
06F6           2050   ;------------------------------------------------------------
06F6           2051   ;        Transmitter_src.c:86: int getsn (char * buff, int len)
06F6           2052   ;        -----------------------------------------
06F6           2053   ;         function getsn
06F6           2054   ;        -----------------------------------------
06F6           2055   _getsn:
06F6 858210    2056            mov     _getsn_buff_1_134,dpl
06F9 858311    2057            mov     (_getsn_buff_1_134 + 1),dph
06FC 85F012    2058            mov     (_getsn_buff_1_134 + 2),b
06FF           2059   ;        Transmitter_src.c:91: for(j=0; j<(len-1); j++)
06FF E4        2060            clr     a
0700 F560      2061            mov     _getsn_sloc0_1_0,a
0702 F561      2062            mov     (_getsn_sloc0_1_0 + 1),a
0704 E520      2063            mov     a,_getsn_PARM_2
0706 24FF      2064            add     a,#0xff
0708 FF        2065            mov     r7,a
0709 E521      2066            mov     a,(_getsn_PARM_2 + 1)
070B 34FF      2067            addc    a,#0xff
070D F8        2068            mov     r0,a
070E 7900      2069            mov     r1,#0x00
0710 7A00      2070            mov     r2,#0x00
0712           2071   L030005?:
0712 C3        2072            clr     c
0713 E9        2073            mov     a,r1
0714 9F        2074            subb    a,r7
0715 EA        2075            mov     a,r2
0716 6480      2076            xrl     a,#0x80
0718 88F0      2077            mov     b,r0
071A 63F080    2078            xrl     b,#0x80
071D 95F0      2079            subb    a,b
071F 5001      2080            jnc     L030008?
0721           2081   ;        Transmitter_src.c:93: c=getchar();
0721 C002      2082            push    ar2
0723 C007      2083            push    ar7
0725 C000      2084            push    ar0
0727 C001      2085            push    ar1
0729 120100    2086            lcall   _getchar
072C AB82      2087            mov     r3,dpl
072E D001      2088            pop     ar1
0730 D000      2089            pop     ar0
0732 D007      2090            pop     ar7
0734 D002      2091            pop     ar2
0736           2092   ;        Transmitter_src.c:94: if ( (c=='\n') || (c=='\r') )
0736 BB0AA8    2093            cjne    r3,#0x0A,L030015?
0739 8001      2094            sjmp    L030001?
073B           2095   L030015?:
073B BB0D28    2096            cjne    r3,#0x0D,L030002?
073E           2097   L030001?:
073E           2098   ;        Transmitter_src.c:96: buff[j]=0;
073E E560      2099            mov     a,_getsn_sloc0_1_0
0740 2510      2100            add     a,_getsn_buff_1_134
0742 FC        2101            mov     r4,a
0743 E561      2102            mov     a,(_getsn_sloc0_1_0 + 1)
0745 3511      2103            addc    a,(_getsn_buff_1_134 + 1)
0747 FD        2104            mov     r5,a
0748 AE12      2105            mov     r6,(_getsn_buff_1_134 + 2)
074A 8C82      2106            mov     dpl,r4
074C 8D83      2107            mov     dph,r5
074E 8EF0      2108            mov     b,r6
0750 E4        2109            clr     a
0751 120100    2110            lcall   __gptrput
0754           2111   ;        Transmitter_src.c:97: return j;
0754 856082    2112            mov     dpl,_getsn_sloc0_1_0
0757 856183    2113            mov     dph,(_getsn_sloc0_1_0 + 1)
075A 22        2114            ret
075B           2115   L030002?:
075B           2116   ;        Transmitter_src.c:101: buff[j]=c;
075B E9        2117            mov     a,r1
075C 2510      2118            add     a,_getsn_buff_1_134
075E FC        2119            mov     r4,a
075F EA        2120            mov     a,r2
0760 3511      2121            addc    a,(_getsn_buff_1_134 + 1)
0762 FD        2122            mov     r5,a
0763 AE12      2123            mov     r6,(_getsn_buff_1_134 + 2)
0765 8C82      2124            mov     dpl,r4
0767 8D83      2125            mov     dph,r5
0769 8EF0      2126            mov     b,r6
076B EB        2127            mov     a,r3
076C 120100    2128            lcall   __gptrput
076F           2129   ;        Transmitter_src.c:91: for(j=0; j<(len-1); j++)
076F 09        2130            inc     r1
0770 B900A8    2131            cjne    r1,#0x00,L030018?
0773 0A        2132            inc     r2
0774           2133   L030018?:
0774 8960      2134            mov     _getsn_sloc0_1_0,r1
0776 8A61      2135            mov     (_getsn_sloc0_1_0 + 1),r2
0778 8001      2136            sjmp    L030005?
077A           2137   L030008?:
077A           2138   ;        Transmitter_src.c:104: buff[j]=0;
077A E560      2139            mov     a,_getsn_sloc0_1_0
077C 2510      2140            add     a,_getsn_buff_1_134
077E FA        2141            mov     r2,a
077F E561      2142            mov     a,(_getsn_sloc0_1_0 + 1)
0781 3511      2143            addc    a,(_getsn_buff_1_134 + 1)
0783 FB        2144            mov     r3,a
0784 AC12      2145            mov     r4,(_getsn_buff_1_134 + 2)
0786 8A82      2146            mov     dpl,r2
0788 8B83      2147            mov     dph,r3
078A 8CF0      2148            mov     b,r4
078C E4        2149            clr     a
078D 120100    2150            lcall   __gptrput
0790           2151   ;        Transmitter_src.c:105: return len;
0790 852082    2152            mov     dpl,_getsn_PARM_2
0793 852183    2153            mov     dph,(_getsn_PARM_2 + 1)
0796 22        2154            ret
0797           2155   ;------------------------------------------------------------
0797           2156   ;Allocation info for local variables in function 'main'
0797           2157   ;------------------------------------------------------------
0797           2158   ;buffer                    Allocated with name '_main_buffer_1_140'
0797           2159   ;------------------------------------------------------------
0797           2160   ;        Transmitter_src.c:108: void main(void) {
0797           2161   ;        -----------------------------------------
0797           2162   ;         function main
0797           2163   ;        -----------------------------------------
0797           2164   _main:
0797           2165   ;        Transmitter_src.c:111: Tcom_init(115200L);
0797 90C200    2166            mov     dptr,#0xC200
079A 75F001    2167            mov     b,#0x01
079D E4        2168            clr     a
079E 120100    2169            lcall   _Tcom_init
07A1           2170   ;        Transmitter_src.c:112: LCD_4BIT();
07A1 120100    2171            lcall   _LCD_4BIT
07A4           2172   ;        Transmitter_src.c:114: waitms(500);
07A4 9001F4    2173            mov     dptr,#0x01F4
07A7 120100    2174            lcall   _waitms
07AA           2175   ;        Transmitter_src.c:116: printf("LAB 6 Microcontroller\r\nWith extra features\r\n\n");
07AA 74E8      2176            mov     a,#__str_12
07AC C0E0      2177            push    acc
07AE 74D8      2178            mov     a,#(__str_12 >> 8)
07B0 C0E0      2179            push    acc
07B2 7480      2180            mov     a,#0x80
07B4 C0E0      2181            push    acc
07B6 120100    2182            lcall   _printf
07B9 1581      2183            dec     sp
07BB 1581      2184            dec     sp
07BD 1581      2185            dec     sp
07BF           2186   ;        Transmitter_src.c:118: LCDprint("Duty cycle:", 1, 1);
07BF 757001    2187            mov     _LCDprint_PARM_2,#0x01
07C2 D2A0      2188            setb    _LCDprint_PARM_3
07C4 90D928    2189            mov     dptr,#__str_13
07C7 75F080    2190            mov     b,#0x80
07CA 120100    2191            lcall   _LCDprint
07CD           2192   ;        Transmitter_src.c:120: while(1)
07CD           2193   L031002?:
07CD           2194   ;        Transmitter_src.c:122: sprintf(buffer, "%d%c %d%c", duty_cycle0, '%', duty_cycle1, '%');
07CD AA50      2195            mov     r2,_duty_cycle1
07CF 7B00      2196            mov     r3,#0x00
07D1 AC90      2197            mov     r4,_duty_cycle0
07D3 7D00      2198            mov     r5,#0x00
07D5 7425      2199            mov     a,#0x25
07D7 C0E0      2200            push    acc
07D9 E4        2201            clr     a
07DA C0E0      2202            push    acc
07DC C002      2203            push    ar2
07DE C003      2204            push    ar3
07E0 7425      2205            mov     a,#0x25
07E2 C0E0      2206            push    acc
07E4 E4        2207            clr     a
07E5 C0E0      2208            push    acc
07E7 C004      2209            push    ar4
07E9 C005      2210            push    ar5
07EB 74A8      2211            mov     a,#__str_14
07ED C0E0      2212            push    acc
07EF 74D9      2213            mov     a,#(__str_14 >> 8)
07F1 C0E0      2214            push    acc
07F3 7480      2215            mov     a,#0x80
07F5 C0E0      2216            push    acc
07F7 74B0      2217            mov     a,#_main_buffer_1_140
07F9 C0E0      2218            push    acc
07FB 74C0      2219            mov     a,#(_main_buffer_1_140 >> 8)
07FD C0E0      2220            push    acc
07FF 7440      2221            mov     a,#0x40
0801 C0E0      2222            push    acc
0803 120100    2223            lcall   _sprintf
0806 E581      2224            mov     a,sp
0808 24F2      2225            add     a,#0xf2
080A F581      2226            mov     sp,a
080C           2227   ;        Transmitter_src.c:123: LCDprint(buffer, 2, 1);
080C 757002    2228            mov     _LCDprint_PARM_2,#0x02
080F D2A0      2229            setb    _LCDprint_PARM_3
0811 90C0B0    2230            mov     dptr,#_main_buffer_1_140
0814 75F040    2231            mov     b,#0x40
0817 120100    2232            lcall   _LCDprint
081A           2233   ;        Transmitter_src.c:125: printf("Enter command: \r\n");
081A 7428      2234            mov     a,#__str_15
081C C0E0      2235            push    acc
081E 74DA      2236            mov     a,#(__str_15 >> 8)
0820 C0E0      2237            push    acc
0822 7480      2238            mov     a,#0x80
0824 C0E0      2239            push    acc
0826 120100    2240            lcall   _printf
0829 1581      2241            dec     sp
082B 1581      2242            dec     sp
082D 1581      2243            dec     sp
082F           2244   ;        Transmitter_src.c:126: getsn(buffer, CHARS_PER_LINE);
082F 752010    2245            mov     _getsn_PARM_2,#0x10
0832 E4        2246            clr     a
0833 F521      2247            mov     (_getsn_PARM_2 + 1),a
0835 90C0B0    2248            mov     dptr,#_main_buffer_1_140
0838 75F040    2249            mov     b,#0x40
083B 120100    2250            lcall   _getsn
083E           2251   ;        Transmitter_src.c:127: getCommand(buffer);
083E 90C0B0    2252            mov     dptr,#_main_buffer_1_140
0841 75F040    2253            mov     b,#0x40
0844 120100    2254            lcall   _getCommand
0847 020100    2255            ljmp    L031002?
084A           2256            rseg R_CSEG
084A           2257   
0000           2258            rseg R_XINIT
0000           2259   
0000           2260            rseg R_CONST
0000           2261   __str_0:
0000 53656E74  2262            db 'Sent: %d'
     3A202564
0008 0D        2263            db 0x0D
0009 0A        2264            db 0x0A
000A 00        2265            db 0x00
000B           2266   __str_1:
000B 63206572  2267            db 'c err'
     72
0010 0D        2268            db 0x0D
0011 0A        2269            db 0x0A
0012 00        2270            db 0x00
0013           2271   __str_2:
0013 252A7320  2272            db '%*s %c %c'
     25632025
     63
001C 00        2273            db 0x00
001D           2274   __str_3:
001D 252A7320  2275            db '%*s %d'
     2564
0023 00        2276            db 0x00
0024           2277   __str_4:
0024 44757479  2278            db 'Duty Cycle 0 set to: %u'
     20437963
     6C652030
     20736574
     20746F3A
     202575
003B 0D        2279            db 0x0D
003C 0A        2280            db 0x0A
003D 00        2281            db 0x00
003E           2282   __str_5:
003E 44757479  2283            db 'Duty Cycle 1 set to: %u'
     20437963
     6C652031
     20736574
     20746F3A
     202575
0055 0D        2284            db 0x0D
0056 0A        2285            db 0x0A
0057 00        2286            db 0x00
0058           2287   __str_6:
0058 252A7320  2288            db '%*s %u'
     2575
005E 00        2289            db 0x00
005F           2290   __str_7:
005F 496E7661  2291            db 'Invalid direction. Use -cw or -ccw'
     6C696420
     64697265
     6374696F
     6E2E2055
     7365202D
     6377206F
     72202D63
     6377
0081 0D        2292            db 0x0D
0082 0A        2293            db 0x0A
0083 00        2294            db 0x00
0084           2295   __str_8:
0084 48656C70  2296            db 'Help Menu'
     204D656E
     75
008D 0D        2297            db 0x0D
008E 0A        2298            db 0x0A
008F 4C697374  2299            db 'List of Commands: '
     206F6620
     436F6D6D
     616E6473
     3A20
00A1 0D        2300            db 0x0D
00A2 0A        2301            db 0x0A
00A3 2D637720  2302            db '-cw [duty value]'
     5B647574
     79207661
     6C75655D
00B3 0D        2303            db 0x0D
00B4 0A        2304            db 0x0A
00B5 2D636377  2305            db '-ccw [duty '
     205B6475
     747920
00C0 76616C75  2306            db 'value]'
     655D
00C6 0D        2307            db 0x0D
00C7 0A        2308            db 0x0A
00C8 2D643020  2309            db '-d0 [duty value]'
     5B647574
     79207661
     6C75655D
00D8 0D        2310            db 0x0D
00D9 0A        2311            db 0x0A
00DA 2D643120  2312            db '-d1 [duty value]'
     5B647574
     79207661
     6C75655D
00EA 0D        2313            db 0x0D
00EB 0A        2314            db 0x0A
00EC 2D66205B  2315            db '-f [freq value]'
     66726571
     2076616C
     75655D
00FB 0D        2316            db 0x0D
00FC 0A        2317            db 0x0A
00FD 2D72205B  2318            db '-r [reload value]'
     72656C6F
     61642076
     616C7565
     5D
010E 0D        2319            db 0x0D
010F 0A        2320            db 0x0A
0110 2D6F      2321            db '-o'
0112 0D        2322            db 0x0D
0113 0A        2323            db 0x0A
0114 2D73      2324            db '-s'
0116 0D        2325            db 0x0D
0117 0A        2326            db 0x0A
0118 2D69      2327            db '-i'
011A 0D        2328            db 0x0D
011B 0A        2329            db 0x0A
011C 0A        2330            db 0x0A
011D 00        2331            db 0x00
011E           2332   __str_9:
011E 52656C6F  2333            db 'Reload: %u, Freq: %d, duty0: %d, duty1: %d'
     61643A20
     25752C20
     46726571
     3A202564
     2C206475
     7479303A
     2025642C
     20647574
     79313A20
     2564
0148 0D        2334            db 0x0D
0149 0A        2335            db 0x0A
014A 00        2336            db 0x00
014B           2337   __str_10:
014B 22        2338            db 0x22
014C 2573      2339            db '%s'
014E 22        2340            db 0x22
014F 20696E76  2341            db ' invalid command'
     616C6964
     20636F6D
     6D616E64
015F 0D        2342            db 0x0D
0160 0A        2343            db 0x0A
0161 00        2344            db 0x00
0162           2345   __str_11:
0162 4E6F7420  2346            db 'Not Valid input'
     56616C69
     6420696E
     707574
0171 0D        2347            db 0x0D
0172 0A        2348            db 0x0A
0173 00        2349            db 0x00
0174           2350   __str_12:
0174 4C414220  2351            db 'LAB 6 Microcontroller'
     36204D69
     63726F63
     6F6E7472
     6F6C6C65
     72
0189 0D        2352            db 0x0D
018A 0A        2353            db 0x0A
018B 57697468  2354            db 'With extra features'
     20657874
     72612066
     65617475
     726573
019E 0D        2355            db 0x0D
019F 0A        2356            db 0x0A
01A0 0A        2357            db 0x0A
01A1 00        2358            db 0x00
01A2           2359   __str_13:
01A2 44757479  2360            db 'Duty cycle:'
     20637963
     6C653A
01AD 00        2361            db 0x00
01AE           2362   __str_14:
01AE 25642563  2363            db '%d%c %d%c'
     20256425
     63
01B7 00        2364            db 0x00
01B8           2365   __str_15:
01B8 456E7465  2366            db 'Enter command: '
     7220636F
     6D6D616E
     643A20
01C7 0D        2367            db 0x0D
01C8 0A        2368            db 0x0A
01C9 00        2369            db 0x00
01CA           2370   
008E           2371            CSEG
008E           2372   
008E           2373   end
