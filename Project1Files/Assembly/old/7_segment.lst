0000              1   ; ISR_example.asm: a) Increments/decrements a BCD variable every half second using
0000              2   ; an ISR for timer 2; b) Generates a 2kHz square wave at pin P3.7 using
0000              3   ; an ISR for timer 0; and c) in the 'main' loop it displays the variable
0000              4   ; incremented/decremented using the ISR for timer 2 on the LCD.  Also resets it to 
0000              5   ; zero if the 'BOOT' pushbutton connected to P4.5 is pressed.
                  7   $LIST
0000              9   
0000             10   ; There is a couple of typos in MODLP51 in the definition of the timer 0/1 reload
0000             11   ; special function registers (SFRs), so:
0000             12   
0000             13   TIMER0_RELOAD_L DATA 0xf2
0000             14   TIMER1_RELOAD_L DATA 0xf3
0000             15   TIMER0_RELOAD_H DATA 0xf4
0000             16   TIMER1_RELOAD_H DATA 0xf5
0000             17   
0000             18   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
0000             19   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             20   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             21   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             22   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             23   
0000             24   CLEAR         equ P2.4
0000             25   SOUND_OUT     equ P3.7
0000             26   UPDOWN        equ P1.0
0000             27   
0000             28   ; For the 7-segment display
0000             29   SEGA equ P0.3
0000             30   SEGB equ P0.5
0000             31   SEGC equ P0.7
0000             32   SEGD equ P4.4
0000             33   SEGE equ P4.5
0000             34   SEGF equ P0.4
0000             35   SEGG equ P0.6
0000             36   SEGP equ P2.7
0000             37   CA1  equ P0.1
0000             38   CA2  equ P0.0
0000             39   CA3  equ P0.2
0000             40   
0000             41   ; Reset vector
0000             42   org 0x0000
0000 0201B9      43       ljmp main
0003             44   
0003             45   ; External interrupt 0 vector (not used in this code)
0003             46   org 0x0003
0003 32          47            reti
0004             48   
0004             49   ; Timer/Counter 0 overflow interrupt vector
000B             50   org 0x000B
000B 020106      51            ljmp Timer0_ISR
000E             52   
000E             53   ; External interrupt 1 vector (not used in this code)
0013             54   org 0x0013
0013 32          55            reti
0014             56   
0014             57   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             58   org 0x001B
001B 32          59            reti
001C             60   
001C             61   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             62   org 0x0023 
0023 32          63            reti
0024             64            
0024             65   ; Timer/Counter 2 overflow interrupt vector
002B             66   org 0x002B
002B 020143      67            ljmp Timer2_ISR
002E             68   
002E             69   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             70   dseg at 0x30
0030             71   Count1ms:     ds 2 ; Used to determine when half second has passed
0032             72   BCD_counter:  ds 1 ; The BCD counter incrememted in the ISR and displayed in the main loop
0033             73   Disp1:  ds 1 
0034             74   Disp2:  ds 1
0035             75   Disp3:  ds 1
0036             76   state:  ds 1
0037             77   
0037             78   ; In the 8051 we have variables that are 1-bit in size.  We can use the setb, clr, jb, and jnb
0037             79   ; instructions with these variables.  This is how you define a 1-bit variable:
0000             80   bseg
0000             81   half_seconds_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0001             82   
002E             83   cseg
002E             84   ; These 'equ' must match the wiring between the microcontroller and the LCD!
002E             85   LCD_RS equ P1.1
002E             86   LCD_RW equ P1.2
002E             87   LCD_E  equ P1.3
002E             88   LCD_D4 equ P3.2
002E             89   LCD_D5 equ P3.3
002E             90   LCD_D6 equ P3.4
002E             91   LCD_D7 equ P3.5
                 93   	$LIST
00DC             95   
00DC             96   ;                     1234567890123456    <- This helps determine the location of the counter
00DC 4243445F    97   Initial_Message:  db 'BCD_counter: xx ', 0
     636F756E
     7465723A
     20787820
     00
00ED             98   
00ED             99   ;---------------------------------;
00ED            100   ; Routine to initialize the ISR   ;
00ED            101   ; for timer 0                     ;
00ED            102   ;---------------------------------;
00ED            103   Timer0_Init:
00ED E589       104            mov a, TMOD
00EF 54F0       105            anl a, #0xf0 ; Clear the bits for timer 0
00F1 4401       106            orl a, #0x01 ; Configure timer 0 as 16-timer
00F3 F589       107            mov TMOD, a
00F5 758CEA     108            mov TH0, #high(TIMER0_RELOAD)
00F8 758AE8     109            mov TL0, #low(TIMER0_RELOAD)
00FB            110            ; Set autoreload value
00FB 75F4EA     111            mov TIMER0_RELOAD_H, #high(TIMER0_RELOAD)
00FE 75F2E8     112            mov TIMER0_RELOAD_L, #low(TIMER0_RELOAD)
0101            113            ; Enable the timer and interrupts
0101 D2A9       114       setb ET0  ; Enable timer 0 interrupt
0103 D28C       115       setb TR0  ; Start timer 0
0105 22         116            ret
0106            117   
0106            118   ;---------------------------------;
0106            119   ; ISR for timer 0.  Set to execute;
0106            120   ; every 1/4096Hz to generate a    ;
0106            121   ; 2048 Hz square wave at pin P3.7 ;
0106            122   ;---------------------------------;
0106            123   Timer0_ISR:
0106            124            ;clr TF0  ; According to the data sheet this is done for us already.
0106 B2B7       125            cpl SOUND_OUT ; Connect speaker to P3.7!
0108 32         126            reti
0109            127   
0109            128   ;---------------------------------;
0109            129   ; Routine to initialize the ISR   ;
0109            130   ; for timer 2                     ;
0109            131   ;---------------------------------;
0109            132   Timer2_Init:
0109 75C800     133            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
010C 75CDA9     134            mov TH2, #high(TIMER2_RELOAD)
010F 75CC9A     135            mov TL2, #low(TIMER2_RELOAD)
0112            136            ; Set the reload value
0112 75CBA9     137            mov RCAP2H, #high(TIMER2_RELOAD)
0115 75CA9A     138            mov RCAP2L, #low(TIMER2_RELOAD)
0118            139            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0118 E4         140            clr a
0119 F530       141            mov Count1ms+0, a
011B F531       142            mov Count1ms+1, a
011D            143            ; Enable the timer and interrupts
011D D2AD       144       setb ET2  ; Enable timer 2 interrupt
011F D2CA       145       setb TR2  ; Enable timer 2
0121 22         146            ret
0122            147   
0122            148   ; Pattern to load passed in accumulator
0122            149   load_segments:
0122 A2E0       150            mov c, acc.0
0124 9283       151            mov SEGA, c
0126 A2E1       152            mov c, acc.1
0128 9285       153            mov SEGB, c
012A A2E2       154            mov c, acc.2
012C 9287       155            mov SEGC, c
012E A2E3       156            mov c, acc.3
0130 92C4       157            mov SEGD, c
0132 A2E4       158            mov c, acc.4
0134 92C5       159            mov SEGE, c
0136 A2E5       160            mov c, acc.5
0138 9284       161            mov SEGF, c
013A A2E6       162            mov c, acc.6
013C 9286       163            mov SEGG, c
013E A2E7       164            mov c, acc.7
0140 92A7       165            mov SEGP, c
0142 22         166            ret
0143            167   
0143            168   ;---------------------------------;
0143            169   ; ISR for timer 2                 ;
0143            170   ;---------------------------------;
0143            171   Timer2_ISR:
0143 C2CF       172            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0145 B2B6       173            cpl P3.6 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0147            174            
0147            175            ; The two registers used in the ISR must be saved in the stack
0147 C0E0       176            push acc
0149 C0D0       177            push psw
014B            178   
014B            179   ;;;  State machine for 7-segment displays starts here
014B            180            ; Turn all displays off
014B D281       181            setb CA1
014D D280       182            setb CA2
014F D282       183            setb CA3
0151            184   
0151 E536       185            mov a, state
0153            186   state0:
0153 B4000B     187            cjne a, #0, state1
0156 E533       188            mov a, disp1
0158 120122     189            lcall load_segments
015B C281       190            clr CA1
015D 0536       191            inc state
015F 8020       192            sjmp state_done
0161            193   state1:
0161 B4010B     194            cjne a, #1, state2
0164 E534       195            mov a, disp2
0166 120122     196            lcall load_segments
0169 C280       197            clr CA2
016B 0536       198            inc state
016D 8012       199            sjmp state_done
016F            200   state2:
016F B4020C     201            cjne a, #2, state_reset
0172 E535       202            mov a, disp3
0174 120122     203            lcall load_segments
0177 C282       204            clr CA3
0179 753600     205            mov state, #0
017C 8003       206            sjmp state_done
017E            207   state_reset:
017E 753600     208            mov state, #0
0181            209   state_done:
0181            210   ;;;  State machine for 7-segment displays ends here
0181            211            
0181            212            ; Increment the 16-bit one mili second counter
0181 0530       213            inc Count1ms+0    ; Increment the low 8-bits first
0183 E530       214            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
0185 7002       215            jnz Inc_Done
0187 0531       216            inc Count1ms+1
0189            217   
0189            218   Inc_Done:
0189            219            ; Check if half second has passed
0189 E530       220            mov a, Count1ms+0
018B B4F41C     221            cjne a, #low(500), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
018E E531       222            mov a, Count1ms+1
0190 B40117     223            cjne a, #high(500), Timer2_ISR_done
0193            224            
0193            225            ; 500 milliseconds have passed.  Set a flag so the main program knows
0193 D200       226            setb half_seconds_flag ; Let the main program know half second had passed
0195 B28C       227            cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
0197            228            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
0197 E4         229            clr a
0198 F530       230            mov Count1ms+0, a
019A F531       231            mov Count1ms+1, a
019C            232            ; Increment the BCD counter
019C E532       233            mov a, BCD_counter
019E 309004     234            jnb UPDOWN, Timer2_ISR_decrement
01A1 2401       235            add a, #0x01
01A3 8002       236            sjmp Timer2_ISR_da
01A5            237   Timer2_ISR_decrement:
01A5 2499       238            add a, #0x99 ; Adding the 10-complement of -1 is like subtracting 1.
01A7            239   Timer2_ISR_da:
01A7 D4         240            da a ; Decimal adjust instruction.  Check datasheet for more details!
01A8 F532       241            mov BCD_counter, a
01AA            242            
01AA            243   Timer2_ISR_done:
01AA D0D0       244            pop psw
01AC D0E0       245            pop acc
01AE 32         246            reti
01AF            247   
01AF C0F9A4B0   248   HEX_7SEG: DB 0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90
     999282F8
     8090
01B9            249   
01B9            250   ;---------------------------------;
01B9            251   ; Main program. Includes hardware ;
01B9            252   ; initialization and 'forever'    ;
01B9            253   ; loop.                           ;
01B9            254   ;---------------------------------;
01B9            255   main:
01B9            256            ; Initialization
01B9 75817F     257       mov SP, #0x7F
01BC 1200ED     258       lcall Timer0_Init
01BF 120109     259       lcall Timer2_Init
01C2            260       ; In case you decide to use the pins of P0, configure the port in bidirectional mode:
01C2 75E600     261       mov P0M0, #0
01C5 75E700     262       mov P0M1, #0
01C8 758E11     263       mov AUXR, #00010001B ; Max memory.  P4.4 is a general purpose IO pin
01CB D2AF       264       setb EA   ; Enable Global interrupts
01CD 120088     265       lcall LCD_4BIT
01D0            266       ; For convenience a few handy macros are included in 'LCD_4bit.inc':
01D0 C0E0       267            push acc
01D2 7401       267            mov a, #1
01D4 14         267            dec a
01D5 1200C1     267            lcall ?Set_Cursor_1 ; Select column and row
01D8 D0E0       267            pop acc
01DA C083       268            push dph
01DC C082       268            push dpl
01DE C0E0       268            push acc
01E0 9000DC     268            mov dptr, #Initial_Message
01E3 1200B4     268            lcall ?Send_Constant_String
01E6 D0E0       268            pop acc
01E8 D082       268            pop dpl
01EA D083       268            pop dph
01EC D200       269       setb half_seconds_flag
01EE 753200     270            mov BCD_counter, #0x00
01F1            271            
01F1 753600     272            mov state, #0
01F4            273            
01F4            274            ; After initialization the program stays in this 'forever' loop
01F4            275   loop:
01F4 20A41C     276            jb CLEAR, loop_a  ; if the 'BOOT' button is not pressed skip
01F7 C002       277            push AR2
01F9 7A32       277            mov R2, #50
01FB 120039     277            lcall ?Wait_Milli_Seconds
01FE D002       277            pop AR2         ; Debounce delay.  This macro is also in 'LCD_4bit.inc'
0200 20A410     278            jb CLEAR, loop_a  ; if the 'BOOT' button is not pressed skip
0203 30A4FD     279            jnb CLEAR, $            ; Wait for button release.  The '$' means: jump to same instruction.
0206            280            ; A valid press of the 'BOOT' button has been detected, reset the BCD counter.
0206            281            ; But first stop timer 2 and reset the milli-seconds counter, to resync everything.
0206 C2CA       282            clr TR2                 ; Stop timer 2
0208 E4         283            clr a
0209 F530       284            mov Count1ms+0, a
020B F531       285            mov Count1ms+1, a
020D            286            ; Now clear the BCD counter
020D F532       287            mov BCD_counter, a
020F D2CA       288            setb TR2                ; Start timer 2
0211 8003       289            sjmp loop_b             ; Display the new value
0213            290   loop_a:
0213 3000DE     291            jnb half_seconds_flag, loop
0216            292   loop_b:
0216 C200       293       clr half_seconds_flag ; We clear this flag in the main loop, but it is set in the ISR for timer 2
0218 C0E0       294            push acc
021A 740E       294            mov a, #14
021C 14         294            dec a
021D 1200C1     294            lcall ?Set_Cursor_1 ; Select column and row
0220 D0E0       294            pop acc     ; the place in the LCD where we want the BCD counter value
0222 C000       295            push ar0
0224 A832       295            mov r0, BCD_counter
0226 1200C6     295            lcall ?Display_BCD
0229 D000       295            pop ar0 ; This macro is also in 'LCD_4bit.inc'
022B 9001AF     296            mov dptr, #HEX_7SEG
022E E532       297            mov a, BCD_counter
0230 540F       298            anl a, #0x0f
0232 93         299            movc a, @a+dptr
0233 F533       300            mov disp1, a
0235 E532       301            mov a, BCD_counter
0237 C4         302            swap a
0238 540F       303            anl a, #0x0f
023A 93         304            movc a, @a+dptr
023B F534       305            mov disp2, a
023D 7535FF     306            mov disp3, #0xff
0240            307            
0240 0201F4     308       ljmp loop
0243            309   EN
