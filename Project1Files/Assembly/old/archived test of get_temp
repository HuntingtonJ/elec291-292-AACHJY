TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
  TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
  TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
 +MILLISECOND_WAIT equ 200		; how many milliseconds between temp samples
  
  org 0x0000
     ljmp MainProgram
 @@ -55,12 +56,14 @@ DSEG at 0x30
  Count1ms:      ds 2 ; Used to determine when half second has passed
  Result:        ds 2
  Result_Thermo: ds 2
 +seconds: 	ds 1
  x:             ds 4
  y:             ds 4
  bcd:           ds 5
  
  BSEG
  mf: dbit 1
 +one_second_flag: dbit 1 
  
  $NOLIST
  $include(math32.inc)   ; A library of 32bit math functions
 @@ -110,6 +113,8 @@ beep_on:
  	;cpl SOUND_OUT ; Connect speaker to P3.7!
  no_beep:
  	reti
 +	
 +	
  
  Send_BCD mac
  	push ar0
 @@ -121,6 +126,9 @@ Send_BCD mac
      lcall putchar
  	pop ar0
  endmac
 +
 +
 +	
  ;---------------------------------;
  ; Routine to initialize the ISR   ;
  ; for timer 2                     ;
 @@ -153,13 +161,37 @@ Timer2_ISR:
  	push psw
  	
  	; Increment the 16-bit one mili second counter
 +			;	inc Count1ms+0    ; Increment the low 8-bits first
 +				;mov a, Count1ms+0
 +			;	cjne a, #10h, Timer2_ISR_done
 +			;	mov Count1ms+0, #0h
  	inc Count1ms+0    ; Increment the low 8-bits first
 +	mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
 +	jnz Inc_Done
 +	inc Count1ms+1
 +	
 +				Send_BCD(bcd)
 +	Inc_Done:
 +	; Check if a second has passed
 +
  	mov a, Count1ms+0
 -	cjne a, #10h, Timer2_ISR_done
 -	mov Count1ms+0, #0h
 +	cjne a, #low(MILLISECOND_WAIT), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
 +	mov a, Count1ms+1
 +	cjne a, #high(MILLISECOND_WAIT), Timer2_ISR_done
  	
 +	; 1000 milliseconds have passed.  Set a flag so the main program knows
 +	setb one_second_flag ; Let the main program know one second had passed
 +	cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
 +	; Reset to zero the milli-seconds counter, it is a 16-bit variable
 +	clr a
 +	mov Count1ms+0, a
 +	mov Count1ms+1, a
 +	; Increment the BCD counter
 +	mov a, seconds
 +	add a, #0x01
 +	da a ; Decimal adjust instruction.  Check datasheet for more details!
 +	mov seconds, a
  	
 -	Send_BCD(bcd)
  	
  Timer2_ISR_done:
  	pop psw
 @@ -293,6 +325,15 @@ Display_10_digit_BCD_2:
  skip_blank_2:
  	ret
  
 +	; Sends 10-digit BCD number in BCD to the SPI
 +Send_10_digit_BCD:
 +	Send_BCD(bcd+4)
 +	Send_BCD(bcd+3)
 +	Send_BCD(bcd+2)
 +	Send_BCD(bcd+1)
 +	Send_BCD(bcd+0)
 +	ret
 +
  ?Send_BCD:
  	push acc
  	; Write most significant digit
 @@ -309,8 +350,58 @@ skip_blank_2:
  	pop acc
  	ret
  
 +GET_ADC_TEMP:
 +    clr CE_ADC         ; selects 
 +    mov R0, #00000001B ; Start bit: 1
 +    lcall DO_SPI_G
 +    
 +    mov R0, #10000000B ; Read channel 0
 +    lcall DO_SPI_G
 +    mov a, R1
 +    anl a, #00000011B
 +    mov Result+1, a    ; Save high result
 +    
 +    mov R0, #55H
 +    lcall DO_SPI_G
 +    mov Result, R1     ; Save low result
 +    
 +    setb CE_ADC        ; deselects
 +    
 +    ;V_OUT = ADC_voltage*4.096V/1023
 +    ;ADC_voltage*4096 = A
 +    mov x+0, Result
 +    mov x+1, Result+1
 +    mov x+2, #0
 +    mov x+3, #0
 +    
 + ret
 +
 + GET_THERMO_TEMP:
 +    clr CE_ADC         ; selects 
 +    mov R0, #00000001B ; Start bit: 1
 +    lcall DO_SPI_G
 +    
 +    mov R0, #10010000B ; Read channel 1
 +    lcall DO_SPI_G
 +    mov a, R1
 +    anl a, #00000011B
 +    mov Result_Thermo+1, a    ; Save high result
 +    
 +    mov R0, #55H
 +    lcall DO_SPI_G
 +    mov Result_Thermo, R1     ; Save low result
 +    setb CE_ADC        ; deselects
 +    
 +    ;V_OUT = ADC_voltage*4.096V/1023
 +    ;ADC_voltage*4096 = A
 +    mov x+0, Result_Thermo
 +    mov x+1, Result_Thermo+1
 +    mov x+2, #0
 +    mov x+3, #0
 +  ret
 +
  ;____________________________________
 -;*************************************
 + ;*************************************
  
  ; This is the code that converts the amplified voltage from the the k-type thermocouple 
  ; to temperature data for use. 
 @@ -323,7 +414,7 @@ skip_blank_2:
  ;------------------------------------- 		
  
  Voltage_to_temp_LM355: 
 -		  	Load_y(4081)
 +		  	Load_y(4096)
  		    lcall mul32 ;multiplies x *= y
  		    
  		    ;A/1023 = B
 @@ -337,33 +428,38 @@ Voltage_to_temp_LM355:
  		    ;B/10 = V_OUT
  		    Load_y(10);
  		    lcall div32 ;divides x /= y
 +		   	lcall hex2bcd
      	ret
  
    Voltage_to_temp_thermocouple: 
  
 -    Load_y(4081)
 -   	lcall mul32 ;multiplies x *= y
 -   	
 -   	Load_y(2475) 	; 24.75 c/mV
 -    lcall mul32		; x*=y
 -    
 -    ;A/1023 = B
 -    Load_y(1023)
 -    lcall div32 ;divides x /= y
 -    
 -    ;keep in milli
 -    Load_y(1000)
 -    lcall mul32 ;divides x /= y
 -    
 -    Load_y(200)
 -    lcall div32
 -    
 -    Load_y(100)
 -    lcall div32
 -  
 -  	Load_y(Result)
 -  	lcall add32    
 -    
 +	;SPI_REF_VOLTAGE_mul100 equ 4081
 +	;THERMOCOUPLE_CONVERSION_div1000 equ 2475
 +	
 +	;
 +	; We are doing the conversion from V--> 10 bit Temp (deg C)
 +	; Start: Amplified Volts, Vin
 +	;
 +	; 		Vin*(1 deg C)* (V_REF)*    1    * 1
 +	;			 --------			    ---    ---  - ADC_RESULT
 +	; 			(41 uV )		   OP_AMP_GAIn  1023
 +
 +	Load_y(4081); 4.081*1000=mV
 +	lcall mul32
 +	
 +	Load_y(1023)
 +	lcall div32   
 +	
 +	Load_y(247) ; 24.75*10
 +	lcall mul32
 +				;---------
 +	Load_y(2000) ; 200*10
 +	lcall div32
 +	
 +	Load_y(24)
 +	lcall add32
 +  	
 +   	lcall hex2bcd
     ret
    
  
 @@ -388,60 +484,21 @@ MainProgram:
      
  forever:
  nop
 +
 +
  GET_TEMP_DATA: 
 -    clr CE_ADC         ; selects 
 -    mov R0, #00000001B ; Start bit: 1
 -    lcall DO_SPI_G
 -    
 -    mov R0, #10000000B ; Read channel 0
 -    lcall DO_SPI_G
 -    mov a, R1
 -    anl a, #00000011B
 -    mov Result+1, a    ; Save high result
 -    
 -    mov R0, #55H
 -    lcall DO_SPI_G
 -    mov Result, R1     ; Save low result
 -    
 -    setb CE_ADC        ; deselects
 -    
 -    ;V_OUT = ADC_voltage*4.096V/1023
 -    ;ADC_voltage*4096 = A
 -    mov x+0, Result
 -    mov x+1, Result+1
 -    mov x+2, #0
 -    mov x+3, #0
 -    
 +	jnb one_second_flag, GET_TEMP_DATA
 +	clr one_second_flag ; We clear this flag in the main loop, but it is set in the ISR for timer 2
 +	
 +	;Gets, displays, and pushes ADC LM355 temp values
 +	lcall GET_ADC_TEMP
      lcall Voltage_to_temp_LM355
 -  	
 -    lcall hex2bcd
      lcall Display_10_digit_BCD
      
 -    clr CE_ADC         ; selects 
 -    mov R0, #00000001B ; Start bit: 1
 -    lcall DO_SPI_G
 -    
 -    mov R0, #10010000B ; Read channel 1
 -    lcall DO_SPI_G
 -    mov a, R1
 -    anl a, #00000011B
 -    mov Result_Thermo+1, a    ; Save high result
 -    
 -    mov R0, #55H
 -    lcall DO_SPI_G
 -    mov Result_Thermo, R1     ; Save low result
 -    setb CE_ADC        ; deselects
 -    
 -    ;V_OUT = ADC_voltage*4.096V/1023
 -    ;ADC_voltage*4096 = A
 -    mov x+0, Result_Thermo
 -    mov x+1, Result_Thermo+1
 -    mov x+2, #0
 -    mov x+3, #0
 -    
 +    ; Gets, displays, and pushes k-type thermocouple vlaues
 +	lcall GET_THERMO_TEMP
      lcall Voltage_to_temp_thermocouple
 -    
 -	lcall hex2bcd
 +    lcall Send_10_digit_BCD
      lcall Display_10_digit_BCD_2
      
      lcall Delay
