                 -1   $MODLP51
0000              1   ;--------------------------------------------------------
0000              2   ; Special Function Registers
0000              3   ;--------------------------------------------------------
0000              4   ACC            DATA 0xe0
0000              5   B              DATA 0xf0
0000              6   PSW            DATA 0xd0
0000              7   SP             DATA 0x81
0000              8   SPX            DATA 0xef
0000              9   DPL            DATA 0x82
0000             10   DPH            DATA 0x83
0000             11   DPLB           DATA 0xd4
0000             12   DPHB           DATA 0xd5
0000             13   PAGE           DATA 0xf6
0000             14   AX             DATA 0xe1
0000             15   BX             DATA 0xf7
0000             16   DSPR           DATA 0xe2
0000             17   FIRD           DATA 0xe3
0000             18   MACL           DATA 0xe4
0000             19   MACH           DATA 0xe5
0000             20   PCON           DATA 0x87
0000             21   AUXR           DATA 0x8e
0000             22   AUXR1          DATA 0xa2
0000             23   DPCF           DATA 0xa1
0000             24   CKRL           DATA 0x97
0000             25   CKCKON0        DATA 0x8f
0000             26   CKCKON1        DATA 0xaf
0000             27   CKSEL          DATA 0x85
0000             28   CLKREG         DATA 0xae
0000             29   OSCCON         DATA 0x85
0000             30   IE             DATA 0xa8
0000             31   IEN0           DATA 0xa8
0000             32   IEN1           DATA 0xb1
0000             33   IPH0           DATA 0xb7
0000             34   IP             DATA 0xb8
0000             35   IPL0           DATA 0xb8
0000             36   IPH1           DATA 0xb3
0000             37   IPL1           DATA 0xb2
0000             38   P0             DATA 0x80
0000             39   P1             DATA 0x90
0000             40   P2             DATA 0xa0
0000             41   P3             DATA 0xb0
0000             42   P4             DATA 0xc0
0000             43   P0M0           DATA 0xe6
0000             44   P0M1           DATA 0xe7
0000             45   P1M0           DATA 0xd6
0000             46   P1M1           DATA 0xd7
0000             47   P2M0           DATA 0xce
0000             48   P2M1           DATA 0xcf
0000             49   P3M0           DATA 0xc6
0000             50   P3M1           DATA 0xc7
0000             51   P4M0           DATA 0xbe
0000             52   P4M1           DATA 0xbf
0000             53   SCON           DATA 0x98
0000             54   SBUF           DATA 0x99
0000             55   SADEN          DATA 0xb9
0000             56   SADDR          DATA 0xa9
0000             57   BDRCON         DATA 0x9b
0000             58   BRL            DATA 0x9a
0000             59   TCON           DATA 0x88
0000             60   TMOD           DATA 0x89
0000             61   TCONB          DATA 0x91
0000             62   TL0            DATA 0x8a
0000             63   TH0            DATA 0x8c
0000             64   TL1            DATA 0x8b
0000             65   TH1            DATA 0x8d
0000             66   RL0            DATA 0xf2
0000             67   RL1            DATA 0xf3
0000             68   RH0            DATA 0xf4
0000             69   RH1            DATA 0xf5
0000             70   WDTRST         DATA 0xa6
0000             71   WDTPRG         DATA 0xa7
0000             72   T2CON          DATA 0xc8
0000             73   T2MOD          DATA 0xc9
0000             74   RCAP2H         DATA 0xcb
0000             75   RCAP2L         DATA 0xca
0000             76   TH2            DATA 0xcd
0000             77   TL2            DATA 0xcc
0000             78   SPCON          DATA 0xc3
0000             79   SPSTA          DATA 0xc4
0000             80   SPDAT          DATA 0xc5
0000             81   SSCON          DATA 0x93
0000             82   SSCS           DATA 0x94
0000             83   SSDAT          DATA 0x95
0000             84   SSADR          DATA 0x96
0000             85   KBLS           DATA 0x9c
0000             86   KBE            DATA 0x9d
0000             87   KBF            DATA 0x9e
0000             88   KBMOD          DATA 0x9f
0000             89   BMSEL          DATA 0x92
0000             90   FCON           DATA 0xd2
0000             91   EECON          DATA 0xd2
0000             92   ACSRA          DATA 0xa3
0000             93   ACSRB          DATA 0xab
0000             94   AREF           DATA 0xbd
0000             95   DADC           DATA 0xa4
0000             96   DADI           DATA 0xa5
0000             97   DADL           DATA 0xac
0000             98   DADH           DATA 0xad
0000             99   CCON           DATA 0xd8
0000            100   CMOD           DATA 0xd9
0000            101   CL             DATA 0xe9
0000            102   CH             DATA 0xf9
0000            103   CCAPM0         DATA 0xda
0000            104   CCAPM1         DATA 0xdb
0000            105   CCAPM2         DATA 0xdc
0000            106   CCAPM3         DATA 0xdd
0000            107   CCAPM4         DATA 0xde
0000            108   CCAP0H         DATA 0xfa
0000            109   CCAP1H         DATA 0xfb
0000            110   CCAP2H         DATA 0xfc
0000            111   CCAP3H         DATA 0xfd
0000            112   CCAP4H         DATA 0xfe
0000            113   CCAP0L         DATA 0xea
0000            114   CCAP1L         DATA 0xeb
0000            115   CCAP2L         DATA 0xec
0000            116   CCAP3L         DATA 0xed
0000            117   CCAP4L         DATA 0xee
0000            118   ;--------------------------------------------------------
0000            119   ; special function bits
0000            120   ;--------------------------------------------------------
0000            121   P              BIT 0xd0
0000            122   F1             BIT 0xd1
0000            123   OV             BIT 0xd2
0000            124   RS0            BIT 0xd3
0000            125   RS1            BIT 0xd4
0000            126   F0             BIT 0xd5
0000            127   AC             BIT 0xd6
0000            128   CY             BIT 0xd7
0000            129   EX0            BIT 0xa8
0000            130   ET0            BIT 0xa9
0000            131   EX1            BIT 0xaa
0000            132   ET1            BIT 0xab
0000            133   ES             BIT 0xac
0000            134   ET2            BIT 0xad
0000            135   EC             BIT 0xae
0000            136   EA             BIT 0xaf
0000            137   PX0            BIT 0xb8
0000            138   PT0            BIT 0xb9
0000            139   PX1            BIT 0xba
0000            140   PT1            BIT 0xbb
0000            141   PS             BIT 0xbc
0000            142   PT2            BIT 0xbd
0000            143   IP0D           BIT 0xbf
0000            144   PPCL           BIT 0xbe
0000            145   PT2L           BIT 0xbd
0000            146   PLS            BIT 0xbc
0000            147   PT1L           BIT 0xbb
0000            148   PX1L           BIT 0xba
0000            149   PT0L           BIT 0xb9
0000            150   PX0L           BIT 0xb8
0000            151   RXD            BIT 0xb0
0000            152   TXD            BIT 0xb1
0000            153   INT0           BIT 0xb2
0000            154   INT1           BIT 0xb3
0000            155   T0             BIT 0xb4
0000            156   T1             BIT 0xb5
0000            157   WR             BIT 0xb6
0000            158   RD             BIT 0xb7
0000            159   RI             BIT 0x98
0000            160   TI             BIT 0x99
0000            161   RB8            BIT 0x9a
0000            162   TB8            BIT 0x9b
0000            163   REN            BIT 0x9c
0000            164   SM2            BIT 0x9d
0000            165   SM1            BIT 0x9e
0000            166   SM0            BIT 0x9f
0000            167   IT0            BIT 0x88
0000            168   IE0            BIT 0x89
0000            169   IT1            BIT 0x8a
0000            170   IE1            BIT 0x8b
0000            171   TR0            BIT 0x8c
0000            172   TF0            BIT 0x8d
0000            173   TR1            BIT 0x8e
0000            174   TF1            BIT 0x8f
0000            175   CP_RL2         BIT 0xc8
0000            176   C_T2           BIT 0xc9
0000            177   TR2            BIT 0xca
0000            178   EXEN2          BIT 0xcb
0000            179   TCLK           BIT 0xcc
0000            180   RCLK           BIT 0xcd
0000            181   EXF2           BIT 0xce
0000            182   TF2            BIT 0xcf
0000            183   CF             BIT 0xdf
0000            184   CR             BIT 0xde
0000            185   CCF4           BIT 0xdc
0000            186   CCF3           BIT 0xdb
0000            187   CCF2           BIT 0xda
0000            188   CCF1           BIT 0xd9
0000            189   CCF0           BIT 0xd8
0000              2   
0000              3   ; There is a couple of typos in MODLP51 in the definition of the timer 0/1 reload
0000              4   ; special function registers (SFRs), so:
0000              5   
0000              6   TIMER0_RELOAD_L DATA 0xf2
0000              7   TIMER1_RELOAD_L DATA 0xf3
0000              8   TIMER0_RELOAD_H DATA 0xf4
0000              9   TIMER1_RELOAD_H DATA 0xf5
0000             10   
0000             11   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
0000             12   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             13   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             14   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             15   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             16   MILLISECOND_WAIT equ 200    ; how many milliseconds between temp samples
0000             17   
0000             18   org 0x0000
0000 020735      19      ljmp MainProgram
0003             20   
0003             21   ; External interrupt 0 vector (not used in this code)
0003             22   org 0x0003
0003 32          23     reti
0004             24   
0004             25   ; Timer/Counter 0 overflow interrupt vector
000B             26   org 0x000B
000B 020365      27     ljmp Timer0_ISR
000E             28   
000E             29   ; External interrupt 1 vector (not used in this code)
0013             30   org 0x0013
0013 32          31     reti
0014             32   
0014             33   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             34   org 0x001B
001B 32          35     reti
001C             36   
001C             37   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             38   org 0x0023 
0023 32          39     reti
0024             40     
0024             41   ; Timer/Counter 2 overflow interrupt vector
002B             42   org 0x002B
002B 020381      43     ljmp Timer2_ISR
002E             44   
002E             45   BAUD equ 115200
002E             46   BRG_VAL equ (0x100-(CLK/(16*BAUD)))
002E             47   
002E             48   ; These �EQU� must match the wiring between the microcontroller and ADC
002E             49   SOUND_OUT   EQU P3.7
002E             50   CE_ADC EQU P2.0
002E             51   MY_MOSI EQU P2.1
002E             52   MY_MISO EQU P2.2
002E             53   MY_SCLK EQU P2.3
002E             54   
002E             55   
002E             56   UP_BUTTON          EQU P2.6
002E             57   DOWN_BUTTON   EQU P2.5
002E             58   SELECT_BUTTON EQU p2.4
002E             59   
002E             60   NEXT_BUTTON   EQU P2.4
002E             61   BACK_BUTTON   EQU p2.5
002E             62   
002E             63   MASTER_START  EQU p1.0
002E             64   MASTER_STOP   EQU p1.1
002E             65   
002E             66   
002E             67   
002E             68   
0030             69   DSEG at 0x30
0030             70   Count1ms:      ds 2 ; Used to determine when half second has passed
0032             71   Result:        ds 2
0034             72   Result_Thermo: ds 2
0036             73   seconds:                 ds 1
0037             74   x:             ds 4
003B             75   y:             ds 4
003F             76   bcd:           ds 5
0044             77   
0000             78   BSEG
0000             79   mf: dbit 1
0001             80   one_second_flag: dbit 1 
0002             81   
                546   $LIST
                 83   $LIST
029E             85   
029E             86   CSEG
029E             87   LCD_RS equ P1.1
029E             88   LCD_RW equ P1.2
029E             89   LCD_E  equ P1.3
029E             90   LCD_D4 equ P3.2
029E             91   LCD_D5 equ P3.3
029E             92   LCD_D6 equ P3.4
029E             93   LCD_D7 equ P3.6
029E             94   
                 96   	$LIST
034C             98   
034C             99   ;---------------------------------;
034C            100   ; Routine to initialize the ISR   ;
034C            101   ; for timer 0                     ;
034C            102   ;---------------------------------;
034C            103   Timer0_Init:
034C E589       104     mov a, TMOD
034E 54F0       105     anl a, #0xf0 ; Clear the bits for timer 0
0350 4401       106     orl a, #0x01 ; Configure timer 0 as 16-timer
0352 F589       107     mov TMOD, a
0354 758CEA     108     mov TH0, #high(TIMER0_RELOAD)
0357 758AE8     109     mov TL0, #low(TIMER0_RELOAD)
035A            110     ; Set autoreload value
035A 75F4EA     111     mov TIMER0_RELOAD_H, #high(TIMER0_RELOAD)
035D 75F2E8     112     mov TIMER0_RELOAD_L, #low(TIMER0_RELOAD)
0360            113     ; Enable the timer and interrupts
0360 D2A9       114       setb ET0  ; Enable timer 0 interrupt
0362 D28C       115       setb TR0  ; Start timer 0
0364 22         116     ret
0365            117   
0365            118   ;---------------------------------;
0365            119   ; ISR for timer 0.  Set to execute;
0365            120   ; every 1/4096Hz to generate a    ;
0365            121   ; 2048 Hz square wave at pin P3.7 ;
0365            122   ;---------------------------------;
0365            123   Timer0_ISR:
0365            124     ;clr TF0  ; According to the data sheet this is done for us already.
0365 8000       125     sjmp no_beep
0367            126   beep_on:
0367            127     ;cpl SOUND_OUT ; Connect speaker to P3.7!
0367            128   no_beep:
0367 32         129     reti
0368            130     
0368            131     
0368            132   
                133   Send_BCD mac
                134     push ar0
                135     mov r0, %0
                136     lcall ?Send_BCD
                137     mov a, #'\r'
                138       lcall putchar
                139       mov a, #'\n'
                140       lcall putchar
                141     pop ar0
                142   endmac
0368            143   
0368            144   
0368            145     
0368            146   ;---------------------------------;
0368            147   ; Routine to initialize the ISR   ;
0368            148   ; for timer 2                     ;
0368            149   ;---------------------------------;
0368            150   Timer2_Init:
0368 75C800     151     mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
036B 75CDA9     152     mov TH2, #high(TIMER2_RELOAD)
036E 75CC9A     153     mov TL2, #low(TIMER2_RELOAD)
0371            154     ; Set the reload value
0371 75CBA9     155     mov RCAP2H, #high(TIMER2_RELOAD)
0374 75CA9A     156     mov RCAP2L, #low(TIMER2_RELOAD)
0377            157     ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0377 E4         158     clr a
0378 F530       159     mov Count1ms+0, a
037A F531       160     mov Count1ms+1, a
037C            161     ; Enable the timer and interrupts
037C D2AD       162       setb ET2  ; Enable timer 2 interrupt
037E D2CA       163       setb TR2  ; Enable timer 2
0380 22         164     ret
0381            165   
0381            166   ;---------------------------------;
0381            167   ; ISR for timer 2                 ;
0381            168   ;---------------------------------;
0381            169   Timer2_ISR:
0381 C2CF       170     clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
0383 B2B6       171     cpl P3.6 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
0385            172     
0385            173     ; The two registers used in the ISR must be saved in the stack
0385 C0E0       174     push acc
0387 C0D0       175     push psw
0389            176     
0389            177     ; Increment the 16-bit one mili second counter
0389            178         ; inc Count1ms+0    ; Increment the low 8-bits first
0389            179           ;mov a, Count1ms+0
0389            180         ; cjne a, #10h, Timer2_ISR_done
0389            181         ; mov Count1ms+0, #0h
0389 0530       182     inc Count1ms+0    ; Increment the low 8-bits first
038B E530       183     mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
038D 7015       184     jnz Inc_Done
038F 0531       185     inc Count1ms+1
0391            186     
0391 C000       187     push ar0
0393 A83F       187     mov r0, bcd
0395 120651     187     lcall ?Send_BCD
0398 740D       187     mov a, #'\r'
039A 1203DB     187       lcall putchar
039D 740A       187       mov a, #'\n'
039F 1203DB     187       lcall putchar
03A2 D000       187     pop ar0
03A4            188     Inc_Done:
03A4            189     ; Check if a second has passed
03A4            190   
03A4 E530       191     mov a, Count1ms+0
03A6 B4C815     192     cjne a, #low(MILLISECOND_WAIT), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
03A9 E531       193     mov a, Count1ms+1
03AB B40010     194     cjne a, #high(MILLISECOND_WAIT), Timer2_ISR_done
03AE            195     
03AE            196     ; 1000 milliseconds have passed.  Set a flag so the main program knows
03AE D201       197     setb one_second_flag ; Let the main program know one second had passed
03B0 B28C       198     cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
03B2            199     ; Reset to zero the milli-seconds counter, it is a 16-bit variable
03B2 E4         200     clr a
03B3 F530       201     mov Count1ms+0, a
03B5 F531       202     mov Count1ms+1, a
03B7            203     ; Increment the BCD counter
03B7 E536       204     mov a, seconds
03B9 2401       205     add a, #0x01
03BB D4         206     da a ; Decimal adjust instruction.  Check datasheet for more details!
03BC F536       207     mov seconds, a
03BE            208     
03BE            209     
03BE            210   Timer2_ISR_done:
03BE D0D0       211     pop psw
03C0 D0E0       212     pop acc
03C2 32         213     reti
03C3            214   
03C3            215   ; Configure the serial port and baud rate
03C3            216   InitSerialPort:
03C3            217       ; Since the reset button bounces, we need to wait a bit before
03C3            218       ; sending messages, otherwise we risk displaying gibberish!
03C3 79DE       219       mov R1, #222
03C5 78A6       220       mov R0, #166
03C7 D8FE       221       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
03C9 D9FA       222       djnz R1, $-4 ; 22.51519us*222=4.998ms
03CB            223       ; Now we can proceed with the configuration
03CB 438780     224     orl PCON,#0x80
03CE 759852     225     mov SCON,#0x52
03D1 759B00     226     mov BDRCON,#0x00
03D4 759AF4     227     mov BRL,#BRG_VAL
03D7 759B1E     228     mov BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
03DA 22         229       ret
03DB            230   
03DB            231   ; Send a character using the serial port
03DB            232   putchar:
03DB 3099FD     233       jnb TI, putchar
03DE C299       234       clr TI
03E0 F599       235       mov SBUF, a
03E2 22         236       ret
03E3            237   
03E3            238   ; Send a constant-zero-terminated string using the serial port
03E3            239   SendString:
03E3 E4         240       clr A
03E4 93         241       movc A, @A+DPTR
03E5 6006       242       jz SendStringDone
03E7 1203DB     243       lcall putchar
03EA A3         244       inc DPTR
03EB 80F6       245       sjmp SendString
03ED            246   SendStringDone:
03ED 22         247       ret
03EE            248       
03EE            249   INIT_SPI:
03EE D2A2       250     setb MY_MISO ; Make MISO an input pin
03F0 C2A3       251     clr MY_SCLK ; For mode (0,0) SCLK is zero
03F2 22         252     ret
03F3            253   
03F3            254   DO_SPI_G:
03F3 C0E0       255     push acc
03F5 7900       256     mov R1, #0 ; Received byte stored in R1
03F7 7A08       257     mov R2, #8 ; Loop counter (8-bits)
03F9            258   DO_SPI_G_LOOP:
03F9 E8         259     mov a, R0 ; Byte to write is in R0
03FA 33         260     rlc a ; Carry flag has bit to write
03FB F8         261     mov R0, a
03FC 92A1       262     mov MY_MOSI, c
03FE D2A3       263     setb MY_SCLK ; Transmit
0400 A2A2       264     mov c, MY_MISO ; Read received bit
0402 E9         265     mov a, R1 ; Save received bit in R1
0403 33         266     rlc a
0404 F9         267     mov R1, a
0405 C2A3       268     clr MY_SCLK
0407 DAF0       269     djnz R2, DO_SPI_G_LOOP
0409 D0E0       270     pop acc
040B 22         271     ret
040C            272    
040C            273   Hello_World:
040C 48656C6C   274       DB  'Hello, World!', '\r', '\n', 0
     6F2C2057
     6F726C64
     210D0A00
041C            275       
041C            276   Delay:
041C 79DE       277     mov R1, #222
041E 78A6       278       mov R0, #166
0420 D8FE       279       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
0422 D9FA       280       djnz R1, $-4 ; 22.51519us*222=4.998ms
0424 32         281       reti
0425            282       
                283   Left_blank mac
                284     mov a, %0
                285     anl a, #0xf0
                286     swap a
                287     jz Left_blank_%M_a
                288     ljmp %1
                289   Left_blank_%M_a:
                290     Display_char(#' ')
                291     mov a, %0
                292     anl a, #0x0f
                293     jz Left_blank_%M_b
                294     ljmp %1
                295   Left_blank_%M_b:
                296     Display_char(#' ')
                297   endmac
0425            298      
0425            299   ; Sends 10-digit BCD number in bcd to the LCD 
0425            300   Display_10_digit_BCD:
0425 C0E0       301            push acc
0427 7407       301            mov a, #7
0429 14         301            dec a
042A 12032F     301            lcall ?Set_Cursor_2 ; Select column and row
042D D0E0       301            pop acc
042F C000       302            push ar0
0431 A843       302            mov r0, bcd+4
0433 120336     302            lcall ?Display_BCD
0436 D000       302            pop ar0
0438 C000       303            push ar0
043A A842       303            mov r0, bcd+3
043C 120336     303            lcall ?Display_BCD
043F D000       303            pop ar0
0441 C000       304            push ar0
0443 A841       304            mov r0, bcd+2
0445 120336     304            lcall ?Display_BCD
0448 D000       304            pop ar0
044A C000       305            push ar0
044C A840       305            mov r0, bcd+1
044E 120336     305            lcall ?Display_BCD
0451 D000       305            pop ar0
0453 C000       306            push ar0
0455 A83F       306            mov r0, bcd+0
0457 120336     306            lcall ?Display_BCD
045A D000       306            pop ar0
045C            307     ; Replace all the zeros to the left with blanks
045C C0E0       308            push acc
045E 7407       308            mov a, #7
0460 14         308            dec a
0461 12032F     308            lcall ?Set_Cursor_2 ; Select column and row
0464 D0E0       308            pop acc
0466 E543       309     mov a, bcd+4
0468 54F0       309     anl a, #0xf0
046A C4         309     swap a
046B 6003       309     jz Left_blank_16_a
046D 02050A     309     ljmp skip_blank
0470            309   Left_blank_16_a:
0470 C0E0       309            push acc
0472 7420       309            mov a, #' '
0474 1202EE     309            lcall ?WriteData
0477 D0E0       309            pop acc
0479 E543       309     mov a, bcd+4
047B 540F       309     anl a, #0x0f
047D 6003       309     jz Left_blank_16_b
047F 02050A     309     ljmp skip_blank
0482            309   Left_blank_16_b:
0482 C0E0       309            push acc
0484 7420       309            mov a, #' '
0486 1202EE     309            lcall ?WriteData
0489 D0E0       309            pop acc
048B E542       310     mov a, bcd+3
048D 54F0       310     anl a, #0xf0
048F C4         310     swap a
0490 6003       310     jz Left_blank_19_a
0492 02050A     310     ljmp skip_blank
0495            310   Left_blank_19_a:
0495 C0E0       310            push acc
0497 7420       310            mov a, #' '
0499 1202EE     310            lcall ?WriteData
049C D0E0       310            pop acc
049E E542       310     mov a, bcd+3
04A0 540F       310     anl a, #0x0f
04A2 6003       310     jz Left_blank_19_b
04A4 02050A     310     ljmp skip_blank
04A7            310   Left_blank_19_b:
04A7 C0E0       310            push acc
04A9 7420       310            mov a, #' '
04AB 1202EE     310            lcall ?WriteData
04AE D0E0       310            pop acc
04B0 E541       311     mov a, bcd+2
04B2 54F0       311     anl a, #0xf0
04B4 C4         311     swap a
04B5 6003       311     jz Left_blank_22_a
04B7 02050A     311     ljmp skip_blank
04BA            311   Left_blank_22_a:
04BA C0E0       311            push acc
04BC 7420       311            mov a, #' '
04BE 1202EE     311            lcall ?WriteData
04C1 D0E0       311            pop acc
04C3 E541       311     mov a, bcd+2
04C5 540F       311     anl a, #0x0f
04C7 6003       311     jz Left_blank_22_b
04C9 02050A     311     ljmp skip_blank
04CC            311   Left_blank_22_b:
04CC C0E0       311            push acc
04CE 7420       311            mov a, #' '
04D0 1202EE     311            lcall ?WriteData
04D3 D0E0       311            pop acc
04D5 E540       312     mov a, bcd+1
04D7 54F0       312     anl a, #0xf0
04D9 C4         312     swap a
04DA 6003       312     jz Left_blank_25_a
04DC 02050A     312     ljmp skip_blank
04DF            312   Left_blank_25_a:
04DF C0E0       312            push acc
04E1 7420       312            mov a, #' '
04E3 1202EE     312            lcall ?WriteData
04E6 D0E0       312            pop acc
04E8 E540       312     mov a, bcd+1
04EA 540F       312     anl a, #0x0f
04EC 6003       312     jz Left_blank_25_b
04EE 02050A     312     ljmp skip_blank
04F1            312   Left_blank_25_b:
04F1 C0E0       312            push acc
04F3 7420       312            mov a, #' '
04F5 1202EE     312            lcall ?WriteData
04F8 D0E0       312            pop acc
04FA E53F       313     mov a, bcd+0
04FC 54F0       314     anl a, #0f0h
04FE C4         315     swap a
04FF 7009       316     jnz skip_blank
0501 C0E0       317            push acc
0503 7420       317            mov a, #' '
0505 1202EE     317            lcall ?WriteData
0508 D0E0       317            pop acc
050A            318   skip_blank:
050A 22         319     ret
050B            320     
050B            321   Display_10_digit_BCD_2:
050B C0E0       322            push acc
050D 7407       322            mov a, #7
050F 14         322            dec a
0510 120331     322            lcall ?Set_Cursor_1 ; Select column and row
0513 D0E0       322            pop acc
0515 C000       323            push ar0
0517 A843       323            mov r0, bcd+4
0519 120336     323            lcall ?Display_BCD
051C D000       323            pop ar0
051E C000       324            push ar0
0520 A842       324            mov r0, bcd+3
0522 120336     324            lcall ?Display_BCD
0525 D000       324            pop ar0
0527 C000       325            push ar0
0529 A841       325            mov r0, bcd+2
052B 120336     325            lcall ?Display_BCD
052E D000       325            pop ar0
0530 C000       326            push ar0
0532 A840       326            mov r0, bcd+1
0534 120336     326            lcall ?Display_BCD
0537 D000       326            pop ar0
0539 C000       327            push ar0
053B A83F       327            mov r0, bcd+0
053D 120336     327            lcall ?Display_BCD
0540 D000       327            pop ar0
0542            328     ; Replace all the zeros to the left with blanks
0542 C0E0       329            push acc
0544 7407       329            mov a, #7
0546 14         329            dec a
0547 120331     329            lcall ?Set_Cursor_1 ; Select column and row
054A D0E0       329            pop acc
054C E543       330     mov a, bcd+4
054E 54F0       330     anl a, #0xf0
0550 C4         330     swap a
0551 6003       330     jz Left_blank_36_a
0553 0205F0     330     ljmp skip_blank_2
0556            330   Left_blank_36_a:
0556 C0E0       330            push acc
0558 7420       330            mov a, #' '
055A 1202EE     330            lcall ?WriteData
055D D0E0       330            pop acc
055F E543       330     mov a, bcd+4
0561 540F       330     anl a, #0x0f
0563 6003       330     jz Left_blank_36_b
0565 0205F0     330     ljmp skip_blank_2
0568            330   Left_blank_36_b:
0568 C0E0       330            push acc
056A 7420       330            mov a, #' '
056C 1202EE     330            lcall ?WriteData
056F D0E0       330            pop acc
0571 E542       331     mov a, bcd+3
0573 54F0       331     anl a, #0xf0
0575 C4         331     swap a
0576 6003       331     jz Left_blank_39_a
0578 0205F0     331     ljmp skip_blank_2
057B            331   Left_blank_39_a:
057B C0E0       331            push acc
057D 7420       331            mov a, #' '
057F 1202EE     331            lcall ?WriteData
0582 D0E0       331            pop acc
0584 E542       331     mov a, bcd+3
0586 540F       331     anl a, #0x0f
0588 6003       331     jz Left_blank_39_b
058A 0205F0     331     ljmp skip_blank_2
058D            331   Left_blank_39_b:
058D C0E0       331            push acc
058F 7420       331            mov a, #' '
0591 1202EE     331            lcall ?WriteData
0594 D0E0       331            pop acc
0596 E541       332     mov a, bcd+2
0598 54F0       332     anl a, #0xf0
059A C4         332     swap a
059B 6003       332     jz Left_blank_42_a
059D 0205F0     332     ljmp skip_blank_2
05A0            332   Left_blank_42_a:
05A0 C0E0       332            push acc
05A2 7420       332            mov a, #' '
05A4 1202EE     332            lcall ?WriteData
05A7 D0E0       332            pop acc
05A9 E541       332     mov a, bcd+2
05AB 540F       332     anl a, #0x0f
05AD 6003       332     jz Left_blank_42_b
05AF 0205F0     332     ljmp skip_blank_2
05B2            332   Left_blank_42_b:
05B2 C0E0       332            push acc
05B4 7420       332            mov a, #' '
05B6 1202EE     332            lcall ?WriteData
05B9 D0E0       332            pop acc
05BB E540       333     mov a, bcd+1
05BD 54F0       333     anl a, #0xf0
05BF C4         333     swap a
05C0 6003       333     jz Left_blank_45_a
05C2 0205F0     333     ljmp skip_blank_2
05C5            333   Left_blank_45_a:
05C5 C0E0       333            push acc
05C7 7420       333            mov a, #' '
05C9 1202EE     333            lcall ?WriteData
05CC D0E0       333            pop acc
05CE E540       333     mov a, bcd+1
05D0 540F       333     anl a, #0x0f
05D2 6003       333     jz Left_blank_45_b
05D4 0205F0     333     ljmp skip_blank_2
05D7            333   Left_blank_45_b:
05D7 C0E0       333            push acc
05D9 7420       333            mov a, #' '
05DB 1202EE     333            lcall ?WriteData
05DE D0E0       333            pop acc
05E0 E53F       334     mov a, bcd+0
05E2 54F0       335     anl a, #0f0h
05E4 C4         336     swap a
05E5 7009       337     jnz skip_blank_2
05E7 C0E0       338            push acc
05E9 7420       338            mov a, #' '
05EB 1202EE     338            lcall ?WriteData
05EE D0E0       338            pop acc
05F0            339   skip_blank_2:
05F0 22         340     ret
05F1            341   
05F1            342     ; Sends 10-digit BCD number in BCD to the SPI
05F1            343   Send_10_digit_BCD:
05F1 C000       344     push ar0
05F3 A843       344     mov r0, bcd+4
05F5 120651     344     lcall ?Send_BCD
05F8 740D       344     mov a, #'\r'
05FA 1203DB     344       lcall putchar
05FD 740A       344       mov a, #'\n'
05FF 1203DB     344       lcall putchar
0602 D000       344     pop ar0
0604 C000       345     push ar0
0606 A842       345     mov r0, bcd+3
0608 120651     345     lcall ?Send_BCD
060B 740D       345     mov a, #'\r'
060D 1203DB     345       lcall putchar
0610 740A       345       mov a, #'\n'
0612 1203DB     345       lcall putchar
0615 D000       345     pop ar0
0617 C000       346     push ar0
0619 A841       346     mov r0, bcd+2
061B 120651     346     lcall ?Send_BCD
061E 740D       346     mov a, #'\r'
0620 1203DB     346       lcall putchar
0623 740A       346       mov a, #'\n'
0625 1203DB     346       lcall putchar
0628 D000       346     pop ar0
062A C000       347     push ar0
062C A840       347     mov r0, bcd+1
062E 120651     347     lcall ?Send_BCD
0631 740D       347     mov a, #'\r'
0633 1203DB     347       lcall putchar
0636 740A       347       mov a, #'\n'
0638 1203DB     347       lcall putchar
063B D000       347     pop ar0
063D C000       348     push ar0
063F A83F       348     mov r0, bcd+0
0641 120651     348     lcall ?Send_BCD
0644 740D       348     mov a, #'\r'
0646 1203DB     348       lcall putchar
0649 740A       348       mov a, #'\n'
064B 1203DB     348       lcall putchar
064E D000       348     pop ar0
0650 22         349     ret
0651            350   
0651            351   ?Send_BCD:
0651 C0E0       352     push acc
0653            353     ; Write most significant digit
0653 E8         354     mov a, r0
0654 C4         355     swap a
0655 540F       356     anl a, #0fh
0657 4430       357     orl a, #30h
0659 1203DB     358     lcall putchar
065C            359     ; write least significant digit
065C E8         360     mov a, r0
065D 540F       361     anl a, #0fh
065F 4430       362     orl a, #30h
0661 1203DB     363     lcall putchar
0664 D0E0       364     pop acc
0666 22         365     ret
0667            366   
0667            367   GET_ADC_TEMP:
0667 C2A0       368       clr CE_ADC         ; selects 
0669 7801       369       mov R0, #00000001B ; Start bit: 1
066B 1203F3     370       lcall DO_SPI_G
066E            371       
066E 7880       372       mov R0, #10000000B ; Read channel 0
0670 1203F3     373       lcall DO_SPI_G
0673 E9         374       mov a, R1
0674 5403       375       anl a, #00000011B
0676 F533       376       mov Result+1, a    ; Save high result
0678            377       
0678 7855       378       mov R0, #55H
067A 1203F3     379       lcall DO_SPI_G
067D 8932       380       mov Result, R1     ; Save low result
067F            381       
067F D2A0       382       setb CE_ADC        ; deselects
0681            383       
0681            384       ;V_OUT = ADC_voltage*4.096V/1023
0681            385       ;ADC_voltage*4096 = A
0681 853237     386       mov x+0, Result
0684 853338     387       mov x+1, Result+1
0687 753900     388       mov x+2, #0
068A 753A00     389       mov x+3, #0
068D            390       
068D 22         391    ret
068E            392   
068E            393    GET_THERMO_TEMP:
068E C2A0       394       clr CE_ADC         ; selects 
0690 7801       395       mov R0, #00000001B ; Start bit: 1
0692 1203F3     396       lcall DO_SPI_G
0695            397       
0695 7890       398       mov R0, #10010000B ; Read channel 1
0697 1203F3     399       lcall DO_SPI_G
069A E9         400       mov a, R1
069B 5403       401       anl a, #00000011B
069D F535       402       mov Result_Thermo+1, a    ; Save high result
069F            403       
069F 7855       404       mov R0, #55H
06A1 1203F3     405       lcall DO_SPI_G
06A4 8934       406       mov Result_Thermo, R1     ; Save low result
06A6 D2A0       407       setb CE_ADC        ; deselects
06A8            408       
06A8            409       ;V_OUT = ADC_voltage*4.096V/1023
06A8            410       ;ADC_voltage*4096 = A
06A8 853437     411       mov x+0, Result_Thermo
06AB 853538     412       mov x+1, Result_Thermo+1
06AE 753900     413       mov x+2, #0
06B1 753A00     414       mov x+3, #0
06B4 22         415     ret
06B5            416   
06B5            417   ;____________________________________
06B5            418    ;*************************************
06B5            419   
06B5            420   ; This is the code that converts the amplified voltage from the the k-type thermocouple 
06B5            421   ; to temperature data for use. 
06B5            422   ; Current Parameters: 
06B5            423   ;   Op-amp gain: ~200
06B5            424   ;   Thermocouple conversion: 41 uV/celcius
06B5            425   ;     Reference Voltage: 4.096 
06B5            426   ; inputs
06B5            427   ;*************************************    
06B5            428   ;-------------------------------------    
06B5            429   
06B5            430   Voltage_to_temp_LM355: 
06B5 753B00     431            mov y+0, #low (4096 % 0x10000) 
06B8 753C10     431            mov y+1, #high(4096 % 0x10000) 
06BB 753D00     431            mov y+2, #low (4096 / 0x10000) 
06BE 753E00     431            mov y+3, #high(4096 / 0x10000) 
06C1 1201A8     432           lcall mul32 ;multiplies x *= y
06C4            433           
06C4            434           ;A/1023 = B
06C4 753BFF     435            mov y+0, #low (1023 % 0x10000) 
06C7 753C03     435            mov y+1, #high(1023 % 0x10000) 
06CA 753D00     435            mov y+2, #low (1023 / 0x10000) 
06CD 753E00     435            mov y+3, #high(1023 / 0x10000) 
06D0 120235     436           lcall div32 ;divides x /= y
06D3            437           
06D3            438           ;B - 2730 = C
06D3 753BAA     439            mov y+0, #low (2730 % 0x10000) 
06D6 753C0A     439            mov y+1, #high(2730 % 0x10000) 
06D9 753D00     439            mov y+2, #low (2730 / 0x10000) 
06DC 753E00     439            mov y+3, #high(2730 / 0x10000) ;
06DF 120114     440           lcall sub32
06E2            441           
06E2            442           ;B/10 = V_OUT
06E2 753B0A     443            mov y+0, #low (10 % 0x10000) 
06E5 753C00     443            mov y+1, #high(10 % 0x10000) 
06E8 753D00     443            mov y+2, #low (10 / 0x10000) 
06EB 753E00     443            mov y+3, #high(10 / 0x10000) ;
06EE 120235     444           lcall div32 ;divides x /= y
06F1 12002E     445           lcall hex2bcd
06F4 22         446         ret
06F5            447   
06F5            448     Voltage_to_temp_thermocouple: 
06F5            449   
06F5            450     ;SPI_REF_VOLTAGE_mul100 equ 4081
06F5            451     ;THERMOCOUPLE_CONVERSION_div1000 equ 2475
06F5            452     
06F5            453     ;
06F5            454     ; We are doing the conversion from V--> 10 bit Temp (deg C)
06F5            455     ; Start: Amplified Volts, Vin
06F5            456     ;
06F5            457     ;     Vin*(1 deg C)* (V_REF)*    1    * 1
06F5            458     ;      --------         ---    ---  - ADC_RESULT
06F5            459     ;       (41 uV )       OP_AMP_GAIn  1023
06F5            460   
06F5 753BF1     461            mov y+0, #low (4081 % 0x10000) 
06F8 753C0F     461            mov y+1, #high(4081 % 0x10000) 
06FB 753D00     461            mov y+2, #low (4081 / 0x10000) 
06FE 753E00     461            mov y+3, #high(4081 / 0x10000) ; 4.081*1000=mV
0701 1201A8     462     lcall mul32
0704            463     
0704 753BFF     464            mov y+0, #low (1023 % 0x10000) 
0707 753C03     464            mov y+1, #high(1023 % 0x10000) 
070A 753D00     464            mov y+2, #low (1023 / 0x10000) 
070D 753E00     464            mov y+3, #high(1023 / 0x10000) 
0710 120235     465     lcall div32   
0713            466     
0713 753BF7     467            mov y+0, #low (247 % 0x10000) 
0716 753C00     467            mov y+1, #high(247 % 0x10000) 
0719 753D00     467            mov y+2, #low (247 / 0x10000) 
071C 753E00     467            mov y+3, #high(247 / 0x10000)  ; 24.75*10
071F 1201A8     468     lcall mul32
0722            469           ;---------
0722 753BD0     470            mov y+0, #low (2000 % 0x10000) 
0725 753C07     470            mov y+1, #high(2000 % 0x10000) 
0728 753D00     470            mov y+2, #low (2000 / 0x10000) 
072B 753E00     470            mov y+3, #high(2000 / 0x10000)  ; 200*10
072E 120235     471     lcall div32
0731            472     
0731            473    ; Load_y(24)
0731            474    ;lcall sub32
0731            475       
0731 12002E     476       lcall hex2bcd
0734 22         477      ret
0735            478     
0735            479   
0735            480   
0735            481   
0735            482   MainProgram:
0735 75817F     483       mov SP, #7FH ; Set the stack pointer to the begining of idata
0738            484       
0738            485       ;lcall Timer0_Init
0738 120368     486       lcall Timer2_Init
073B            487       ; In case you decide to use the pins of P0, configure the port in bidirectional mode:
073B 75E600     488       mov P0M0, #0
073E 75E700     489       mov P0M1, #0
0741 D2AF       490       setb EA   ; Enable Global interrupts
0743            491       
0743 1203C3     492       lcall InitSerialPort
0746 90040C     493       mov DPTR, #Hello_World
0749 1203E3     494       lcall SendString
074C            495       
074C 1203EE     496       lcall INIT_SPI
074F 1202F8     497       lcall LCD_4BIT
0752            498       
0752            499   forever:
0752 00         500   nop
0753            501   
0753            502   
0753            503   GET_TEMP_DATA: 
0753 3001FD     504     jnb one_second_flag, GET_TEMP_DATA
0756 C201       505     clr one_second_flag ; We clear this flag in the main loop, but it is set in the ISR for timer 2
0758            506     
0758            507     ;Gets, displays, and pushes ADC LM355 temp values
0758 120667     508     lcall GET_ADC_TEMP
075B 1206B5     509       lcall Voltage_to_temp_LM355
075E 120425     510       lcall Display_10_digit_BCD
0761            511       
0761            512       ; Gets, displays, and pushes k-type thermocouple vlaues
0761 12068E     513     lcall GET_THERMO_TEMP
0764 1206F5     514       lcall Voltage_to_temp_thermocouple
0767 1205F1     515       lcall Send_10_digit_BCD
076A 12050B     516       lcall Display_10_digit_BCD_2
076D            517       
076D 12041C     518       lcall Delay
0770 020752     519       ljmp forever ; This is equivalent to 'forever: sjmp forever'
0773 22         520       ret
0774            521     
0774            522   
0774            523   
0774            524   EN
