                 -1   $MODLP51
0000              1   ;--------------------------------------------------------
0000              2   ; Special Function Registers
0000              3   ;--------------------------------------------------------
0000              4   ACC            DATA 0xe0
0000              5   B              DATA 0xf0
0000              6   PSW            DATA 0xd0
0000              7   SP             DATA 0x81
0000              8   SPX            DATA 0xef
0000              9   DPL            DATA 0x82
0000             10   DPH            DATA 0x83
0000             11   DPLB           DATA 0xd4
0000             12   DPHB           DATA 0xd5
0000             13   PAGE           DATA 0xf6
0000             14   AX             DATA 0xe1
0000             15   BX             DATA 0xf7
0000             16   DSPR           DATA 0xe2
0000             17   FIRD           DATA 0xe3
0000             18   MACL           DATA 0xe4
0000             19   MACH           DATA 0xe5
0000             20   PCON           DATA 0x87
0000             21   AUXR           DATA 0x8e
0000             22   AUXR1          DATA 0xa2
0000             23   DPCF           DATA 0xa1
0000             24   CKRL           DATA 0x97
0000             25   CKCKON0        DATA 0x8f
0000             26   CKCKON1        DATA 0xaf
0000             27   CKSEL          DATA 0x85
0000             28   CLKREG         DATA 0xae
0000             29   OSCCON         DATA 0x85
0000             30   IE             DATA 0xa8
0000             31   IEN0           DATA 0xa8
0000             32   IEN1           DATA 0xb1
0000             33   IPH0           DATA 0xb7
0000             34   IP             DATA 0xb8
0000             35   IPL0           DATA 0xb8
0000             36   IPH1           DATA 0xb3
0000             37   IPL1           DATA 0xb2
0000             38   P0             DATA 0x80
0000             39   P1             DATA 0x90
0000             40   P2             DATA 0xa0
0000             41   P3             DATA 0xb0
0000             42   P4             DATA 0xc0
0000             43   P0M0           DATA 0xe6
0000             44   P0M1           DATA 0xe7
0000             45   P1M0           DATA 0xd6
0000             46   P1M1           DATA 0xd7
0000             47   P2M0           DATA 0xce
0000             48   P2M1           DATA 0xcf
0000             49   P3M0           DATA 0xc6
0000             50   P3M1           DATA 0xc7
0000             51   P4M0           DATA 0xbe
0000             52   P4M1           DATA 0xbf
0000             53   SCON           DATA 0x98
0000             54   SBUF           DATA 0x99
0000             55   SADEN          DATA 0xb9
0000             56   SADDR          DATA 0xa9
0000             57   BDRCON         DATA 0x9b
0000             58   BRL            DATA 0x9a
0000             59   TCON           DATA 0x88
0000             60   TMOD           DATA 0x89
0000             61   TCONB          DATA 0x91
0000             62   TL0            DATA 0x8a
0000             63   TH0            DATA 0x8c
0000             64   TL1            DATA 0x8b
0000             65   TH1            DATA 0x8d
0000             66   RL0            DATA 0xf2
0000             67   RL1            DATA 0xf3
0000             68   RH0            DATA 0xf4
0000             69   RH1            DATA 0xf5
0000             70   WDTRST         DATA 0xa6
0000             71   WDTPRG         DATA 0xa7
0000             72   T2CON          DATA 0xc8
0000             73   T2MOD          DATA 0xc9
0000             74   RCAP2H         DATA 0xcb
0000             75   RCAP2L         DATA 0xca
0000             76   TH2            DATA 0xcd
0000             77   TL2            DATA 0xcc
0000             78   SPCON          DATA 0xc3
0000             79   SPSTA          DATA 0xc4
0000             80   SPDAT          DATA 0xc5
0000             81   SSCON          DATA 0x93
0000             82   SSCS           DATA 0x94
0000             83   SSDAT          DATA 0x95
0000             84   SSADR          DATA 0x96
0000             85   KBLS           DATA 0x9c
0000             86   KBE            DATA 0x9d
0000             87   KBF            DATA 0x9e
0000             88   KBMOD          DATA 0x9f
0000             89   BMSEL          DATA 0x92
0000             90   FCON           DATA 0xd2
0000             91   EECON          DATA 0xd2
0000             92   ACSRA          DATA 0xa3
0000             93   ACSRB          DATA 0xab
0000             94   AREF           DATA 0xbd
0000             95   DADC           DATA 0xa4
0000             96   DADI           DATA 0xa5
0000             97   DADL           DATA 0xac
0000             98   DADH           DATA 0xad
0000             99   CCON           DATA 0xd8
0000            100   CMOD           DATA 0xd9
0000            101   CL             DATA 0xe9
0000            102   CH             DATA 0xf9
0000            103   CCAPM0         DATA 0xda
0000            104   CCAPM1         DATA 0xdb
0000            105   CCAPM2         DATA 0xdc
0000            106   CCAPM3         DATA 0xdd
0000            107   CCAPM4         DATA 0xde
0000            108   CCAP0H         DATA 0xfa
0000            109   CCAP1H         DATA 0xfb
0000            110   CCAP2H         DATA 0xfc
0000            111   CCAP3H         DATA 0xfd
0000            112   CCAP4H         DATA 0xfe
0000            113   CCAP0L         DATA 0xea
0000            114   CCAP1L         DATA 0xeb
0000            115   CCAP2L         DATA 0xec
0000            116   CCAP3L         DATA 0xed
0000            117   CCAP4L         DATA 0xee
0000            118   ;--------------------------------------------------------
0000            119   ; special function bits
0000            120   ;--------------------------------------------------------
0000            121   P              BIT 0xd0
0000            122   F1             BIT 0xd1
0000            123   OV             BIT 0xd2
0000            124   RS0            BIT 0xd3
0000            125   RS1            BIT 0xd4
0000            126   F0             BIT 0xd5
0000            127   AC             BIT 0xd6
0000            128   CY             BIT 0xd7
0000            129   EX0            BIT 0xa8
0000            130   ET0            BIT 0xa9
0000            131   EX1            BIT 0xaa
0000            132   ET1            BIT 0xab
0000            133   ES             BIT 0xac
0000            134   ET2            BIT 0xad
0000            135   EC             BIT 0xae
0000            136   EA             BIT 0xaf
0000            137   PX0            BIT 0xb8
0000            138   PT0            BIT 0xb9
0000            139   PX1            BIT 0xba
0000            140   PT1            BIT 0xbb
0000            141   PS             BIT 0xbc
0000            142   PT2            BIT 0xbd
0000            143   IP0D           BIT 0xbf
0000            144   PPCL           BIT 0xbe
0000            145   PT2L           BIT 0xbd
0000            146   PLS            BIT 0xbc
0000            147   PT1L           BIT 0xbb
0000            148   PX1L           BIT 0xba
0000            149   PT0L           BIT 0xb9
0000            150   PX0L           BIT 0xb8
0000            151   RXD            BIT 0xb0
0000            152   TXD            BIT 0xb1
0000            153   INT0           BIT 0xb2
0000            154   INT1           BIT 0xb3
0000            155   T0             BIT 0xb4
0000            156   T1             BIT 0xb5
0000            157   WR             BIT 0xb6
0000            158   RD             BIT 0xb7
0000            159   RI             BIT 0x98
0000            160   TI             BIT 0x99
0000            161   RB8            BIT 0x9a
0000            162   TB8            BIT 0x9b
0000            163   REN            BIT 0x9c
0000            164   SM2            BIT 0x9d
0000            165   SM1            BIT 0x9e
0000            166   SM0            BIT 0x9f
0000            167   IT0            BIT 0x88
0000            168   IE0            BIT 0x89
0000            169   IT1            BIT 0x8a
0000            170   IE1            BIT 0x8b
0000            171   TR0            BIT 0x8c
0000            172   TF0            BIT 0x8d
0000            173   TR1            BIT 0x8e
0000            174   TF1            BIT 0x8f
0000            175   CP_RL2         BIT 0xc8
0000            176   C_T2           BIT 0xc9
0000            177   TR2            BIT 0xca
0000            178   EXEN2          BIT 0xcb
0000            179   TCLK           BIT 0xcc
0000            180   RCLK           BIT 0xcd
0000            181   EXF2           BIT 0xce
0000            182   TF2            BIT 0xcf
0000            183   CF             BIT 0xdf
0000            184   CR             BIT 0xde
0000            185   CCF4           BIT 0xdc
0000            186   CCF3           BIT 0xdb
0000            187   CCF2           BIT 0xda
0000            188   CCF1           BIT 0xd9
0000            189   CCF0           BIT 0xd8
0000              2   
0000              3   ; There is a couple of typos in MODLP51 in the definition of the timer 0/1 reload
0000              4   ; special function registers (SFRs), so:
0000              5   
0000              6   TIMER0_RELOAD_L DATA 0xf2
0000              7   TIMER1_RELOAD_L DATA 0xf3
0000              8   TIMER0_RELOAD_H DATA 0xf4
0000              9   TIMER1_RELOAD_H DATA 0xf5
0000             10   
0000             11   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
0000             12   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             13   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             14   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             15   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             16   MAX_TEMP           EQU 250
0000             17   TIMEOUT_TIME  EQU 60
0000             18   BAUD equ 115200
0000             19   BRG_VAL equ (0x100-(CLK/(16*BAUD)))
0000             20   MILLISECOND_WAIT equ 200                 ; how many milliseconds between temp samples
0000             21   
0000             22   DUTY_0    EQU 0
0000             23   DUTY_20   EQU 51   ;256 * 0.2
0000             24   DUTY_50   EQU 128  ;256 * 0.5
0000             25   DUTY_80   EQU 204  ;256 * 0.8
0000             26   DUTY_100  EQU 255
0000             27   
0000             28   org 0x0000
0000 02141F      29      ljmp MainProgram
0003             30   
0003             31   ; External interrupt 0 vector (not used in this code)
0003             32   org 0x0003
0003 32          33            reti
0004             34   
0004             35   ; Timer/Counter 0 overflow interrupt vector
000B             36   org 0x000B
000B 021319      37            ljmp Timer0_ISR
000E             38   
000E             39   ; External interrupt 1 vector (not used in this code)
0013             40   org 0x0013
0013 32          41            reti
0014             42   
0014             43   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             44   org 0x001B
001B 32          45            reti
001C             46   
001C             47   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             48   org 0x0023 
0023 32          49            reti
0024             50            
0024             51   ; Timer/Counter 2 overflow interrupt vector
002B             52   org 0x002B
002B 021354      53            ljmp Timer2_ISR
002E             54   
002E             55   ;Edge triggered keyboard interrupt vector
003B             56   org 0x003B
003B 0213A3      57            ljmp Start_stop_ISR
003E             58   
003E             59   ; These ’EQU’ must match the wiring between the microcontroller and ADC
003E             60   SOUND_OUT   EQU P3.7
003E             61   CE_ADC      EQU P2.4
003E             62   MY_MOSI     EQU P2.5
003E             63   MY_MISO     EQU P2.6
003E             64   MY_SCLK     EQU P2.7
003E             65   UP_BUTTON        EQU P0.0
003E             66   DOWN_BUTTON EQU P0.1
003E             67   SELECT_BUTTON EQU P0.2
003E             68   NEXT_BUTTON EQU P0.3
003E             69   BACK_BUTTON EQU p0.4
003E             70   MASTER_START EQU p1.0
003E             71   MASTER_STOP EQU p1.1
003E             72   
003E             73   
0030             74   DSEG at 0x30
0030             75   Count1ms:      ds 2 ; Used to determine when half second has passed
0032             76   Result: ds 2
0034             77   Result_Thermo: ds 2
0036             78   seconds: ds 1
0037             79   x:      ds 4
003B             80   y:      ds 4
003F             81   bcd:    ds 5
0044             82   soaktime: ds 2
0046             83   soaktemp: ds 2
0048             84   reflowtime: ds 2
004A             85   reflowtemp: ds 2
004C             86   soaktemp3digit: ds 2
004E             87   reflow_state: ds 1
004F             88   pwm: ds 1
0050             89   temp: ds 1
0051             90   sec: ds 1                ; seconds variable for reflow FSM (to be incremented every second)
0052             91   cooled_temp: ds 1
0053             92   
0053             93   
0053             94   
0000             95   BSEG
0000             96   mf: dbit 1
0001             97   one_second_flag: dbit 1 
0002             98   
                546   $LIST
                100   $LIST
02AE            102   
02AE            103   CSEG
02AE            104   LCD_RS equ P1.2
02AE            105   LCD_RW equ P1.3
02AE            106   LCD_E  equ P3.2
02AE            107   LCD_D4 equ P3.3
02AE            108   LCD_D5 equ P3.4
02AE            109   LCD_D6 equ P3.6
02AE            110   LCD_D7 equ P3.7
02AE            111   
02AE 50726568   112   Ramp_to_Soak:            db         'Preheat', 0
     65617400
02B6 536F616B   113   Soak:                            db                 'Soak   ', 0
     20202000
02BE 52616D70   114   Ramp_to_Peak:            db                 'Ramp2pk', 0
     32706B00
02C6 5265666C   115   Reflow:                          db                 'Reflow ', 0
     6F772000
02CE 436F6F6C   116   Cooling:                         db                 'Cooling', 0
     696E6700
02D6 7300       117   secondsss:                       db                 's'          , 0
02D8            118   ;                     1234567890123456    <- This helps determine the location of the counter
02D8 57656C63   119   Welcome:                   db 'Welcome!        ', 0
     6F6D6521
     20202020
     20202020
     00
02E9 53656C65   120   Choose_option:     db 'Select option   ', 0
     6374206F
     7074696F
     6E202020
     00
02FA 50726573   121   Preset_menu_msg:  db 'Preset Profile  ', 0
     65742050
     726F6669
     6C652020
     00
030B 43757374   122   Custom_menu_msg:  db 'Custom Profile  ', 0
     6F6D2050
     726F6669
     6C652020
     00
031C 536F616B   123   Soak_temp:                 db 'Soak Temp       ', 0
     2054656D
     70202020
     20202020
     00
032D 536F616B   124   Soak_time:                 db 'Soak Time       ', 0
     2054696D
     65202020
     20202020
     00
033E 5265666C   125   Reflow_time:       db 'Reflow Time     ', 0
     6F772054
     696D6520
     20202020
     00
034F 5265666C   126   Reflow_temp:       db 'Reflow Temp     ', 0
     6F772054
     656D7020
     20202020
     00
0360 53414333   127   Pb_free_solder:    db 'SAC305 solder   ', 0
     30352073
     6F6C6465
     72202020
     00
0371 50622D73   128   Pb_solder:                 db 'Pb-solder paste ', 0
     6F6C6465
     72207061
     73746520
     00
0382 53686868   129   Pizza_msg0:        db 'Shhh! No pizza  ', 0
     21204E6F
     2070697A
     7A612020
     00
0393 616C6C6F   130   Pizza_msg1:        db 'allowed in here.', 0
     77656420
     696E2068
     6572652E
     00
03A4 70726F66   131   Profile_loaded:   db 'profile loaded  ', 0
     696C6520
     6C6F6164
     65642020
     00
03B5 53797374   132   Is_ready:                  db 'System Ready    ', 0
     656D2052
     65616479
     20202020
     00
03C6 50726573   133   Press_start:       db 'Press Start     ', 0
     73205374
     61727420
     20202020
     00
03D7 78782020   134   Set_Value:                 db 'xx              ', 0
     20202020
     20202020
     20202020
     00
03E8 20202020   135   Clear_Row:                 db '                ', 0
     20202020
     20202020
     20202020
     00
03F9 41542050   136   PRESETMENUMSG:     db 'AT PRESET MENU  ', 0
     52455345
     54204D45
     4E552020
     00
040A 41542043   137   CUSTOMMENUMSG:     db 'AT CUSTOM MENU  ', 0
     5553544F
     4D204D45
     4E552020
     00
041B 41726520   138   Are_you_sure:      db 'Are you sure?   ', 0
     796F7520
     73757265
     3F202020
     00
042C 4572726F   139   Error_msg1:        db 'Error, profiles ', 0
     722C2070
     726F6669
     6C657320
     00
043D 6E6F7420   140   Error_msg2:       db 'not loaded      ', 0
     6C6F6164
     65642020
     20202020
     00
044E 50726F63   141   Abort_string:      db 'Process aborted ', 0
     65737320
     61626F72
     74656420
     00
045F 57616974   142   Waiting_to_cool:  db 'Wait to cool    ', 0
     20746F20
     636F6F6C
     20202020
     00
0470            143   
0470            144   
                146   	$LIST
051E            148   
                150   $LIST
0CE0            152   
                154   $LIST
107C            156   
                158   $LIST
1300            160   
1300            161   ;----------------------------------------MACRO LOCATION----------------------------------------------
1300            162   
1300            163   
1300            164   
1300            165   
1300            166   ;---------------------------------;
1300            167   ; Routine to initialize the ISR   ;
1300            168   ; for timer 0                     ;
1300            169   ;---------------------------------;
1300            170   Timer0_Init:
1300 E589       171            mov a, TMOD
1302 54F0       172            anl a, #0xf0 ; Clear the bits for timer 0
1304 4401       173            orl a, #0x01 ; Configure timer 0 as 16-timer
1306 F589       174            mov TMOD, a
1308 758CEA     175            mov TH0, #high(TIMER0_RELOAD)
130B 758AE8     176            mov TL0, #low(TIMER0_RELOAD)
130E            177            ; Set autoreload value
130E 75F4EA     178            mov TIMER0_RELOAD_H, #high(TIMER0_RELOAD)
1311 75F2E8     179            mov TIMER0_RELOAD_L, #low(TIMER0_RELOAD)
1314            180            ; Enable the timer and interrupts
1314 D2A9       181       setb ET0  ; Enable timer 0 interrupt
1316 D28C       182       setb TR0  ; Start timer 0
1318 22         183            ret
1319            184   
1319            185   ;---------------------------------;
1319            186   ; ISR for timer 0.  Set to execute;
1319            187   ; every 1/4096Hz to generate a    ;
1319            188   ; 2048 Hz square wave at pin P3.7 ;
1319            189   ;---------------------------------;
1319            190   Timer0_ISR:
1319            191            ;clr TF0  ; According to the data sheet this is done for us already.
1319 8000       192            sjmp no_beep
131B            193   beep_on:
131B            194            ;cpl SOUND_OUT ; Connect speaker to P3.7!
131B            195   no_beep:
131B 32         196            reti
131C            197   
131C            198   Timer1_Init:
131C E589       199            mov a, TMOD
131E 540F       200            anl a, #00001111B
1320 4410       201            orl a, #00010000B
1322 F589       202            mov TMOD, a
1324            203            
1324 758D00     204            mov TH1, #0             ;Current count value
1327 758B00     205            mov TL1, #0                  ;Linear Prescaling
132A            206            
132A 75F500     207            mov TIMER1_RELOAD_H, #DUTY_0 ;Duty cycle percentage. Replace this value to change the duty cycle
132D 75F300     208            mov TIMER1_RELOAD_L, #0      ;Frequency scaling/adjust f_out = f_sys/(256 * (256 - TL))
1330            209            
1330 E591       210            mov a, TCONB ;load TCONB for PWM settings
1332 5400       211            anl a, #00000000B
1334 4480       212            orl a, #10000000B
1336 F591       213            mov TCONB, a
1338            214            
1338 D28E       215            setb TR1
133A 32         216            reti
133B            217   
133B            218   ;---------------------------------;
133B            219   ; Routine to initialize the ISR   ;
133B            220   ; for timer 2                     ;
133B            221   ;---------------------------------;
133B            222   Timer2_Init:
133B 75C800     223            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
133E 75CDA9     224            mov TH2, #high(TIMER2_RELOAD)
1341 75CC9A     225            mov TL2, #low(TIMER2_RELOAD)
1344            226            ; Set the reload value
1344 75CBA9     227            mov RCAP2H, #high(TIMER2_RELOAD)
1347 75CA9A     228            mov RCAP2L, #low(TIMER2_RELOAD)
134A            229            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
134A E4         230            clr a
134B F530       231            mov Count1ms+0, a
134D F531       232            mov Count1ms+1, a
134F            233            ; Enable the timer and interrupts
134F D2AD       234       setb ET2  ; Enable timer 2 interrupt
1351 D2CA       235       setb TR2  ; Enable timer 2
1353 22         236            ret
1354            237   
1354            238   ;---------------------------------;
1354            239   ; ISR for timer 2                 ;
1354            240   ;---------------------------------;
1354            241   Timer2_ISR:
1354 C2CF       242            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
1356 B2B6       243            cpl P3.6 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
1358            244            
1358            245            ; The two registers used in the ISR must be saved in the stack
1358 C0E0       246            push acc
135A C0D0       247            push psw
135C            248            
135C            249            ; Increment the 16-bit one mili second counter
135C            250                            ;       inc Count1ms+0    ; Increment the low 8-bits first
135C            251                                    ;mov a, Count1ms+0
135C            252                            ;       cjne a, #10h, Timer2_ISR_done
135C            253                            ;       mov Count1ms+0, #0h
135C 0530       254            inc Count1ms+0    ; Increment the low 8-bits first
135E E530       255            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
1360 7015       256            jnz Inc_Done
1362 0531       257            inc Count1ms+1
1364            258            
1364 C000       259            push ar0
1366 A83F       259            mov r0, bcd
1368 120F6E     259            lcall ?Send_BCD
136B 740D       259            mov a, #'\r'
136D 120CF8     259       lcall putchar
1370 740A       259       mov a, #'\n'
1372 120CF8     259       lcall putchar
1375 D000       259            pop ar0
1377            260            Inc_Done:
1377            261            ; Check if a second has passed
1377            262   
1377 E530       263            mov a, Count1ms+0
1379 B4C815     264            cjne a, #low(MILLISECOND_WAIT), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
137C E531       265            mov a, Count1ms+1
137E B40010     266            cjne a, #high(MILLISECOND_WAIT), Timer2_ISR_done
1381            267            
1381            268            ; 1000 milliseconds have passed.  Set a flag so the main program knows
1381 D201       269            setb one_second_flag ; Let the main program know one second had passed
1383 B28C       270            cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
1385            271            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
1385 E4         272            clr a
1386 F530       273            mov Count1ms+0, a
1388 F531       274            mov Count1ms+1, a
138A            275            ; Increment the BCD counter
138A E536       276            mov a, seconds
138C 2401       277            add a, #0x01
138E D4         278            da a ; Decimal adjust instruction.  Check datasheet for more details!
138F F536       279            mov seconds, a
1391            280            
1391            281            
1391            282   Timer2_ISR_done:
1391 D0D0       283            pop psw
1393 D0E0       284            pop acc
1395 32         285            reti
1396            286   
1396            287   
1396            288   ;-------------------------------------
1396            289   ; To start or ABORT the reflow cycle
1396            290   ;------------------------------------
1396            291   Start_stop_Init: 
1396            292            
1396 759F03     293            mov KBMOD, #3   ; enable edge triggered for P0.0 and P0.1
1399 759C00     294            mov KBLS, #0    ; watch for negative edge (0->1)
139C 759D03     295            mov KBE, #3     ; enable interrupt for p0.0 and p0.1
139F 759E03     296            mov KBF, #3; interrupt active, must clear at start of ISR and setb at end. 
13A2            297   
13A2 22         298            ret
13A3            299   
13A3            300   Start_stop_ISR: 
13A3 759E00     301   mov KBF, #0              ; masks interrupt 
13A6 C0E0       302   push acc
13A8            303   
13A8 209112     304   jb MASTER_STOP, endhere_234
13AB C002       304            push AR2
13AD 7A32       304            mov R2, #50
13AF 12047B     304            lcall ?Wait_Milli_Seconds
13B2 D002       304            pop AR2
13B4 209106     304   jb MASTER_STOP, endhere_234
13B7 3091FD     304   jnb MASTER_STOP, $
13BA 0213DC     304   ljmp STOP_ROUTINE
13BD            304   
13BD            304   endhere_234:                             ; if master stop has been pressed, change to state 5
13BD            305   
13BD 209012     306   jb MASTER_START, endhere_236
13C0 C002       306            push AR2
13C2 7A32       306            mov R2, #50
13C4 12047B     306            lcall ?Wait_Milli_Seconds
13C7 D002       306            pop AR2
13C9 209006     306   jb MASTER_START, endhere_236
13CC 3090FD     306   jnb MASTER_START, $
13CF 0213D2     306   ljmp START_ROUTINE
13D2            306   
13D2            306   endhere_236:                      ; if master start has been pressed, change to state 1
13D2            307   
13D2            308   START_ROUTINE: 
13D2            309            ; We should add some code here that 
13D2            310   
13D2            311   
13D2 E54E       312            mov a, reflow_state
13D4 B40042     313            cjne a, #0, End_master_ISR
13D7 754E01     314            mov reflow_state, #1
13DA 803D       315            sjmp End_master_ISR
13DC            316   
13DC            317   
13DC            318   
13DC            319   STOP_ROUTINE: 
13DC 754E05     320            mov reflow_state, #5    
13DF            321            ; any other things we want to do, ie, statements we want to make 
13DF            322   
13DF C0E0       323            push acc
13E1 7401       323            mov a, #1
13E3 14         323            dec a
13E4 120503     323            lcall ?Set_Cursor_1 ; Select column and row
13E7 D0E0       323            pop acc
13E9 C083       324            push dph
13EB C082       324            push dpl
13ED C0E0       324            push acc
13EF 90044E     324            mov dptr, #Abort_string
13F2 1204F6     324            lcall ?Send_Constant_String
13F5 D0E0       324            pop acc
13F7 D082       324            pop dpl
13F9 D083       324            pop dph
13FB            325   
13FB C0E0       326            push acc
13FD 7401       326            mov a, #1
13FF 14         326            dec a
1400 120501     326            lcall ?Set_Cursor_2 ; Select column and row
1403 D0E0       326            pop acc
1405 C083       327            push dph
1407 C082       327            push dpl
1409 C0E0       327            push acc
140B 90045F     327            mov dptr, #Waiting_to_cool
140E 1204F6     327            lcall ?Send_Constant_String
1411 D0E0       327            pop acc
1413 D082       327            pop dpl
1415 D083       327            pop dph
1417            328   
1417 8000       329   sjmp End_master_ISR
1419            330   
1419            331   
1419            332   End_master_ISR: 
1419 759E03     333            mov KBF, #3             ; enables interrupt
141C D0E0       334            pop acc
141E            335   
141E 32         336            reti
141F            337   
141F            338   
141F            339   MainProgram:
141F 75817F     340       mov SP, #7FH ; Set the stack pointer to the begining of idata
1422 121396     341       lcall Start_stop_Init
1425 121300     342       lcall Timer0_Init
1428 12133B     343       lcall Timer2_Init
142B            344       ; In case you decide to use the pins of P0, configure the port in bidirectional mode:
142B 75E600     345       mov P0M0, #0
142E 75E700     346       mov P0M1, #0
1431            347   
1431 D2AF       348       setb EA   ; Enable Global interrupts
1433            349            
1433 120D0B     350            lcall INIT_SPI
1436 1204CA     351       lcall LCD_4BIT
1439            352            
1439            353            
1439            354   forever:
1439 121061     355            lcall GET_TEMP_DATA      ;This is the lab3 derivative loop that grabs the data from the thermocouple, 
143C 02107C     356            ljmp reflow_state_machine       ; go do some stuff in the state_machine
143F            357   
143F            358   
143F 021439     359       ljmp forever ; This is equivalent to 'forever: sjmp forever'
1442            360   
1442            361       
1442            362   EN
