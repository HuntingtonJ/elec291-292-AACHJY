                 -1   $MODLP51
0000              1   ;--------------------------------------------------------
0000              2   ; Special Function Registers
0000              3   ;--------------------------------------------------------
0000              4   ACC            DATA 0xe0
0000              5   B              DATA 0xf0
0000              6   PSW            DATA 0xd0
0000              7   SP             DATA 0x81
0000              8   SPX            DATA 0xef
0000              9   DPL            DATA 0x82
0000             10   DPH            DATA 0x83
0000             11   DPLB           DATA 0xd4
0000             12   DPHB           DATA 0xd5
0000             13   PAGE           DATA 0xf6
0000             14   AX             DATA 0xe1
0000             15   BX             DATA 0xf7
0000             16   DSPR           DATA 0xe2
0000             17   FIRD           DATA 0xe3
0000             18   MACL           DATA 0xe4
0000             19   MACH           DATA 0xe5
0000             20   PCON           DATA 0x87
0000             21   AUXR           DATA 0x8e
0000             22   AUXR1          DATA 0xa2
0000             23   DPCF           DATA 0xa1
0000             24   CKRL           DATA 0x97
0000             25   CKCKON0        DATA 0x8f
0000             26   CKCKON1        DATA 0xaf
0000             27   CKSEL          DATA 0x85
0000             28   CLKREG         DATA 0xae
0000             29   OSCCON         DATA 0x85
0000             30   IE             DATA 0xa8
0000             31   IEN0           DATA 0xa8
0000             32   IEN1           DATA 0xb1
0000             33   IPH0           DATA 0xb7
0000             34   IP             DATA 0xb8
0000             35   IPL0           DATA 0xb8
0000             36   IPH1           DATA 0xb3
0000             37   IPL1           DATA 0xb2
0000             38   P0             DATA 0x80
0000             39   P1             DATA 0x90
0000             40   P2             DATA 0xa0
0000             41   P3             DATA 0xb0
0000             42   P4             DATA 0xc0
0000             43   P0M0           DATA 0xe6
0000             44   P0M1           DATA 0xe7
0000             45   P1M0           DATA 0xd6
0000             46   P1M1           DATA 0xd7
0000             47   P2M0           DATA 0xce
0000             48   P2M1           DATA 0xcf
0000             49   P3M0           DATA 0xc6
0000             50   P3M1           DATA 0xc7
0000             51   P4M0           DATA 0xbe
0000             52   P4M1           DATA 0xbf
0000             53   SCON           DATA 0x98
0000             54   SBUF           DATA 0x99
0000             55   SADEN          DATA 0xb9
0000             56   SADDR          DATA 0xa9
0000             57   BDRCON         DATA 0x9b
0000             58   BRL            DATA 0x9a
0000             59   TCON           DATA 0x88
0000             60   TMOD           DATA 0x89
0000             61   TCONB          DATA 0x91
0000             62   TL0            DATA 0x8a
0000             63   TH0            DATA 0x8c
0000             64   TL1            DATA 0x8b
0000             65   TH1            DATA 0x8d
0000             66   RL0            DATA 0xf2
0000             67   RL1            DATA 0xf3
0000             68   RH0            DATA 0xf4
0000             69   RH1            DATA 0xf5
0000             70   WDTRST         DATA 0xa6
0000             71   WDTPRG         DATA 0xa7
0000             72   T2CON          DATA 0xc8
0000             73   T2MOD          DATA 0xc9
0000             74   RCAP2H         DATA 0xcb
0000             75   RCAP2L         DATA 0xca
0000             76   TH2            DATA 0xcd
0000             77   TL2            DATA 0xcc
0000             78   SPCON          DATA 0xc3
0000             79   SPSTA          DATA 0xc4
0000             80   SPDAT          DATA 0xc5
0000             81   SSCON          DATA 0x93
0000             82   SSCS           DATA 0x94
0000             83   SSDAT          DATA 0x95
0000             84   SSADR          DATA 0x96
0000             85   KBLS           DATA 0x9c
0000             86   KBE            DATA 0x9d
0000             87   KBF            DATA 0x9e
0000             88   KBMOD          DATA 0x9f
0000             89   BMSEL          DATA 0x92
0000             90   FCON           DATA 0xd2
0000             91   EECON          DATA 0xd2
0000             92   ACSRA          DATA 0xa3
0000             93   ACSRB          DATA 0xab
0000             94   AREF           DATA 0xbd
0000             95   DADC           DATA 0xa4
0000             96   DADI           DATA 0xa5
0000             97   DADL           DATA 0xac
0000             98   DADH           DATA 0xad
0000             99   CCON           DATA 0xd8
0000            100   CMOD           DATA 0xd9
0000            101   CL             DATA 0xe9
0000            102   CH             DATA 0xf9
0000            103   CCAPM0         DATA 0xda
0000            104   CCAPM1         DATA 0xdb
0000            105   CCAPM2         DATA 0xdc
0000            106   CCAPM3         DATA 0xdd
0000            107   CCAPM4         DATA 0xde
0000            108   CCAP0H         DATA 0xfa
0000            109   CCAP1H         DATA 0xfb
0000            110   CCAP2H         DATA 0xfc
0000            111   CCAP3H         DATA 0xfd
0000            112   CCAP4H         DATA 0xfe
0000            113   CCAP0L         DATA 0xea
0000            114   CCAP1L         DATA 0xeb
0000            115   CCAP2L         DATA 0xec
0000            116   CCAP3L         DATA 0xed
0000            117   CCAP4L         DATA 0xee
0000            118   ;--------------------------------------------------------
0000            119   ; special function bits
0000            120   ;--------------------------------------------------------
0000            121   P              BIT 0xd0
0000            122   F1             BIT 0xd1
0000            123   OV             BIT 0xd2
0000            124   RS0            BIT 0xd3
0000            125   RS1            BIT 0xd4
0000            126   F0             BIT 0xd5
0000            127   AC             BIT 0xd6
0000            128   CY             BIT 0xd7
0000            129   EX0            BIT 0xa8
0000            130   ET0            BIT 0xa9
0000            131   EX1            BIT 0xaa
0000            132   ET1            BIT 0xab
0000            133   ES             BIT 0xac
0000            134   ET2            BIT 0xad
0000            135   EC             BIT 0xae
0000            136   EA             BIT 0xaf
0000            137   PX0            BIT 0xb8
0000            138   PT0            BIT 0xb9
0000            139   PX1            BIT 0xba
0000            140   PT1            BIT 0xbb
0000            141   PS             BIT 0xbc
0000            142   PT2            BIT 0xbd
0000            143   IP0D           BIT 0xbf
0000            144   PPCL           BIT 0xbe
0000            145   PT2L           BIT 0xbd
0000            146   PLS            BIT 0xbc
0000            147   PT1L           BIT 0xbb
0000            148   PX1L           BIT 0xba
0000            149   PT0L           BIT 0xb9
0000            150   PX0L           BIT 0xb8
0000            151   RXD            BIT 0xb0
0000            152   TXD            BIT 0xb1
0000            153   INT0           BIT 0xb2
0000            154   INT1           BIT 0xb3
0000            155   T0             BIT 0xb4
0000            156   T1             BIT 0xb5
0000            157   WR             BIT 0xb6
0000            158   RD             BIT 0xb7
0000            159   RI             BIT 0x98
0000            160   TI             BIT 0x99
0000            161   RB8            BIT 0x9a
0000            162   TB8            BIT 0x9b
0000            163   REN            BIT 0x9c
0000            164   SM2            BIT 0x9d
0000            165   SM1            BIT 0x9e
0000            166   SM0            BIT 0x9f
0000            167   IT0            BIT 0x88
0000            168   IE0            BIT 0x89
0000            169   IT1            BIT 0x8a
0000            170   IE1            BIT 0x8b
0000            171   TR0            BIT 0x8c
0000            172   TF0            BIT 0x8d
0000            173   TR1            BIT 0x8e
0000            174   TF1            BIT 0x8f
0000            175   CP_RL2         BIT 0xc8
0000            176   C_T2           BIT 0xc9
0000            177   TR2            BIT 0xca
0000            178   EXEN2          BIT 0xcb
0000            179   TCLK           BIT 0xcc
0000            180   RCLK           BIT 0xcd
0000            181   EXF2           BIT 0xce
0000            182   TF2            BIT 0xcf
0000            183   CF             BIT 0xdf
0000            184   CR             BIT 0xde
0000            185   CCF4           BIT 0xdc
0000            186   CCF3           BIT 0xdb
0000            187   CCF2           BIT 0xda
0000            188   CCF1           BIT 0xd9
0000            189   CCF0           BIT 0xd8
0000              2   
0000              3   ; There is a couple of typos in MODLP51 in the definition of the timer 0/1 reload
0000              4   ; special function registers (SFRs), so:
0000              5   
0000              6   TIMER0_RELOAD_L DATA 0xf2
0000              7   TIMER1_RELOAD_L DATA 0xf3
0000              8   TIMER0_RELOAD_H DATA 0xf4
0000              9   TIMER1_RELOAD_H DATA 0xf5
0000             10   
0000             11   CLK              EQU 22118400 ; Microcontroller system crystal frequency in Hz
0000             12   TIMER0_RATE      EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             13   TIMER0_RELOAD    EQU ((65536-(CLK/TIMER0_RATE)))
0000             14   TIMER2_RATE      EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             15   TIMER2_RELOAD    EQU ((65536-(CLK/TIMER2_RATE)))
0000             16   MAX_TEMP              EQU 250
0000             17   TIMEOUT_TIME     EQU 60
0000             18   BAUD             EQU 115200
0000             19   BRG_VAL          EQU (0x100-(CLK/(16*BAUD)))
0000             20   MILLISECOND_WAIT EQU 200                 ; how many milliseconds between temp samples
0000             21   
0000             22   DUTY_0           EQU 0
0000             23   DUTY_20          EQU 51   ;256 * 0.2
0000             24   DUTY_50          EQU 128  ;256 * 0.5
0000             25   DUTY_80          EQU 204  ;256 * 0.8
0000             26   DUTY_100         EQU 255
0000             27   
0000             28   org 0x0000
0000 021D5C      29      ljmp MainProgram
0003             30   
0003             31   ; External interrupt 0 vector (not used in this code)
0003             32   org 0x0003
0003 32          33            reti
0004             34   
0004             35   ; Timer/Counter 0 overflow interrupt vector
000B             36   org 0x000B
000B 021AFC      37            ljmp Timer0_ISR
000E             38   
000E             39   ; External interrupt 1 vector (not used in this code)
0013             40   org 0x0013
0013 32          41            reti
0014             42   
0014             43   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             44   org 0x001B
001B 32          45            reti
001C             46   
001C             47   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             48   org 0x0023 
0023 32          49            reti
0024             50            
0024             51   ; Timer/Counter 2 overflow interrupt vector
002B             52   org 0x002B
002B 021B37      53            ljmp Timer2_ISR
002E             54   
002E             55   ;Edge triggered keyboard interrupt vector
003B             56   org 0x003B
003B 021B71      57            ljmp Start_stop_ISR
003E             58   
003E             59   ; These ’EQU’ must match the wiring between the microcontroller and ADC
003E             60   SOUND_OUT     EQU P3.7
003E             61   CE_ADC        EQU P2.0
003E             62   MY_MOSI       EQU P2.1
003E             63   MY_MISO       EQU P2.2
003E             64   MY_SCLK       EQU P2.3
003E             65   
003E             66   UP_BUTTON          EQU P2.6 
003E             67   DOWN_BUTTON   EQU P2.5
003E             68   SELECT_BUTTON equ P2.4
003E             69   BACK_BUTTON   EQU #11110000B
003E             70   MASTER_START  EQU #10100000B 
003E             71   MASTER_STOP   EQU #10110000B
003E             72   
003E             73   ; For the 7-segment display
003E             74   SEGA equ P0.3
003E             75   SEGB equ P0.5
003E             76   SEGC equ P0.7
003E             77   SEGD equ P4.4
003E             78   SEGE equ P4.5
003E             79   SEGF equ P0.4
003E             80   SEGG equ P0.6
003E             81   SEGP equ P2.7
003E             82   CA1  equ P0.1
003E             83   CA2  equ P0.0
003E             84   CA3  equ P0.2
003E             85   
003E             86   ; For the LCD
003E             87   LCD_RS equ P1.1
003E             88   LCD_RW equ P1.2
003E             89   LCD_E  equ P1.3
003E             90   LCD_D4 equ P3.2
003E             91   LCD_D5 equ P3.3
003E             92   LCD_D6 equ P3.4
003E             93   LCD_D7 equ P3.6
003E             94   
003E             95   ; pins to be used on the MPC 3008
003E             96   adc_zero                 equ #10000000B               ; LM355 temp sensor 
003E             97   adc_one                  equ #10010000B               ; thermocouple
003E             98   adc_two                  equ #10100000B               ;  start
003E             99   adc_three                equ #10110000B               ;  stop
003E            100   adc_four                 equ #11000000B               ;  
003E            101   adc_five                 equ #11010000B               ;  
003E            102   adc_six                  equ #11100000B               ; 
003E            103   adc_seven                equ #11110000B                           ; back
003E            104   
0030            105   DSEG at 0x30
0030            106   Count1ms:       ds 2 ; Used to determine when half second has passed
0032            107   Result:         ds 2 ; Temp from lm355
0034            108   Result_Thermo:  ds 2 ; Temp from Thermocoupler
0036            109   ADC_Result:     ds 2 ; Temp from ADC channel 2
0038            110   
0038            111   BCD_temp:       ds 2 ; Used to diplay temp on the 7-segment display
003A            112   seconds:        ds 1
003B            113   x:              ds 4 ; Used in math32
003F            114   y:              ds 4 ; Used in math32
0043            115   bcd:            ds 5
0048            116   soaktime:       ds 2
004A            117   soaktemp:       ds 2
004C            118   reflowtime:     ds 2
004E            119   reflowtemp:     ds 2
0050            120   soaktemp3digit: ds 2
0052            121   reflow_state:   ds 1
0053            122   pwm:            ds 1
0054            123   temp:           ds 1
0055            124   sec:            ds 1 ; seconds variable for reflow FSM (to be incremented every second)
0056            125   cooled_temp:    ds 1
0057            126   ; 7-segment vars
0057            127   disp1:          ds 1 ; Least significant digit
0058            128   disp2:          ds 1
0059            129   disp3:          ds 1 ; Most significant digit
005A            130   seg_state:      ds 1 ; state of 7_seg fsm
005B            131   display_scratch: ds 1
005C            132   
005C            133   
005C            134   
0000            135   BSEG
0000            136   mf: dbit 1
0001            137   one_second_flag: dbit 1 
0002            138   shortbeepflag: dbit 1
0003            139   longbeepflag: dbit 1
0004            140   sixbeepflag: dbit 1
0005            141   
0005            142   
003E            143   CSEG
003E            144                    ;                        1234567890123456
003E 20202020   145   Ramp_to_Soak:    db       '         Preheat', 0
     20202020
     20507265
     68656174
     00
004F 20202020   146   Soak:                    db   '         Soak   ', 0
     20202020
     20536F61
     6B202020
     00
0060 20202020   147   Ramp_to_Peak:    db       '         Ramp2pk', 0
     20202020
     2052616D
     7032706B
     00
0071 20202020   148   Reflow:                  db       '         Reflow ', 0
     20202020
     20526566
     6C6F7720
     00
0082 20202020   149   Cooling:                 db       '         Cooling', 0
     20202020
     20436F6F
     6C696E67
     00
0093 7300       150   secondsss:               db   's'                , 0
0095            151   ;                     1234567890123456    <- This helps determine the location of the counter
0095 57656C63   152   Welcome:                   db 'Welcome!        ', 0
     6F6D6521
     20202020
     20202020
     00
00A6 53656C65   153   Choose_option:     db 'Select option   ', 0
     6374206F
     7074696F
     6E202020
     00
00B7 50726573   154   Preset_menu_msg:  db 'Preset Profile  ', 0
     65742050
     726F6669
     6C652020
     00
00C8 43757374   155   Custom_menu_msg:  db 'Custom Profile  ', 0
     6F6D2050
     726F6669
     6C652020
     00
00D9 536F616B   156   Soak_temp:                 db 'Soak Temp       ', 0
     2054656D
     70202020
     20202020
     00
00EA 536F616B   157   Soak_time:                 db 'Soak Time       ', 0
     2054696D
     65202020
     20202020
     00
00FB 5265666C   158   Reflow_time:       db 'Reflow Time     ', 0
     6F772054
     696D6520
     20202020
     00
010C 5265666C   159   Reflow_temp:       db 'Reflow Temp     ', 0
     6F772054
     656D7020
     20202020
     00
011D 53414333   160   Pb_free_solder:    db 'SAC305 solder   ', 0
     30352073
     6F6C6465
     72202020
     00
012E 50622D73   161   Pb_solder:                 db 'Pb-solder paste ', 0
     6F6C6465
     72207061
     73746520
     00
013F 53686868   162   Pizza_msg0:        db 'Shhh! No pizza  ', 0
     21204E6F
     2070697A
     7A612020
     00
0150 616C6C6F   163   Pizza_msg1:        db 'allowed in here.', 0
     77656420
     696E2068
     6572652E
     00
0161 70726F66   164   Profile_loaded:   db 'profile loaded  ', 0
     696C6520
     6C6F6164
     65642020
     00
0172 53797374   165   Is_ready:                  db 'System Ready    ', 0
     656D2052
     65616479
     20202020
     00
0183 50726573   166   Press_start:       db 'Press Start     ', 0
     73205374
     61727420
     20202020
     00
0194 78782020   167   Set_Value:                 db 'xx              ', 0
     20202020
     20202020
     20202020
     00
01A5 20202020   168   Clear_Row:                 db '                ', 0
     20202020
     20202020
     20202020
     00
01B6 41542050   169   PRESETMENUMSG:     db 'AT PRESET MENU  ', 0
     52455345
     54204D45
     4E552020
     00
01C7 41542043   170   CUSTOMMENUMSG:     db 'AT CUSTOM MENU  ', 0
     5553544F
     4D204D45
     4E552020
     00
01D8 41726520   171   Are_you_sure:      db 'Are you sure?   ', 0
     796F7520
     73757265
     3F202020
     00
01E9 4572726F   172   Error_msg1:        db 'Error, profiles ', 0
     722C2070
     726F6669
     6C657320
     00
01FA 6E6F7420   173   Error_msg2:       db 'not loaded      ', 0
     6C6F6164
     65642020
     20202020
     00
020B 50726F63   174   Abort_string:      db 'Process aborted ', 0
     65737320
     61626F72
     74656420
     00
021C 57616974   175   Waiting_to_cool:  db 'Wait to cool    ', 0
     20746F20
     636F6F6C
     20202020
     00
022D 49535220   176   ISR_is_running:   db 'ISR is running  ', 0
     69732072
     756E6E69
     6E672020
     00
023E 5265666C   177   abort_msg:                 db 'Reflow Aborted! ', 0
     6F772041
     626F7274
     65642120
     00
024F            178   
024F 53746174   179   State_0: db 'State 0', 0
     65203000
0257 53746174   180   State_1: db 'State 1', 0
     65203100
025F            181   
025F C0F9A4B0   182   HEX_7SEG: DB 0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90
     999282F8
     8090
0269            183   
0269            184   
                186   	$LIST
0317            188   
                546   $LIST
                190   $LIST
0587            192   
                194   $LIST
13A8            196   
                198   $LIST
1754            200   
                202   $LIST
1A61            204   
                206   $LIST
1AE3            208   
1AE3            209   ;----------------------------------------MACRO LOCATION----------------------------------------------
1AE3            210   
1AE3            211   
1AE3            212   
1AE3            213   
1AE3            214   ;---------------------------------;
1AE3            215   ; Routine to initialize the ISR   ;
1AE3            216   ; for timer 0                     ;
1AE3            217   ;---------------------------------;
1AE3            218   Timer0_Init:
1AE3 E589       219            mov a, TMOD
1AE5 54F0       220            anl a, #0xf0 ; Clear the bits for timer 0
1AE7 4401       221            orl a, #0x01 ; Configure timer 0 as 16-timer
1AE9 F589       222            mov TMOD, a
1AEB 758CEA     223            mov TH0, #high(TIMER0_RELOAD)
1AEE 758AE8     224            mov TL0, #low(TIMER0_RELOAD)
1AF1            225            ; Set autoreload value
1AF1 75F4EA     226            mov TIMER0_RELOAD_H, #high(TIMER0_RELOAD)
1AF4 75F2E8     227            mov TIMER0_RELOAD_L, #low(TIMER0_RELOAD)
1AF7            228            ; Enable the timer and interrupts
1AF7 D2A9       229       setb ET0  ; Enable timer 0 interrupt
1AF9 D28C       230       setb TR0  ; Start timer 0
1AFB 22         231            ret
1AFC            232   
1AFC            233   ;---------------------------------;
1AFC            234   ; ISR for timer 0.  Set to execute;
1AFC            235   ; every 1/4096Hz to generate a    ;
1AFC            236   ; 2048 Hz square wave at pin P3.7 ;
1AFC            237   ;---------------------------------;
1AFC            238   Timer0_ISR:
1AFC            239            ;clr TF0  ; According to the data sheet this is done for us already.
1AFC 8000       240            sjmp no_beep
1AFE            241   beep_on:
1AFE            242            ;cpl SOUND_OUT ; Connect speaker to P3.7!
1AFE            243   no_beep:
1AFE 32         244            reti
1AFF            245            
1AFF            246   ;---------------------------------;
1AFF            247   ; Routine to initialize the ISR   ;
1AFF            248   ; for timer 1 in PWM mode         ;
1AFF            249   ;---------------------------------;
1AFF            250   
1AFF            251   Timer1_Init:
1AFF E589       252            mov a, TMOD
1B01 540F       253            anl a, #00001111B       ;Clears timer 1 settings but keeps timer 0 settings
1B03 4410       254            orl a, #00010000B       ;Gate = 0, TC1 = 0, mode = 01 (mode 1)
1B05 F589       255            mov TMOD, a
1B07            256            
1B07 E591       257            mov a, TCONB            ;load TCONB for PWM settings
1B09 5400       258            anl a, #00000000B       ;clear TCONB
1B0B 4480       259            orl a, #10000000B       ;Set PWM1 = 1
1B0D F591       260            mov TCONB, a
1B0F            261            
1B0F 758D00     262            mov TH1, #0             ;Current count value
1B12 758B00     263            mov TL1, #0             ;Linear Prescaling
1B15            264            
1B15 75F500     265            mov TIMER1_RELOAD_H, #DUTY_0 ;Duty cycle percentage. Replace this value to change the duty cycle
1B18 75F300     266            mov TIMER1_RELOAD_L, #0      ;Frequency scaling/adjust f_out = f_sys/(256 * (256 - TL))
1B1B            267            
1B1B D28E       268            setb TR1
1B1D 32         269            reti
1B1E            270   
1B1E            271   ;---------------------------------;
1B1E            272   ; Routine to initialize the ISR   ;
1B1E            273   ; for timer 2                     ;
1B1E            274   ;---------------------------------;
1B1E            275   Timer2_Init:
1B1E 75C800     276            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
1B21 75CDA9     277            mov TH2, #high(TIMER2_RELOAD)
1B24 75CC9A     278            mov TL2, #low(TIMER2_RELOAD)
1B27            279            ; Set the reload value
1B27 75CBA9     280            mov RCAP2H, #high(TIMER2_RELOAD)
1B2A 75CA9A     281            mov RCAP2L, #low(TIMER2_RELOAD)
1B2D            282            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
1B2D E4         283            clr a
1B2E F530       284            mov Count1ms+0, a
1B30 F531       285            mov Count1ms+1, a
1B32            286            ; Enable the timer and interrupts
1B32 D2AD       287       setb ET2  ; Enable timer 2 interrupt
1B34 D2CA       288       setb TR2  ; Enable timer 2
1B36 22         289            ret
1B37            290   
1B37            291   ;---------------------------------;
1B37            292   ; ISR for timer 2                 ;
1B37            293   ;---------------------------------;
1B37            294   Timer2_ISR:
1B37 C2CF       295            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
1B39            296   
1B39            297            ; The two registers used in the ISR must be saved in the stack
1B39 C0E0       298            push acc
1B3B C0D0       299            push psw
1B3D 121A82     300            lcall seg_state_machine
1B40            301            ; Increment the 16-bit one mili second counter
1B40            302                            ;       inc Count1ms+0    ; Increment the low 8-bits first
1B40            303                                    ;mov a, Count1ms+0
1B40            304                            ;       cjne a, #10h, Timer2_ISR_done
1B40            305                            ;       mov Count1ms+0, #0h
1B40 0530       306            inc Count1ms+0    ; Increment the low 8-bits first
1B42 E530       307            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
1B44 7002       308            jnz Inc_Done
1B46 0531       309            inc Count1ms+1
1B48            310            
1B48            311            ;Send_BCD(bcd)
1B48            312            Inc_Done:
1B48            313            ; Check if a second has passed
1B48            314   
1B48 E530       315            mov a, Count1ms+0
1B4A B4C815     316            cjne a, #low(MILLISECOND_WAIT), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
1B4D E531       317            mov a, Count1ms+1
1B4F B40010     318            cjne a, #high(MILLISECOND_WAIT), Timer2_ISR_done
1B52            319            
1B52            320            ; 1000 milliseconds have passed.  Set a flag so the main program knows
1B52 D201       321            setb one_second_flag ; Let the main program know one second had passed
1B54 B28C       322            cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
1B56            323            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
1B56 E4         324            clr a
1B57 F530       325            mov Count1ms+0, a
1B59 F531       326            mov Count1ms+1, a
1B5B            327            ; Increment the BCD counter
1B5B E53A       328            mov a, seconds
1B5D 2401       329            add a, #0x01
1B5F D4         330            da a ; Decimal adjust instruction.  Check datasheet for more details!
1B60 F53A       331            mov seconds, a
1B62            332            
1B62            333   Timer2_ISR_done:
1B62 D0D0       334            pop psw
1B64 D0E0       335            pop acc
1B66 32         336            reti
1B67            337   
1B67            338   
1B67            339   ;-------------------------------------
1B67            340   ; To start or ABORT the reflow cycle
1B67            341   ;------------------------------------
1B67            342   Start_stop_Init: 
1B67            343            
1B67 759F01     344            mov KBMOD, #0x01        ; enable edge triggered for P0.0 and P0.1
1B6A 759C00     345            mov KBLS, #0x00         ; watch for negative edge (0->1)
1B6D 759D01     346            mov KBE, #0x01  ; enable interrupt for p0.0 and p0.1
1B70            347   ;        mov KBF, #0x01 ; interrupt active, must clear at start of ISR and setb at end. 
1B70            348   
1B70 22         349            ret
1B71            350   
1B71            351   Start_stop_ISR: 
1B71 759E00     352            mov KBF, #0             ; masks interrupt 
1B74 C0E0       353            push acc
1B76            354   
1B76 C2A0       355            clr CE_ADC         ; selects 
1B78 7801       355       mov R0, #00000001B ; Start bit: 1
1B7A 1213EE     355       lcall DO_SPI_G
1B7D            355       
1B7D 78B0       355       mov R0, MASTER_STOP ; Read channel
1B7F 1213EE     355       lcall DO_SPI_G
1B82 E9         355       mov a, R1
1B83 5403       355       anl a, #00000011B
1B85 F537       355       mov ADC_Result+1, a    ; Save high result
1B87            355       
1B87 7855       355       mov R0, #55H
1B89 1213EE     355       lcall DO_SPI_G
1B8C 8936       355       mov ADC_Result+0, R1     ; Save low result
1B8E            355       
1B8E D2A0       355       setb CE_ADC        ; deselects
1B90            355       
1B90            355       ;V_OUT = ADC_voltage*4.096V/1023
1B90 85363B     355       mov x+0, ADC_Result
1B93 85373C     355       mov x+1, ADC_Result+1
1B96 753D00     355       mov x+2, #0
1B99 753E00     355       mov x+3, #0
1B9C            355       
1B9C 753FFB     355            mov y+0, #low (4091 % 0x10000) 
1B9F 75400F     355            mov y+1, #high(4091 % 0x10000) 
1BA2 754100     355            mov y+2, #low (4091 / 0x10000) 
1BA5 754200     355            mov y+3, #high(4091 / 0x10000) 
1BA8 120491     355       lcall mul32 ;multiplies x *= y
1BAB            355       
1BAB 753FFF     355            mov y+0, #low (1023 % 0x10000) 
1BAE 754003     355            mov y+1, #high(1023 % 0x10000) 
1BB1 754100     355            mov y+2, #low (1023 / 0x10000) 
1BB4 754200     355            mov y+3, #high(1023 / 0x10000) 
1BB7 12051E     355       lcall div32 ;divides x /= y
1BBA            355       
1BBA 753FE8     355            mov y+0, #low (1000 % 0x10000) 
1BBD 754003     355            mov y+1, #high(1000 % 0x10000) 
1BC0 754100     355            mov y+2, #low (1000 / 0x10000) 
1BC3 754200     355            mov y+3, #high(1000 / 0x10000) 
1BC6 12051E     355       lcall div32
1BC9            355       
1BC9 853C37     355       mov ADC_Result+1, x+1
1BCC 853B36     355       mov ADC_Result+0, x+0
1BCF            355            ; loads ADC_Result (16 bit) with voltage value of pressed button 
1BCF E536       355            mov a, ADC_Result+0
1BD1 B40002     355            cjne a, #0, wait_release_307
1BD4            355   
1BD4 8061       355            sjmp endhere_307
1BD6            355   wait_release_307:
1BD6 C2A0       355            clr CE_ADC         ; selects 
1BD8 7801       355       mov R0, #00000001B ; Start bit: 1
1BDA 1213EE     355       lcall DO_SPI_G
1BDD            355       
1BDD 78B0       355       mov R0, MASTER_STOP ; Read channel
1BDF 1213EE     355       lcall DO_SPI_G
1BE2 E9         355       mov a, R1
1BE3 5403       355       anl a, #00000011B
1BE5 F537       355       mov ADC_Result+1, a    ; Save high result
1BE7            355       
1BE7 7855       355       mov R0, #55H
1BE9 1213EE     355       lcall DO_SPI_G
1BEC 8936       355       mov ADC_Result+0, R1     ; Save low result
1BEE            355       
1BEE D2A0       355       setb CE_ADC        ; deselects
1BF0            355       
1BF0            355       ;V_OUT = ADC_voltage*4.096V/1023
1BF0 85363B     355       mov x+0, ADC_Result
1BF3 85373C     355       mov x+1, ADC_Result+1
1BF6 753D00     355       mov x+2, #0
1BF9 753E00     355       mov x+3, #0
1BFC            355       
1BFC 753FFB     355            mov y+0, #low (4091 % 0x10000) 
1BFF 75400F     355            mov y+1, #high(4091 % 0x10000) 
1C02 754100     355            mov y+2, #low (4091 / 0x10000) 
1C05 754200     355            mov y+3, #high(4091 / 0x10000) 
1C08 120491     355       lcall mul32 ;multiplies x *= y
1C0B            355       
1C0B 753FFF     355            mov y+0, #low (1023 % 0x10000) 
1C0E 754003     355            mov y+1, #high(1023 % 0x10000) 
1C11 754100     355            mov y+2, #low (1023 / 0x10000) 
1C14 754200     355            mov y+3, #high(1023 / 0x10000) 
1C17 12051E     355       lcall div32 ;divides x /= y
1C1A            355       
1C1A 753FE8     355            mov y+0, #low (1000 % 0x10000) 
1C1D 754003     355            mov y+1, #high(1000 % 0x10000) 
1C20 754100     355            mov y+2, #low (1000 / 0x10000) 
1C23 754200     355            mov y+3, #high(1000 / 0x10000) 
1C26 12051E     355       lcall div32
1C29            355       
1C29 853C37     355       mov ADC_Result+1, x+1
1C2C 853B36     355       mov ADC_Result+0, x+0
1C2F            355            ; loads ADC_Result (16 bit) with voltage value of pressed button 
1C2F E536       355            mov a, ADC_Result+0
1C31 B400A2     355            cjne a, #0,wait_release_307
1C34 021D1C     355            ljmp STOP_ROUTINE
1C37            355            endhere_307:    ; if master stop has been pressed, change to state 5
1C37 C2A0       356            clr CE_ADC         ; selects 
1C39 7801       356       mov R0, #00000001B ; Start bit: 1
1C3B 1213EE     356       lcall DO_SPI_G
1C3E            356       
1C3E 78A0       356       mov R0, MASTER_START ; Read channel
1C40 1213EE     356       lcall DO_SPI_G
1C43 E9         356       mov a, R1
1C44 5403       356       anl a, #00000011B
1C46 F537       356       mov ADC_Result+1, a    ; Save high result
1C48            356       
1C48 7855       356       mov R0, #55H
1C4A 1213EE     356       lcall DO_SPI_G
1C4D 8936       356       mov ADC_Result+0, R1     ; Save low result
1C4F            356       
1C4F D2A0       356       setb CE_ADC        ; deselects
1C51            356       
1C51            356       ;V_OUT = ADC_voltage*4.096V/1023
1C51 85363B     356       mov x+0, ADC_Result
1C54 85373C     356       mov x+1, ADC_Result+1
1C57 753D00     356       mov x+2, #0
1C5A 753E00     356       mov x+3, #0
1C5D            356       
1C5D 753FFB     356            mov y+0, #low (4091 % 0x10000) 
1C60 75400F     356            mov y+1, #high(4091 % 0x10000) 
1C63 754100     356            mov y+2, #low (4091 / 0x10000) 
1C66 754200     356            mov y+3, #high(4091 / 0x10000) 
1C69            356   
1C69 120491     356       lcall mul32 ;multiplies x *= y
1C6C            356       
1C6C 753FFF     356            mov y+0, #low (1023 % 0x10000) 
1C6F 754003     356            mov y+1, #high(1023 % 0x10000) 
1C72 754100     356            mov y+2, #low (1023 / 0x10000) 
1C75 754200     356            mov y+3, #high(1023 / 0x10000) 
1C78 12051E     356       lcall div32 ;divides x /= y
1C7B            356       
1C7B 753FE8     356            mov y+0, #low (1000 % 0x10000) 
1C7E 754003     356            mov y+1, #high(1000 % 0x10000) 
1C81 754100     356            mov y+2, #low (1000 / 0x10000) 
1C84 754200     356            mov y+3, #high(1000 / 0x10000) 
1C87 12051E     356       lcall div32
1C8A            356       
1C8A 853C37     356       mov ADC_Result+1, x+1
1C8D 853B36     356       mov ADC_Result+0, x+0
1C90            356            ; loads ADC_Result (16 bit) with voltage value of pressed button 
1C90 E536       356            mov a, ADC_Result+0
1C92 B40002     356            cjne a, #0, wait_release_316
1C95            356   
1C95 8061       356            sjmp endhere_316
1C97            356   wait_release_316:
1C97 C2A0       356            clr CE_ADC         ; selects 
1C99 7801       356       mov R0, #00000001B ; Start bit: 1
1C9B 1213EE     356       lcall DO_SPI_G
1C9E            356       
1C9E 78A0       356       mov R0, MASTER_START ; Read channel
1CA0 1213EE     356       lcall DO_SPI_G
1CA3 E9         356       mov a, R1
1CA4 5403       356       anl a, #00000011B
1CA6 F537       356       mov ADC_Result+1, a    ; Save high result
1CA8            356       
1CA8 7855       356       mov R0, #55H
1CAA 1213EE     356       lcall DO_SPI_G
1CAD 8936       356       mov ADC_Result+0, R1     ; Save low result
1CAF            356       
1CAF D2A0       356       setb CE_ADC        ; deselects
1CB1            356       
1CB1            356       ;V_OUT = ADC_voltage*4.096V/1023
1CB1 85363B     356       mov x+0, ADC_Result
1CB4 85373C     356       mov x+1, ADC_Result+1
1CB7 753D00     356       mov x+2, #0
1CBA 753E00     356       mov x+3, #0
1CBD            356       
1CBD 753FFB     356            mov y+0, #low (4091 % 0x10000) 
1CC0 75400F     356            mov y+1, #high(4091 % 0x10000) 
1CC3 754100     356            mov y+2, #low (4091 / 0x10000) 
1CC6 754200     356            mov y+3, #high(4091 / 0x10000) 
1CC9            356   
1CC9 120491     356       lcall mul32 ;multiplies x *= y
1CCC            356       
1CCC 753FFF     356            mov y+0, #low (1023 % 0x10000) 
1CCF 754003     356            mov y+1, #high(1023 % 0x10000) 
1CD2 754100     356            mov y+2, #low (1023 / 0x10000) 
1CD5 754200     356            mov y+3, #high(1023 / 0x10000) 
1CD8 12051E     356       lcall div32 ;divides x /= y
1CDB            356       
1CDB 753FE8     356            mov y+0, #low (1000 % 0x10000) 
1CDE 754003     356            mov y+1, #high(1000 % 0x10000) 
1CE1 754100     356            mov y+2, #low (1000 / 0x10000) 
1CE4 754200     356            mov y+3, #high(1000 / 0x10000) 
1CE7 12051E     356       lcall div32
1CEA            356       
1CEA 853C37     356       mov ADC_Result+1, x+1
1CED 853B36     356       mov ADC_Result+0, x+0
1CF0            356            ; loads ADC_Result (16 bit) with voltage value of pressed button 
1CF0 E536       356            mov a, ADC_Result+0
1CF2 B400A2     356            cjne a, #0,wait_release_316
1CF5 021CF8     356            ljmp START_ROUTINE
1CF8            356            endhere_316: ; if master start has been pressed, change to state 1
1CF8            357   
1CF8            358   START_ROUTINE: 
1CF8            359            ; We should add some code here that 
1CF8 E4         360            clr a
1CF9 C0E0       361            push acc
1CFB 7401       361            mov a, #1
1CFD 14         361            dec a
1CFE 1202FA     361            lcall ?Set_Cursor_2 ; Select column and row
1D01 D0E0       361            pop acc
1D03 C083       362            push dph
1D05 C082       362            push dpl
1D07 C0E0       362            push acc
1D09 90022D     362            mov dptr, #ISR_is_running
1D0C 1202EF     362            lcall ?Send_Constant_String
1D0F D0E0       362            pop acc
1D11 D082       362            pop dpl
1D13 D083       362            pop dph
1D15 E552       363            mov a, reflow_state
1D17            364            ;cjne a, #0x00, End_master_ISR
1D17 755201     365            mov reflow_state, #0x01
1D1A 803D       366            sjmp End_master_ISR
1D1C            367   
1D1C            368   
1D1C            369   
1D1C            370   STOP_ROUTINE: 
1D1C 755205     371            mov reflow_state, #5    
1D1F            372            ; any other things we want to do, ie, statements we want to make 
1D1F            373   
1D1F C0E0       374            push acc
1D21 7401       374            mov a, #1
1D23 14         374            dec a
1D24 1202FC     374            lcall ?Set_Cursor_1 ; Select column and row
1D27 D0E0       374            pop acc
1D29 C083       375            push dph
1D2B C082       375            push dpl
1D2D C0E0       375            push acc
1D2F 90020B     375            mov dptr, #Abort_string
1D32 1202EF     375            lcall ?Send_Constant_String
1D35 D0E0       375            pop acc
1D37 D082       375            pop dpl
1D39 D083       375            pop dph
1D3B            376   
1D3B C0E0       377            push acc
1D3D 7401       377            mov a, #1
1D3F 14         377            dec a
1D40 1202FA     377            lcall ?Set_Cursor_2 ; Select column and row
1D43 D0E0       377            pop acc
1D45 C083       378            push dph
1D47 C082       378            push dpl
1D49 C0E0       378            push acc
1D4B 90021C     378            mov dptr, #Waiting_to_cool
1D4E 1202EF     378            lcall ?Send_Constant_String
1D51 D0E0       378            pop acc
1D53 D082       378            pop dpl
1D55 D083       378            pop dph
1D57            379   
1D57 8000       380            sjmp End_master_ISR
1D59            381   
1D59            382   
1D59            383   End_master_ISR: 
1D59            384   ;        mov KBF, #1             ; enables interrupt
1D59 D0E0       385            pop acc
1D5B            386   
1D5B 32         387            reti
1D5C            388   
1D5C            389   
1D5C            390   MainProgram:
1D5C 75817F     391       mov SP, #7FH ; Set the stack pointer to the begining of idata
1D5F 121B67     392       lcall Start_stop_Init
1D62 121AB9     393            lcall seg_state_init
1D65 121AE3     394       lcall Timer0_Init
1D68 121AFF     395            lcall Timer1_Init
1D6B 121B1E     396       lcall Timer2_Init
1D6E            397            
1D6E 755200     398            mov reflow_state, #0x00
1D71            399       ; In case you decide to use the pins of P0, configure the port in bidirectional mode:
1D71 75E600     400       mov P0M0, #0
1D74 75E700     401       mov P0M1, #0
1D77            402            
1D77 758E11     403            mov AUXR, #00010001B ; Max memory.  P4.4 is a general purpose IO pin
1D7A            404   
1D7A D2AF       405       setb EA   ; Enable Global interrupts
1D7C            406       
1D7C 1213BE     407            lcall InitSerialPort
1D7F 1213E9     408            lcall INIT_SPI
1D82 1202C3     409       lcall LCD_4BIT
1D85            410            
1D85            411   forever:
1D85 12173F     412            lcall GET_TEMP_DATA      ;This is the lab3 derivative loop that grabs the data from the thermocouple, 
1D88 021754     413            ljmp reflow_state_machine       ; go do some stuff in the state_machine
1D8B 80F8       414       sjmp forever ; This is equivalent to 'forever: sjmp forever'
1D8D            415   
1D8D            416       
1D8D            417   EN
