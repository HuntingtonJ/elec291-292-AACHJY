                 -1   $MODLP51
0000              1   ;--------------------------------------------------------
0000              2   ; Special Function Registers
0000              3   ;--------------------------------------------------------
0000              4   ACC            DATA 0xe0
0000              5   B              DATA 0xf0
0000              6   PSW            DATA 0xd0
0000              7   SP             DATA 0x81
0000              8   SPX            DATA 0xef
0000              9   DPL            DATA 0x82
0000             10   DPH            DATA 0x83
0000             11   DPLB           DATA 0xd4
0000             12   DPHB           DATA 0xd5
0000             13   PAGE           DATA 0xf6
0000             14   AX             DATA 0xe1
0000             15   BX             DATA 0xf7
0000             16   DSPR           DATA 0xe2
0000             17   FIRD           DATA 0xe3
0000             18   MACL           DATA 0xe4
0000             19   MACH           DATA 0xe5
0000             20   PCON           DATA 0x87
0000             21   AUXR           DATA 0x8e
0000             22   AUXR1          DATA 0xa2
0000             23   DPCF           DATA 0xa1
0000             24   CKRL           DATA 0x97
0000             25   CKCKON0        DATA 0x8f
0000             26   CKCKON1        DATA 0xaf
0000             27   CKSEL          DATA 0x85
0000             28   CLKREG         DATA 0xae
0000             29   OSCCON         DATA 0x85
0000             30   IE             DATA 0xa8
0000             31   IEN0           DATA 0xa8
0000             32   IEN1           DATA 0xb1
0000             33   IPH0           DATA 0xb7
0000             34   IP             DATA 0xb8
0000             35   IPL0           DATA 0xb8
0000             36   IPH1           DATA 0xb3
0000             37   IPL1           DATA 0xb2
0000             38   P0             DATA 0x80
0000             39   P1             DATA 0x90
0000             40   P2             DATA 0xa0
0000             41   P3             DATA 0xb0
0000             42   P4             DATA 0xc0
0000             43   P0M0           DATA 0xe6
0000             44   P0M1           DATA 0xe7
0000             45   P1M0           DATA 0xd6
0000             46   P1M1           DATA 0xd7
0000             47   P2M0           DATA 0xce
0000             48   P2M1           DATA 0xcf
0000             49   P3M0           DATA 0xc6
0000             50   P3M1           DATA 0xc7
0000             51   P4M0           DATA 0xbe
0000             52   P4M1           DATA 0xbf
0000             53   SCON           DATA 0x98
0000             54   SBUF           DATA 0x99
0000             55   SADEN          DATA 0xb9
0000             56   SADDR          DATA 0xa9
0000             57   BDRCON         DATA 0x9b
0000             58   BRL            DATA 0x9a
0000             59   TCON           DATA 0x88
0000             60   TMOD           DATA 0x89
0000             61   TCONB          DATA 0x91
0000             62   TL0            DATA 0x8a
0000             63   TH0            DATA 0x8c
0000             64   TL1            DATA 0x8b
0000             65   TH1            DATA 0x8d
0000             66   RL0            DATA 0xf2
0000             67   RL1            DATA 0xf3
0000             68   RH0            DATA 0xf4
0000             69   RH1            DATA 0xf5
0000             70   WDTRST         DATA 0xa6
0000             71   WDTPRG         DATA 0xa7
0000             72   T2CON          DATA 0xc8
0000             73   T2MOD          DATA 0xc9
0000             74   RCAP2H         DATA 0xcb
0000             75   RCAP2L         DATA 0xca
0000             76   TH2            DATA 0xcd
0000             77   TL2            DATA 0xcc
0000             78   SPCON          DATA 0xc3
0000             79   SPSTA          DATA 0xc4
0000             80   SPDAT          DATA 0xc5
0000             81   SSCON          DATA 0x93
0000             82   SSCS           DATA 0x94
0000             83   SSDAT          DATA 0x95
0000             84   SSADR          DATA 0x96
0000             85   KBLS           DATA 0x9c
0000             86   KBE            DATA 0x9d
0000             87   KBF            DATA 0x9e
0000             88   KBMOD          DATA 0x9f
0000             89   BMSEL          DATA 0x92
0000             90   FCON           DATA 0xd2
0000             91   EECON          DATA 0xd2
0000             92   ACSRA          DATA 0xa3
0000             93   ACSRB          DATA 0xab
0000             94   AREF           DATA 0xbd
0000             95   DADC           DATA 0xa4
0000             96   DADI           DATA 0xa5
0000             97   DADL           DATA 0xac
0000             98   DADH           DATA 0xad
0000             99   CCON           DATA 0xd8
0000            100   CMOD           DATA 0xd9
0000            101   CL             DATA 0xe9
0000            102   CH             DATA 0xf9
0000            103   CCAPM0         DATA 0xda
0000            104   CCAPM1         DATA 0xdb
0000            105   CCAPM2         DATA 0xdc
0000            106   CCAPM3         DATA 0xdd
0000            107   CCAPM4         DATA 0xde
0000            108   CCAP0H         DATA 0xfa
0000            109   CCAP1H         DATA 0xfb
0000            110   CCAP2H         DATA 0xfc
0000            111   CCAP3H         DATA 0xfd
0000            112   CCAP4H         DATA 0xfe
0000            113   CCAP0L         DATA 0xea
0000            114   CCAP1L         DATA 0xeb
0000            115   CCAP2L         DATA 0xec
0000            116   CCAP3L         DATA 0xed
0000            117   CCAP4L         DATA 0xee
0000            118   ;--------------------------------------------------------
0000            119   ; special function bits
0000            120   ;--------------------------------------------------------
0000            121   P              BIT 0xd0
0000            122   F1             BIT 0xd1
0000            123   OV             BIT 0xd2
0000            124   RS0            BIT 0xd3
0000            125   RS1            BIT 0xd4
0000            126   F0             BIT 0xd5
0000            127   AC             BIT 0xd6
0000            128   CY             BIT 0xd7
0000            129   EX0            BIT 0xa8
0000            130   ET0            BIT 0xa9
0000            131   EX1            BIT 0xaa
0000            132   ET1            BIT 0xab
0000            133   ES             BIT 0xac
0000            134   ET2            BIT 0xad
0000            135   EC             BIT 0xae
0000            136   EA             BIT 0xaf
0000            137   PX0            BIT 0xb8
0000            138   PT0            BIT 0xb9
0000            139   PX1            BIT 0xba
0000            140   PT1            BIT 0xbb
0000            141   PS             BIT 0xbc
0000            142   PT2            BIT 0xbd
0000            143   IP0D           BIT 0xbf
0000            144   PPCL           BIT 0xbe
0000            145   PT2L           BIT 0xbd
0000            146   PLS            BIT 0xbc
0000            147   PT1L           BIT 0xbb
0000            148   PX1L           BIT 0xba
0000            149   PT0L           BIT 0xb9
0000            150   PX0L           BIT 0xb8
0000            151   RXD            BIT 0xb0
0000            152   TXD            BIT 0xb1
0000            153   INT0           BIT 0xb2
0000            154   INT1           BIT 0xb3
0000            155   T0             BIT 0xb4
0000            156   T1             BIT 0xb5
0000            157   WR             BIT 0xb6
0000            158   RD             BIT 0xb7
0000            159   RI             BIT 0x98
0000            160   TI             BIT 0x99
0000            161   RB8            BIT 0x9a
0000            162   TB8            BIT 0x9b
0000            163   REN            BIT 0x9c
0000            164   SM2            BIT 0x9d
0000            165   SM1            BIT 0x9e
0000            166   SM0            BIT 0x9f
0000            167   IT0            BIT 0x88
0000            168   IE0            BIT 0x89
0000            169   IT1            BIT 0x8a
0000            170   IE1            BIT 0x8b
0000            171   TR0            BIT 0x8c
0000            172   TF0            BIT 0x8d
0000            173   TR1            BIT 0x8e
0000            174   TF1            BIT 0x8f
0000            175   CP_RL2         BIT 0xc8
0000            176   C_T2           BIT 0xc9
0000            177   TR2            BIT 0xca
0000            178   EXEN2          BIT 0xcb
0000            179   TCLK           BIT 0xcc
0000            180   RCLK           BIT 0xcd
0000            181   EXF2           BIT 0xce
0000            182   TF2            BIT 0xcf
0000            183   CF             BIT 0xdf
0000            184   CR             BIT 0xde
0000            185   CCF4           BIT 0xdc
0000            186   CCF3           BIT 0xdb
0000            187   CCF2           BIT 0xda
0000            188   CCF1           BIT 0xd9
0000            189   CCF0           BIT 0xd8
0000              2   
0000              3   ; There is a couple of typos in MODLP51 in the definition of the timer 0/1 reload
0000              4   ; special function registers (SFRs), so:
0000              5   
0000              6   TIMER0_RELOAD_L DATA 0xf2
0000              7   TIMER1_RELOAD_L DATA 0xf3
0000              8   TIMER0_RELOAD_H DATA 0xf4
0000              9   TIMER1_RELOAD_H DATA 0xf5
0000             10   
0000             11   CLK              EQU 22118400 ; Microcontroller system crystal frequency in Hz
0000             12   TIMER0_RATE      EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             13   TIMER0_RELOAD    EQU ((65536-(CLK/TIMER0_RATE)))
0000             14   TIMER2_RATE      EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             15   TIMER2_RELOAD    EQU ((65536-(CLK/TIMER2_RATE)))
0000             16   MAX_TEMP              EQU 250
0000             17   TIMEOUT_TIME     EQU 60
0000             18   BAUD             EQU 115200
0000             19   BRG_VAL          EQU (0x100-(CLK/(16*BAUD)))
0000             20   MILLISECOND_WAIT EQU 200                 ; how many milliseconds between temp samples, needs to be a number evenly divisible into 1000
0000             21   Seconds_coeff     equ (1000/MILLISECOND_WAIT)
0000             22   
0000             23   DUTY_0           EQU 0
0000             24   DUTY_20          EQU 51   ;256 * 0.2
0000             25   DUTY_50          EQU 128  ;256 * 0.5
0000             26   DUTY_80          EQU 204  ;256 * 0.8
0000             27   DUTY_100         EQU 255
0000             28   
0000             29   org 0x0000
0000 021B84      30      ljmp MainProgram
0003             31   
0003             32   ; External interrupt 0 vector (not used in this code)
0003             33   org 0x0003
0003 32          34            reti
0004             35   
0004             36   ; Timer/Counter 0 overflow interrupt vector
000B             37   org 0x000B
000B 021B03      38            ljmp Timer0_ISR
000E             39   
000E             40   ; External interrupt 1 vector (not used in this code)
0013             41   org 0x0013
0013 32          42            reti
0014             43   
0014             44   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             45   org 0x001B
001B 32          46            reti
001C             47   
001C             48   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             49   org 0x0023 
0023 32          50            reti
0024             51            
0024             52   ; Timer/Counter 2 overflow interrupt vector
002B             53   org 0x002B
002B 021B40      54            ljmp Timer2_ISR
002E             55   
002E             56   ;Edge triggered keyboard interrupt vector
003B             57   org 0x003B
003B 32          58            reti
003C             59   
003C             60   ; These ’EQU’ must match the wiring between the microcontroller and ADC
003C             61   SOUND_OUT     EQU P3.7
003C             62   CE_ADC        EQU P2.0
003C             63   MY_MOSI       EQU P2.1
003C             64   MY_MISO       EQU P2.2
003C             65   MY_SCLK       EQU P2.3
003C             66   
003C             67   UP_BUTTON          EQU P2.6 
003C             68   DOWN_BUTTON   EQU P2.5
003C             69   SELECT_BUTTON equ P2.4
003C             70   BACK_BUTTON   EQU #11110000B
003C             71   MASTER_START  EQU #10100000B 
003C             72   MASTER_STOP   EQU #10110000B
003C             73   
003C             74   ; For the 7-segment display
003C             75   SEGA equ P0.3
003C             76   SEGB equ P0.5
003C             77   SEGC equ P0.7
003C             78   SEGD equ P4.4
003C             79   SEGE equ P4.5
003C             80   SEGF equ P0.4
003C             81   SEGG equ P0.6
003C             82   SEGP equ P2.7
003C             83   CA1  equ P0.1
003C             84   CA2  equ P0.0
003C             85   CA3  equ P0.2
003C             86   
003C             87   ; For the LCD
003C             88   LCD_RS equ P1.1
003C             89   LCD_RW equ P1.2
003C             90   LCD_E  equ P1.3
003C             91   LCD_D4 equ P3.2
003C             92   LCD_D5 equ P3.3
003C             93   LCD_D6 equ P3.4
003C             94   LCD_D7 equ P3.6
003C             95   
003C             96   ; pins to be used on the MPC 3008
003C             97   adc_zero                 equ #10000000B               ; LM355 temp sensor 
003C             98   adc_one                  equ #10010000B               ; thermocouple
003C             99   adc_two                  equ #10100000B               ;  start
003C            100   adc_three                equ #10110000B               ;  stop
003C            101   adc_four                 equ #11000000B               ;  
003C            102   adc_five                 equ #11010000B               ;  
003C            103   adc_six                  equ #11100000B               ; 
003C            104   adc_seven                equ #11110000B                           ; back
003C            105   
0030            106   DSEG at 0x30
0030            107   Count1ms:       ds 2 ; Used to determine when half second has passed
0032            108   Result:         ds 2 ; Temp from lm355
0034            109   Result_Thermo:  ds 2 ; Temp from Thermocoupler
0036            110   ADC_Result:     ds 2 ; Temp from ADC channel 2
0038            111   
0038            112   BCD_temp:       ds 2 ; Used to diplay temp on the 7-segment display
003A            113   seconds:        ds 1
003B            114   polling_time:    ds 1
003C            115   x:              ds 4 ; Used in math32
0040            116   y:              ds 4 ; Used in math32
0044            117   bcd:            ds 5
0049            118   soaktime:       ds 2
004B            119   soaktemp:       ds 2
004D            120   reflowtime:     ds 2
004F            121   reflowtemp:     ds 2
0051            122   soaktemp3digit: ds 2
0053            123   reflow_state:   ds 1
0054            124   pwm:            ds 1
0055            125   temp:           ds 1
0056            126   sec:            ds 1 ; seconds variable for reflow FSM (to be incremented every second)
0057            127   cooled_temp:    ds 1
0058            128   ; 7-segment vars
0058            129   disp1:          ds 1 ; Least significant digit
0059            130   disp2:          ds 1
005A            131   disp3:          ds 1 ; Most significant digit
005B            132   seg_state:      ds 1 ; state of 7_seg fsm
005C            133   display_scratch: ds 1
005D            134   seconds_state4: ds 1
005E            135   ;sec_check: ds 1
005E            136   
005E            137   
0000            138   BSEG
0000            139   mf: dbit 1
0001            140   one_second_flag: dbit 1 
0002            141   polling_flag: dbit 1
0003            142   shortbeepflag: dbit 1
0004            143   longbeepflag: dbit 1
0005            144   sixbeepflag: dbit 1
0006            145   state4_flag: dbit 1
0007            146   
0007            147   
003C            148   CSEG
003C            149                    ;                        1234567890123456
003C 20202020   150   Ramp_to_Soak:    db       '         Preheat', 0
     20202020
     20507265
     68656174
     00
004D 20202020   151   Soak:                    db   '         Soak   ', 0
     20202020
     20536F61
     6B202020
     00
005E 20202020   152   Ramp_to_Peak:    db       '         Ramp2pk', 0
     20202020
     2052616D
     7032706B
     00
006F 20202020   153   Reflow:                  db       '         Reflow ', 0
     20202020
     20526566
     6C6F7720
     00
0080 20202020   154   Cooling:                 db       '         Cooling', 0
     20202020
     20436F6F
     6C696E67
     00
0091 7300       155   secondsss:               db   's'                , 0
0093            156   ;                     1234567890123456    <- This helps determine the location of the counter
0093 57656C63   157   Welcome:                   db 'Welcome!        ', 0
     6F6D6521
     20202020
     20202020
     00
00A4 53656C65   158   Choose_option:     db 'Select option   ', 0
     6374206F
     7074696F
     6E202020
     00
00B5 50726573   159   Preset_menu_msg:  db 'Preset Profile  ', 0
     65742050
     726F6669
     6C652020
     00
00C6 43757374   160   Custom_menu_msg:  db 'Custom Profile  ', 0
     6F6D2050
     726F6669
     6C652020
     00
00D7 536F616B   161   Soak_temp:                 db 'Soak Temp       ', 0
     2054656D
     70202020
     20202020
     00
00E8 536F616B   162   Soak_time:                 db 'Soak Time       ', 0
     2054696D
     65202020
     20202020
     00
00F9 5265666C   163   Reflow_time:       db 'Reflow Time     ', 0
     6F772054
     696D6520
     20202020
     00
010A 5265666C   164   Reflow_temp:       db 'Reflow Temp     ', 0
     6F772054
     656D7020
     20202020
     00
011B 53414333   165   Pb_free_solder:    db 'SAC305 solder   ', 0
     30352073
     6F6C6465
     72202020
     00
012C 50622D73   166   Pb_solder:                 db 'Pb-solder paste ', 0
     6F6C6465
     72207061
     73746520
     00
013D 53686868   167   Pizza_msg0:        db 'Shhh! No pizza  ', 0
     21204E6F
     2070697A
     7A612020
     00
014E 616C6C6F   168   Pizza_msg1:        db 'allowed in here.', 0
     77656420
     696E2068
     6572652E
     00
015F 70726F66   169   Profile_loaded:   db 'profile loaded  ', 0
     696C6520
     6C6F6164
     65642020
     00
0170 53797374   170   Is_ready:                  db 'System Ready    ', 0
     656D2052
     65616479
     20202020
     00
0181 50726573   171   Press_start:       db 'Press Start     ', 0
     73205374
     61727420
     20202020
     00
0192 78782020   172   Set_Value:                 db 'xx              ', 0
     20202020
     20202020
     20202020
     00
01A3 20202020   173   Clear_Row:                 db '                ', 0
     20202020
     20202020
     20202020
     00
01B4 41542050   174   PRESETMENUMSG:     db 'AT PRESET MENU  ', 0
     52455345
     54204D45
     4E552020
     00
01C5 41542043   175   CUSTOMMENUMSG:     db 'AT CUSTOM MENU  ', 0
     5553544F
     4D204D45
     4E552020
     00
01D6 41726520   176   Are_you_sure:      db 'Are you sure?   ', 0
     796F7520
     73757265
     3F202020
     00
01E7 4572726F   177   Error_msg1:        db 'Error, profiles ', 0
     722C2070
     726F6669
     6C657320
     00
01F8 6E6F7420   178   Error_msg2:       db 'not loaded      ', 0
     6C6F6164
     65642020
     20202020
     00
0209 50726F63   179   Abort_string:      db 'Process aborted ', 0
     65737320
     61626F72
     74656420
     00
021A 57616974   180   Waiting_to_cool:  db 'Wait to cool    ', 0
     20746F20
     636F6F6C
     20202020
     00
022B 49535220   181   ISR_is_running:   db 'ISR is running  ', 0
     69732072
     756E6E69
     6E672020
     00
023C 5265666C   182   abort_msg:                 db 'Reflow Aborted! ', 0
     6F772041
     626F7274
     65642120
     00
024D            183   
024D 53746174   184   State_0: db 'State 0', 0
     65203000
0255 53746174   185   State_1: db 'State 1', 0
     65203100
025D            186   
025D C0F9A4B0   187   HEX_7SEG: DB 0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90
     999282F8
     8090
0267            188   
0267            189   
                191   	$LIST
0315            193   
                546   $LIST
                195   $LIST
0585            197   
                199   $LIST
13A5            201   
                203   $LIST
1751            205   
                207   $LIST
1A6A            209   
                211   $LIST
1AEC            213   
1AEC            214   ;----------------------------------------MACRO LOCATION----------------------------------------------
1AEC            215   
1AEC            216   
1AEC            217   
1AEC            218   
1AEC            219   ;---------------------------------;
1AEC            220   ; Routine to initialize the ISR   ;
1AEC            221   ; for timer 0                     ;
1AEC            222   ;---------------------------------;
1AEC            223   Timer0_Init:
1AEC E589       224            mov a, TMOD
1AEE 54F0       225            anl a, #0xf0 ; Clear the bits for timer 0
1AF0 4401       226            orl a, #0x01 ; Configure timer 0 as 16-timer
1AF2 F589       227            mov TMOD, a
1AF4 758CEA     228            mov TH0, #high(TIMER0_RELOAD)
1AF7 758AE8     229            mov TL0, #low(TIMER0_RELOAD)
1AFA            230            ; Set autoreload value
1AFA 75F4EA     231            mov TIMER0_RELOAD_H, #high(TIMER0_RELOAD)
1AFD 75F2E8     232            mov TIMER0_RELOAD_L, #low(TIMER0_RELOAD)
1B00            233            ; Enable the timer and interrupts
1B00 D2A9       234       setb ET0  ; Enable timer 0 interrupt
1B02            235            ;setb TR0  ; Start timer 0
1B02 22         236            ret
1B03            237   
1B03            238   ;---------------------------------;
1B03            239   ; ISR for timer 0.  Set to execute;
1B03            240   ; every 1/4096Hz to generate a    ;
1B03            241   ; 2048 Hz square wave at pin P3.7 ;
1B03            242   ;---------------------------------;
1B03            243   Timer0_ISR:
1B03            244            ;clr TF0  ; According to the data sheet this is done for us already.
1B03            245            ;jb sho
1B03            246            
1B03            247            
1B03            248            
1B03 8000       249            sjmp no_beep
1B05            250   beep_on:
1B05            251            ;cpl SOUND_OUT ; Connect speaker to P3.7!
1B05            252   no_beep:
1B05 32         253            reti
1B06            254            
1B06            255   ;---------------------------------;
1B06            256   ; Routine to initialize the ISR   ;
1B06            257   ; for timer 1 in PWM mode         ;
1B06            258   ;---------------------------------;
1B06            259   
1B06            260   Timer1_Init:
1B06 E589       261            mov a, TMOD
1B08 540F       262            anl a, #00001111B       ;Clears timer 1 settings but keeps timer 0 settings
1B0A 4410       263            orl a, #00010000B       ;Gate = 0, TC1 = 0, mode = 01 (mode 1)
1B0C F589       264            mov TMOD, a
1B0E            265            
1B0E E591       266            mov a, TCONB            ;load TCONB for PWM settings
1B10 5400       267            anl a, #00000000B       ;clear TCONB
1B12 4480       268            orl a, #10000000B       ;Set PWM1 = 1
1B14 F591       269            mov TCONB, a
1B16            270            
1B16 758D00     271            mov TH1, #0             ;Current count value
1B19 758B00     272            mov TL1, #0             ;Linear Prescaling
1B1C            273            
1B1C 75F500     274            mov TIMER1_RELOAD_H, #DUTY_0 ;Duty cycle percentage. Replace this value to change the duty cycle
1B1F 75F300     275            mov TIMER1_RELOAD_L, #0      ;Frequency scaling/adjust f_out = f_sys/(256 * (256 - TL))
1B22            276            
1B22 D28E       277            setb TR1
1B24 32         278            reti
1B25            279   
1B25            280   ;---------------------------------;
1B25            281   ; Routine to initialize the ISR   ;
1B25            282   ; for timer 2                     ;
1B25            283   ;---------------------------------;
1B25            284   Timer2_Init:
1B25 75C800     285            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
1B28 75CDA9     286            mov TH2, #high(TIMER2_RELOAD)
1B2B 75CC9A     287            mov TL2, #low(TIMER2_RELOAD)
1B2E            288            ; Set the reload value
1B2E 75CBA9     289            mov RCAP2H, #high(TIMER2_RELOAD)
1B31 75CA9A     290            mov RCAP2L, #low(TIMER2_RELOAD)
1B34            291            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
1B34 E4         292            clr a
1B35 F530       293            mov Count1ms+0, a
1B37 F531       294            mov Count1ms+1, a
1B39 F53B       295            mov polling_time, a     ; a variable used to increment one second as well as 200 ms
1B3B            296            ; Enable the timer and interrupts
1B3B D2AD       297       setb ET2  ; Enable timer 2 interrupt
1B3D D2CA       298       setb TR2  ; Enable timer 2
1B3F 22         299            ret
1B40            300   
1B40            301   ;---------------------------------;
1B40            302   ; ISR for timer 2                 ;
1B40            303   ;---------------------------------;
1B40            304   Timer2_ISR:
1B40 C2CF       305            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
1B42            306   
1B42            307            ; The two registers used in the ISR must be saved in the stack
1B42 C0E0       308            push acc
1B44 C0D0       309            push psw
1B46 121A8B     310            lcall seg_state_machine
1B49            311            ; Increment the 16-bit one mili second counter
1B49            312                            ;       inc Count1ms+0    ; Increment the low 8-bits first
1B49            313                                    ;mov a, Count1ms+0
1B49            314                            ;       cjne a, #10h, Timer2_ISR_done
1B49            315                            ;       mov Count1ms+0, #0h
1B49 0530       316            inc Count1ms+0    ; Increment the low 8-bits first
1B4B E530       317            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
1B4D 7002       318            jnz Inc_Done
1B4F 0531       319            inc Count1ms+1
1B51            320            
1B51            321            ;Send_BCD(bcd)
1B51            322            Inc_Done:
1B51            323            ; Check if a second has passed
1B51            324   
1B51 E530       325            mov a, Count1ms+0
1B53 B4C829     326            cjne a, #low(MILLISECOND_WAIT), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
1B56 E531       327            mov a, Count1ms+1
1B58 B40024     328            cjne a, #high(MILLISECOND_WAIT), Timer2_ISR_done
1B5B            329            
1B5B            330            ; 200 milliseconds have passed.  Set a flag so the main program knows
1B5B            331   
1B5B D202       332            setb polling_flag
1B5D            333            
1B5D            334            
1B5D            335            ;cpl TR0 ; Enable/disable timer/counter 0. This line creates a beep-silence-beep-silence sound.
1B5D            336            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
1B5D E4         337            clr a
1B5E F530       338            mov Count1ms+0, a
1B60 F531       339            mov Count1ms+1, a
1B62            340            
1B62            341            ;Checks if 1 second has passed (by checking if Seconds_coeff*Millisecond_wait interrupts have occured)
1B62 053B       342            inc polling_time
1B64 E53B       343            mov a, polling_time
1B66 B40516     344            cjne a, #Seconds_coeff, Timer2_ISR_done 
1B69 753B00     345            mov polling_time, #0x00
1B6C D201       346            setb one_second_flag
1B6E            347            ; Increment the BCD seconds counter
1B6E E53A       348            mov a, seconds
1B70 2401       349            add a, #0x01
1B72 D4         350            da a ; Decimal adjust instruction.  Check datasheet for more details!
1B73 F53A       351            mov seconds, a
1B75 300607     352            jnb state4_flag, Timer2_ISR_done
1B78 E55D       353            mov a, seconds_state4
1B7A 2401       354            add a, #0x01
1B7C D4         355            da a ; Decimal adjust instruction.  Check datasheet for more details!
1B7D F55D       356            mov seconds_state4, a
1B7F            357            
1B7F            358   Timer2_ISR_done:
1B7F D0D0       359            pop psw
1B81 D0E0       360            pop acc
1B83 32         361            reti
1B84            362   
1B84            363   MainProgram:
1B84 75817F     364       mov SP, #7FH ; Set the stack pointer to the begining of idata
1B87            365   
1B87 121AC2     366            lcall seg_state_init
1B8A 121AEC     367       lcall Timer0_Init
1B8D 121B06     368            lcall Timer1_Init
1B90 121B25     369       lcall Timer2_Init
1B93 C203       370            clr shortbeepflag
1B95 C204       371            clr longbeepflag
1B97 C205       372            clr sixbeepflag
1B99 753A00     373            mov seconds, #0x00
1B9C 755D00     374            mov seconds_state4, #0x00
1B9F 755300     375            mov reflow_state, #0x00
1BA2 755760     376            mov cooled_temp, #0x60
1BA5            377       ; In case you decide to use the pins of P0, configure the port in bidirectional mode:
1BA5 75E600     378       mov P0M0, #0
1BA8 75E700     379       mov P0M1, #0
1BAB            380            
1BAB 758E11     381            mov AUXR, #00010001B ; Max memory.  P4.4 is a general purpose IO pin
1BAE            382   
1BAE D2AF       383       setb EA   ; Enable Global interrupts
1BB0            384       
1BB0 1213BB     385            lcall InitSerialPort
1BB3 1213E6     386            lcall INIT_SPI
1BB6 1202C1     387       lcall LCD_4BIT
1BB9            388            
1BB9            389   forever:
1BB9 12173C     390            lcall GET_TEMP_DATA      ;This is the lab3 derivative loop that grabs the data from the thermocouple, 
1BBC 021751     391            ljmp reflow_state_machine       ; go do some stuff in the state_machine
1BBF 80F8       392       sjmp forever ; This is equivalent to 'forever: sjmp forever'
1BC1            393   
1BC1            394       
1BC1            395   EN
