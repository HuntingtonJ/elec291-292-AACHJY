                 -1   $MODLP51
0000              1   ;--------------------------------------------------------
0000              2   ; Special Function Registers
0000              3   ;--------------------------------------------------------
0000              4   ACC            DATA 0xe0
0000              5   B              DATA 0xf0
0000              6   PSW            DATA 0xd0
0000              7   SP             DATA 0x81
0000              8   SPX            DATA 0xef
0000              9   DPL            DATA 0x82
0000             10   DPH            DATA 0x83
0000             11   DPLB           DATA 0xd4
0000             12   DPHB           DATA 0xd5
0000             13   PAGE           DATA 0xf6
0000             14   AX             DATA 0xe1
0000             15   BX             DATA 0xf7
0000             16   DSPR           DATA 0xe2
0000             17   FIRD           DATA 0xe3
0000             18   MACL           DATA 0xe4
0000             19   MACH           DATA 0xe5
0000             20   PCON           DATA 0x87
0000             21   AUXR           DATA 0x8e
0000             22   AUXR1          DATA 0xa2
0000             23   DPCF           DATA 0xa1
0000             24   CKRL           DATA 0x97
0000             25   CKCKON0        DATA 0x8f
0000             26   CKCKON1        DATA 0xaf
0000             27   CKSEL          DATA 0x85
0000             28   CLKREG         DATA 0xae
0000             29   OSCCON         DATA 0x85
0000             30   IE             DATA 0xa8
0000             31   IEN0           DATA 0xa8
0000             32   IEN1           DATA 0xb1
0000             33   IPH0           DATA 0xb7
0000             34   IP             DATA 0xb8
0000             35   IPL0           DATA 0xb8
0000             36   IPH1           DATA 0xb3
0000             37   IPL1           DATA 0xb2
0000             38   P0             DATA 0x80
0000             39   P1             DATA 0x90
0000             40   P2             DATA 0xa0
0000             41   P3             DATA 0xb0
0000             42   P4             DATA 0xc0
0000             43   P0M0           DATA 0xe6
0000             44   P0M1           DATA 0xe7
0000             45   P1M0           DATA 0xd6
0000             46   P1M1           DATA 0xd7
0000             47   P2M0           DATA 0xce
0000             48   P2M1           DATA 0xcf
0000             49   P3M0           DATA 0xc6
0000             50   P3M1           DATA 0xc7
0000             51   P4M0           DATA 0xbe
0000             52   P4M1           DATA 0xbf
0000             53   SCON           DATA 0x98
0000             54   SBUF           DATA 0x99
0000             55   SADEN          DATA 0xb9
0000             56   SADDR          DATA 0xa9
0000             57   BDRCON         DATA 0x9b
0000             58   BRL            DATA 0x9a
0000             59   TCON           DATA 0x88
0000             60   TMOD           DATA 0x89
0000             61   TCONB          DATA 0x91
0000             62   TL0            DATA 0x8a
0000             63   TH0            DATA 0x8c
0000             64   TL1            DATA 0x8b
0000             65   TH1            DATA 0x8d
0000             66   RL0            DATA 0xf2
0000             67   RL1            DATA 0xf3
0000             68   RH0            DATA 0xf4
0000             69   RH1            DATA 0xf5
0000             70   WDTRST         DATA 0xa6
0000             71   WDTPRG         DATA 0xa7
0000             72   T2CON          DATA 0xc8
0000             73   T2MOD          DATA 0xc9
0000             74   RCAP2H         DATA 0xcb
0000             75   RCAP2L         DATA 0xca
0000             76   TH2            DATA 0xcd
0000             77   TL2            DATA 0xcc
0000             78   SPCON          DATA 0xc3
0000             79   SPSTA          DATA 0xc4
0000             80   SPDAT          DATA 0xc5
0000             81   SSCON          DATA 0x93
0000             82   SSCS           DATA 0x94
0000             83   SSDAT          DATA 0x95
0000             84   SSADR          DATA 0x96
0000             85   KBLS           DATA 0x9c
0000             86   KBE            DATA 0x9d
0000             87   KBF            DATA 0x9e
0000             88   KBMOD          DATA 0x9f
0000             89   BMSEL          DATA 0x92
0000             90   FCON           DATA 0xd2
0000             91   EECON          DATA 0xd2
0000             92   ACSRA          DATA 0xa3
0000             93   ACSRB          DATA 0xab
0000             94   AREF           DATA 0xbd
0000             95   DADC           DATA 0xa4
0000             96   DADI           DATA 0xa5
0000             97   DADL           DATA 0xac
0000             98   DADH           DATA 0xad
0000             99   CCON           DATA 0xd8
0000            100   CMOD           DATA 0xd9
0000            101   CL             DATA 0xe9
0000            102   CH             DATA 0xf9
0000            103   CCAPM0         DATA 0xda
0000            104   CCAPM1         DATA 0xdb
0000            105   CCAPM2         DATA 0xdc
0000            106   CCAPM3         DATA 0xdd
0000            107   CCAPM4         DATA 0xde
0000            108   CCAP0H         DATA 0xfa
0000            109   CCAP1H         DATA 0xfb
0000            110   CCAP2H         DATA 0xfc
0000            111   CCAP3H         DATA 0xfd
0000            112   CCAP4H         DATA 0xfe
0000            113   CCAP0L         DATA 0xea
0000            114   CCAP1L         DATA 0xeb
0000            115   CCAP2L         DATA 0xec
0000            116   CCAP3L         DATA 0xed
0000            117   CCAP4L         DATA 0xee
0000            118   ;--------------------------------------------------------
0000            119   ; special function bits
0000            120   ;--------------------------------------------------------
0000            121   P              BIT 0xd0
0000            122   F1             BIT 0xd1
0000            123   OV             BIT 0xd2
0000            124   RS0            BIT 0xd3
0000            125   RS1            BIT 0xd4
0000            126   F0             BIT 0xd5
0000            127   AC             BIT 0xd6
0000            128   CY             BIT 0xd7
0000            129   EX0            BIT 0xa8
0000            130   ET0            BIT 0xa9
0000            131   EX1            BIT 0xaa
0000            132   ET1            BIT 0xab
0000            133   ES             BIT 0xac
0000            134   ET2            BIT 0xad
0000            135   EC             BIT 0xae
0000            136   EA             BIT 0xaf
0000            137   PX0            BIT 0xb8
0000            138   PT0            BIT 0xb9
0000            139   PX1            BIT 0xba
0000            140   PT1            BIT 0xbb
0000            141   PS             BIT 0xbc
0000            142   PT2            BIT 0xbd
0000            143   IP0D           BIT 0xbf
0000            144   PPCL           BIT 0xbe
0000            145   PT2L           BIT 0xbd
0000            146   PLS            BIT 0xbc
0000            147   PT1L           BIT 0xbb
0000            148   PX1L           BIT 0xba
0000            149   PT0L           BIT 0xb9
0000            150   PX0L           BIT 0xb8
0000            151   RXD            BIT 0xb0
0000            152   TXD            BIT 0xb1
0000            153   INT0           BIT 0xb2
0000            154   INT1           BIT 0xb3
0000            155   T0             BIT 0xb4
0000            156   T1             BIT 0xb5
0000            157   WR             BIT 0xb6
0000            158   RD             BIT 0xb7
0000            159   RI             BIT 0x98
0000            160   TI             BIT 0x99
0000            161   RB8            BIT 0x9a
0000            162   TB8            BIT 0x9b
0000            163   REN            BIT 0x9c
0000            164   SM2            BIT 0x9d
0000            165   SM1            BIT 0x9e
0000            166   SM0            BIT 0x9f
0000            167   IT0            BIT 0x88
0000            168   IE0            BIT 0x89
0000            169   IT1            BIT 0x8a
0000            170   IE1            BIT 0x8b
0000            171   TR0            BIT 0x8c
0000            172   TF0            BIT 0x8d
0000            173   TR1            BIT 0x8e
0000            174   TF1            BIT 0x8f
0000            175   CP_RL2         BIT 0xc8
0000            176   C_T2           BIT 0xc9
0000            177   TR2            BIT 0xca
0000            178   EXEN2          BIT 0xcb
0000            179   TCLK           BIT 0xcc
0000            180   RCLK           BIT 0xcd
0000            181   EXF2           BIT 0xce
0000            182   TF2            BIT 0xcf
0000            183   CF             BIT 0xdf
0000            184   CR             BIT 0xde
0000            185   CCF4           BIT 0xdc
0000            186   CCF3           BIT 0xdb
0000            187   CCF2           BIT 0xda
0000            188   CCF1           BIT 0xd9
0000            189   CCF0           BIT 0xd8
0000              2   
0000              3   ; There is a couple of typos in MODLP51 in the definition of the timer 0/1 reload
0000              4   ; special function registers (SFRs), so:
0000              5   
0000              6   TIMER0_RELOAD_L DATA 0xf2
0000              7   TIMER1_RELOAD_L DATA 0xf3
0000              8   TIMER0_RELOAD_H DATA 0xf4
0000              9   TIMER1_RELOAD_H DATA 0xf5
0000             10   
0000             11   CLK              EQU 22118400 ; Microcontroller system crystal frequency in Hz
0000             12   TIMER0_RATE      EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             13   TIMER0_RELOAD    EQU ((65536-(CLK/TIMER0_RATE)))
0000             14   TIMER2_RATE      EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             15   TIMER2_RELOAD    EQU ((65536-(CLK/TIMER2_RATE)))
0000             16   MAX_TEMP              EQU 250
0000             17   TIMEOUT_TIME     EQU 60
0000             18   BAUD             EQU 115200
0000             19   BRG_VAL          EQU (0x100-(CLK/(16*BAUD)))
0000             20   MILLISECOND_WAIT EQU 200                 ; how many milliseconds between temp samples, needs to be a number evenly divisible into 1000
0000             21   Seconds_coeff     equ (1000/MILLISECOND_WAIT)
0000             22   ABORT_TIME                EQU 60
0000             23   ABORT_TEMP                EQU 50
0000             24   
0000             25   DUTY_0           EQU 0
0000             26   DUTY_20          EQU 51   ;256 * 0.2
0000             27   DUTY_50          EQU 128  ;256 * 0.5
0000             28   DUTY_80          EQU 204  ;256 * 0.8
0000             29   DUTY_100         EQU 255
0000             30   
0000             31   org 0x0000
0000 021E62      32      ljmp MainProgram
0003             33   
0003             34   ; External interrupt 0 vector (not used in this code)
0003             35   org 0x0003
0003 32          36            reti
0004             37   
0004             38   ; Timer/Counter 0 overflow interrupt vector
000B             39   org 0x000B
000B 021DEA      40            ljmp Timer0_ISR
000E             41   
000E             42   ; External interrupt 1 vector (not used in this code)
0013             43   org 0x0013
0013 32          44            reti
0014             45   
0014             46   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             47   org 0x001B
001B 32          48            reti
001C             49   
001C             50   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             51   org 0x0023 
0023 32          52            reti
0024             53            
0024             54   ; Timer/Counter 2 overflow interrupt vector
002B             55   org 0x002B
002B 021E27      56            ljmp Timer2_ISR
002E             57   
002E             58   ;Edge triggered keyboard interrupt vector
003B             59   org 0x003B
003B 32          60            reti
003C             61   
003C             62   ; These ’EQU’ must match the wiring between the microcontroller and ADC
003C             63   SOUND_OUT     EQU P3.7
003C             64   CE_ADC        EQU P2.0
003C             65   MY_MOSI       EQU P2.1
003C             66   MY_MISO       EQU P2.2
003C             67   MY_SCLK       EQU P2.3
003C             68   
003C             69   UP_BUTTON          EQU P2.6 
003C             70   DOWN_BUTTON   EQU P2.5
003C             71   SELECT_BUTTON equ P2.4
003C             72   BACK_BUTTON   EQU #11110000B
003C             73   MASTER_START  EQU #10100000B 
003C             74   MASTER_STOP   EQU #10110000B
003C             75   
003C             76   ; For the 7-segment display
003C             77   SEGA equ P0.3
003C             78   SEGB equ P0.5
003C             79   SEGC equ P0.7
003C             80   SEGD equ P4.4
003C             81   SEGE equ P4.5
003C             82   SEGF equ P0.4
003C             83   SEGG equ P0.6
003C             84   SEGP equ P2.7
003C             85   CA1  equ P0.1
003C             86   CA2  equ P0.0
003C             87   CA3  equ P0.2
003C             88   
003C             89   ; For the LCD
003C             90   LCD_RS equ P1.1
003C             91   LCD_RW equ P1.2
003C             92   LCD_E  equ P1.3
003C             93   LCD_D4 equ P3.2
003C             94   LCD_D5 equ P3.3
003C             95   LCD_D6 equ P3.4
003C             96   LCD_D7 equ P3.6
003C             97   
003C             98   ; pins to be used on the MPC 3008
003C             99   adc_zero                 equ #10000000B               ; LM355 temp sensor 
003C            100   adc_one                  equ #10010000B               ; thermocouple
003C            101   adc_two                  equ #10100000B               ;  start
003C            102   adc_three                equ #10110000B               ;  stop
003C            103   adc_four                 equ #11000000B               ;  
003C            104   adc_five                 equ #11010000B               ;  
003C            105   adc_six                  equ #11100000B               ; 
003C            106   adc_seven                equ #11110000B                           ; back
003C            107   
0030            108   DSEG at 0x30
0030            109   Count1ms:       ds 2 ; Used to determine when half second has passed
0032            110   Result:         ds 2 ; Temp from lm355
0034            111   Result_Thermo:  ds 2 ; Temp from Thermocoupler
0036            112   ADC_Result:     ds 2 ; Temp from ADC channel 2
0038            113   
0038            114   BCD_temp:       ds 2 ; Used to diplay temp on the 7-segment display
003A            115   seconds:        ds 1
003B            116   polling_time:    ds 1
003C            117   x:              ds 4 ; Used in math32
0040            118   y:              ds 4 ; Used in math32
0044            119   bcd:            ds 5
0049            120   soaktime:       ds 2
004B            121   soaktemp:       ds 2
004D            122   reflowtime:     ds 2
004F            123   reflowtemp:     ds 2
0051            124   soaktemp3digit: ds 2
0053            125   reflow_state:   ds 1
0054            126   pwm:            ds 1
0055            127   temp:           ds 1
0056            128   sec:            ds 1 ; seconds variable for reflow FSM (to be incremented every second)
0057            129   cooled_temp:    ds 1
0058            130   ; 7-segment vars
0058            131   
0058            132   disp1:          ds 1 ; Least significant digit
0059            133   disp2:          ds 1
005A            134   disp3:          ds 1 ; Most significant digit
005B            135   seg_state:      ds 1 ; state of 7_seg fsm
005C            136   display_scratch: ds 1
005D            137   seconds_state4: ds 1
005E            138   load_state:     ds 1
005F            139   load_circle:    ds 3
0062            140   ;sec_check: ds 1
0062            141   ;Beep Machine vars
0062            142   beep_state:     ds 1
0063            143   one_beep_count: ds 1
0064            144   six_beep_state: ds 1
0065            145   six_beep_count: ds 1
0066            146   
0066            147   
0000            148   BSEG
0000            149   mf: dbit 1
0001            150   one_second_flag: dbit 1 
0002            151   polling_flag: dbit 1
0003            152   state4_flag: dbit 1
0004            153   load: dbit 1
0005            154   
0005            155   
003C            156   CSEG
003C            157                    ;                        1234567890123456
003C 20202020   158   Ramp_to_Soak:    db       '         Preheat', 0
     20202020
     20507265
     68656174
     00
004D 20202020   159   Soak:                    db   '         Soak   ', 0
     20202020
     20536F61
     6B202020
     00
005E 20202020   160   Ramp_to_Peak:    db       '         Ramp2pk', 0
     20202020
     2052616D
     7032706B
     00
006F 20202020   161   Reflow:                  db       '         Reflow ', 0
     20202020
     20526566
     6C6F7720
     00
0080 20202020   162   Cooling:                 db       '         Cooling', 0
     20202020
     20436F6F
     6C696E67
     00
0091 7300       163   secondsss:               db   's'                , 0
0093            164   ;                     1234567890123456    <- This helps determine the location of the counter
0093 57656C63   165   Welcome:                   db 'Welcome!        ', 0
     6F6D6521
     20202020
     20202020
     00
00A4 53656C65   166   Choose_option:     db 'Select option   ', 0
     6374206F
     7074696F
     6E202020
     00
00B5 50726573   167   Preset_menu_msg:  db 'Preset Profile ', 0
     65742050
     726F6669
     6C652000
00C5 43757374   168   Custom_menu_msg:  db 'Custom Profile ', 0
     6F6D2050
     726F6669
     6C652000
00D5 536F616B   169   Soak_temp:                 db 'Soak Temp       ', 0
     2054656D
     70202020
     20202020
     00
00E6 536F616B   170   Soak_time:                 db 'Soak Time       ', 0
     2054696D
     65202020
     20202020
     00
00F7 5265666C   171   Reflow_time:       db 'Reflow Time     ', 0
     6F772054
     696D6520
     20202020
     00
0108 5265666C   172   Reflow_temp:       db 'Reflow Temp     ', 0
     6F772054
     656D7020
     20202020
     00
0119 53414333   173   Pb_free_solder:    db 'SAC305 solder  ', 0
     30352073
     6F6C6465
     72202000
0129 50622D73   174   Pb_solder:                 db 'Pb-solder paste', 0
     6F6C6465
     72207061
     73746500
0139 53686868   175   Pizza_msg0:        db 'Shhh! No pizza  ', 0
     21204E6F
     2070697A
     7A612020
     00
014A 616C6C6F   176   Pizza_msg1:        db 'allowed in here.', 0
     77656420
     696E2068
     6572652E
     00
015B 70726F66   177   Profile_loaded:   db 'profile loaded  ', 0
     696C6520
     6C6F6164
     65642020
     00
016C 53797374   178   Is_ready:                  db 'System Ready    ', 0
     656D2052
     65616479
     20202020
     00
017D 50726573   179   Press_start:       db 'Press Start     ', 0
     73205374
     61727420
     20202020
     00
018E 78782020   180   Set_Value:                 db 'xx              ', 0
     20202020
     20202020
     20202020
     00
019F 20202020   181   Clear_Row:                 db '                ', 0
     20202020
     20202020
     20202020
     00
01B0 41542050   182   PRESETMENUMSG:     db 'AT PRESET MENU  ', 0
     52455345
     54204D45
     4E552020
     00
01C1 41542043   183   CUSTOMMENUMSG:     db 'AT CUSTOM MENU  ', 0
     5553544F
     4D204D45
     4E552020
     00
01D2 41726520   184   Are_you_sure:      db 'Are you sure?   ', 0
     796F7520
     73757265
     3F202020
     00
01E3 4572726F   185   Error_msg1:        db 'Error, profiles ', 0
     722C2070
     726F6669
     6C657320
     00
01F4 6E6F7420   186   Error_msg2:       db 'not loaded      ', 0
     6C6F6164
     65642020
     20202020
     00
0205 50726F63   187   Abort_string:      db 'Process aborted ', 0
     65737320
     61626F72
     74656420
     00
0216 57616974   188   Waiting_to_cool:  db 'Wait to cool    ', 0
     20746F20
     636F6F6C
     20202020
     00
0227 49535220   189   ISR_is_running:   db 'ISR is running  ', 0
     69732072
     756E6E69
     6E672020
     00
0238 5265666C   190   abort_msg:                 db 'Reflow Aborted! ', 0
     6F772041
     626F7274
     65642120
     00
0249 3F00       191   choose:                    db '?'                           , 0
024B            192   
024B 53746174   193   State_0: db 'State 0', 0
     65203000
0253 53746174   194   State_1: db 'State 1', 0
     65203100
025B            195   
025B C0F9A4B0   196   HEX_7SEG: DB 0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90
     999282F8
     8090
0265            197   
                199   $LIST
02C7            201   
                203   	$LIST
0375            205   
                546   $LIST
                207   $LIST
05E5            209   
                211   $LIST
1555            213   
                215   $LIST
18F1            217   
                219   $LIST
1C97            221   
                223   $LIST
1DD3            225   ;----------------------------------------MACRO LOCATION----------------------------------------------
1DD3            226   
1DD3            227   
1DD3            228   
1DD3            229   
1DD3            230   ;---------------------------------;
1DD3            231   ; Routine to initialize the ISR   ;
1DD3            232   ; for timer 0                     ;
1DD3            233   ;---------------------------------;
1DD3            234   Timer0_Init:
1DD3 E589       235            mov a, TMOD
1DD5 54F0       236            anl a, #0xf0 ; Clear the bits for timer 0
1DD7 4401       237            orl a, #0x01 ; Configure timer 0 as 16-timer
1DD9 F589       238            mov TMOD, a
1DDB 758CEA     239            mov TH0, #high(TIMER0_RELOAD)
1DDE 758AE8     240            mov TL0, #low(TIMER0_RELOAD)
1DE1            241            ; Set autoreload value
1DE1 75F4EA     242            mov TIMER0_RELOAD_H, #high(TIMER0_RELOAD)
1DE4 75F2E8     243            mov TIMER0_RELOAD_L, #low(TIMER0_RELOAD)
1DE7            244            ; Enable the timer and interrupts
1DE7 D2A9       245       setb ET0  ; Enable timer 0 interrupt
1DE9            246            ;setb TR0  ; Start timer 0
1DE9 22         247            ret
1DEA            248   
1DEA            249   ;---------------------------------;
1DEA            250   ; ISR for timer 0.  Set to execute;
1DEA            251   ; every 1/4096Hz to generate a    ;
1DEA            252   ; 2048 Hz square wave at pin P3.7 ;
1DEA            253   ;---------------------------------;
1DEA            254   Timer0_ISR:
1DEA B2B7       255            cpl SOUND_OUT ; Connect speaker to P3.7!
1DEC 32         256            reti
1DED            257            
1DED            258   ;---------------------------------;
1DED            259   ; Routine to initialize the ISR   ;
1DED            260   ; for timer 1 in PWM mode         ;
1DED            261   ;---------------------------------;
1DED            262   
1DED            263   Timer1_Init:
1DED E589       264            mov a, TMOD
1DEF 540F       265            anl a, #00001111B       ;Clears timer 1 settings but keeps timer 0 settings
1DF1 4410       266            orl a, #00010000B       ;Gate = 0, TC1 = 0, mode = 01 (mode 1)
1DF3 F589       267            mov TMOD, a
1DF5            268            
1DF5 E591       269            mov a, TCONB            ;load TCONB for PWM settings
1DF7 5400       270            anl a, #00000000B       ;clear TCONB
1DF9 4480       271            orl a, #10000000B       ;Set PWM1 = 1
1DFB F591       272            mov TCONB, a
1DFD            273            
1DFD 758D00     274            mov TH1, #0             ;Current count value
1E00 758B00     275            mov TL1, #0             ;Linear Prescaling
1E03            276            
1E03 75F500     277            mov TIMER1_RELOAD_H, #DUTY_0 ;Duty cycle percentage. Replace this value to change the duty cycle
1E06 75F300     278            mov TIMER1_RELOAD_L, #0      ;Frequency scaling/adjust f_out = f_sys/(256 * (256 - TL))
1E09            279            
1E09 D28E       280            setb TR1
1E0B 32         281            reti
1E0C            282   
1E0C            283   ;---------------------------------;
1E0C            284   ; Routine to initialize the ISR   ;
1E0C            285   ; for timer 2                     ;
1E0C            286   ;---------------------------------;
1E0C            287   Timer2_Init:
1E0C 75C800     288            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
1E0F 75CDA9     289            mov TH2, #high(TIMER2_RELOAD)
1E12 75CC9A     290            mov TL2, #low(TIMER2_RELOAD)
1E15            291            ; Set the reload value
1E15 75CBA9     292            mov RCAP2H, #high(TIMER2_RELOAD)
1E18 75CA9A     293            mov RCAP2L, #low(TIMER2_RELOAD)
1E1B            294            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
1E1B E4         295            clr a
1E1C F530       296            mov Count1ms+0, a
1E1E F531       297            mov Count1ms+1, a
1E20 F53B       298            mov polling_time, a     ; a variable used to increment one second as well as 200 ms
1E22            299            ; Enable the timer and interrupts
1E22 D2AD       300       setb ET2  ; Enable timer 2 interrupt
1E24 D2CA       301       setb TR2  ; Enable timer 2
1E26 22         302            ret
1E27            303   
1E27            304   ;---------------------------------;
1E27            305   ; ISR for timer 2                 ;
1E27            306   ;---------------------------------;
1E27            307   Timer2_ISR:
1E27 C2CF       308            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
1E29            309   
1E29            310            ; The two registers used in the ISR must be saved in the stack
1E29 C0E0       311            push acc
1E2B C0D0       312            push psw
1E2D            313            ; Increment the 16-bit one mili second counter
1E2D            314                            ;       inc Count1ms+0    ; Increment the low 8-bits first
1E2D            315                                    ;mov a, Count1ms+0
1E2D            316                            ;       cjne a, #10h, Timer2_ISR_done
1E2D            317                            ;       mov Count1ms+0, #0h
1E2D 0530       318            inc Count1ms+0    ; Increment the low 8-bits first
1E2F E530       319            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
1E31 7002       320            jnz Inc_Done
1E33 0531       321            inc Count1ms+1
1E35            322            
1E35            323            ;Send_BCD(bcd)
1E35            324            Inc_Done:
1E35            325            ; Check if a second has passed
1E35            326   
1E35 E530       327            mov a, Count1ms+0
1E37 B4C820     328            cjne a, #low(MILLISECOND_WAIT), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
1E3A E531       329            mov a, Count1ms+1
1E3C B4001B     330            cjne a, #high(MILLISECOND_WAIT), Timer2_ISR_done
1E3F            331            
1E3F            332            ; 200 milliseconds have passed.  Set a flag so the main program knows
1E3F            333   
1E3F D202       334            setb polling_flag
1E41            335            
1E41 300403     336            jnb load, no_load
1E44 121D22     337            lcall load_sm
1E47            338   no_load:
1E47            339            
1E47            340            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
1E47 E4         341            clr a
1E48 F530       342            mov Count1ms+0, a
1E4A F531       343            mov Count1ms+1, a
1E4C            344            
1E4C            345            ;Checks if 1 second has passed (by checking if Seconds_coeff*Millisecond_wait interrupts have occured)
1E4C 053B       346            inc polling_time
1E4E E53B       347            mov a, polling_time
1E50 B40507     348            cjne a, #Seconds_coeff, Timer2_ISR_done 
1E53 753B00     349            mov polling_time, #0x00
1E56 D201       350            setb one_second_flag
1E58            351            ; Increment the BCD seconds counter
1E58 053A       352            inc seconds
1E5A            353   
1E5A            354            
1E5A            355   Timer2_ISR_done:
1E5A 121CB8     356            lcall seg_state_machine
1E5D D0D0       357            pop psw
1E5F D0E0       358            pop acc
1E61 32         359            reti
1E62            360   
1E62            361   MainProgram:
1E62 75817F     362       mov SP, #7FH ; Set the stack pointer to the begining of idata
1E65            363   
1E65 121CEF     364            lcall seg_state_init
1E68 121D19     365            lcall load_sm_init
1E6B 121DD3     366       lcall Timer0_Init
1E6E 121DED     367            lcall Timer1_Init
1E71 121E0C     368       lcall Timer2_Init
1E74 120274     369            lcall beep_machine_init
1E77            370            
1E77 755D00     371            mov seconds_state4, #0x00
1E7A 755300     372            mov reflow_state, #0x00
1E7D 75573C     373            mov cooled_temp, #60
1E80            374       ; In case you decide to use the pins of P0, configure the port in bidirectional mode:
1E80 75E600     375       mov P0M0, #0
1E83 75E700     376       mov P0M1, #0
1E86            377            
1E86 758E11     378            mov AUXR, #00010001B ; Max memory.  P4.4 is a general purpose IO pin
1E89            379   
1E89 D2AF       380       setb EA   ; Enable Global interrupts
1E8B            381       
1E8B 12156B     382            lcall InitSerialPort
1E8E 121596     383            lcall INIT_SPI
1E91 120321     384       lcall LCD_4BIT
1E94            385            
1E94            386   forever:
1E94 1218D9     387            lcall GET_TEMP_DATA      ;This is the lab3 derivative loop that grabs the data from the thermocouple, 
1E97 12027D     388            lcall beep_state_machine
1E9A 0218F1     389            ljmp reflow_state_machine       ; go do some stuff in the state_machine
1E9D 80F5       390       sjmp forever ; This is equivalent to 'forever: sjmp forever'
1E9F            391   
1E9F            392       
1E9F            393   EN
